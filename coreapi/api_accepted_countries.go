/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AcceptedCountriesAPIService AcceptedCountriesAPI service
type AcceptedCountriesAPIService service

type ApiGetAcceptedcountriesRequest struct {
	ctx context.Context
	ApiService *AcceptedCountriesAPIService
	count *int32
	startIndex *int32
	name *string
	whitelist *bool
	searchType *string
	fields *string
	sortBy *string
}

// Number of accepted countries objects to retrieve.
func (r ApiGetAcceptedcountriesRequest) Count(count int32) ApiGetAcceptedcountriesRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetAcceptedcountriesRequest) StartIndex(startIndex int32) ApiGetAcceptedcountriesRequest {
	r.startIndex = &startIndex
	return r
}

// Name of the accepted countries object.
func (r ApiGetAcceptedcountriesRequest) Name(name string) ApiGetAcceptedcountriesRequest {
	r.name = &name
	return r
}

// Specifies if the accepted countries object is an allow list.
func (r ApiGetAcceptedcountriesRequest) Whitelist(whitelist bool) ApiGetAcceptedcountriesRequest {
	r.whitelist = &whitelist
	return r
}

// Specifies the type of search you want to perform.
func (r ApiGetAcceptedcountriesRequest) SearchType(searchType string) ApiGetAcceptedcountriesRequest {
	r.searchType = &searchType
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on).  Leave blank to return all fields.
func (r ApiGetAcceptedcountriesRequest) Fields(fields string) ApiGetAcceptedcountriesRequest {
	r.fields = &fields
	return r
}

// Field on which to sort.  Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;.  Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order.  Omit the hyphen to sort in ascending order.
func (r ApiGetAcceptedcountriesRequest) SortBy(sortBy string) ApiGetAcceptedcountriesRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetAcceptedcountriesRequest) Execute() (*AcceptedCountriesListResponse, *http.Response, error) {
	return r.ApiService.GetAcceptedcountriesExecute(r)
}

/*
GetAcceptedcountries List accepted countries objects

Retrieve a list of `acceptedcountries` objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAcceptedcountriesRequest
*/
func (a *AcceptedCountriesAPIService) GetAcceptedcountries(ctx context.Context) ApiGetAcceptedcountriesRequest {
	return ApiGetAcceptedcountriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AcceptedCountriesListResponse
func (a *AcceptedCountriesAPIService) GetAcceptedcountriesExecute(r ApiGetAcceptedcountriesRequest) (*AcceptedCountriesListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AcceptedCountriesListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcceptedCountriesAPIService.GetAcceptedcountries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acceptedcountries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.whitelist != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "whitelist", r.whitelist, "")
	}
	if r.searchType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search_type", r.searchType, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAcceptedcountriesTokenRequest struct {
	ctx context.Context
	ApiService *AcceptedCountriesAPIService
	token string
	fields *string
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetAcceptedcountriesTokenRequest) Fields(fields string) ApiGetAcceptedcountriesTokenRequest {
	r.fields = &fields
	return r
}

func (r ApiGetAcceptedcountriesTokenRequest) Execute() (*AcceptedCountriesModel, *http.Response, error) {
	return r.ApiService.GetAcceptedcountriesTokenExecute(r)
}

/*
GetAcceptedcountriesToken Retrieve an accepted countries object

Retrieve a specific `acceptedcountries` object.
Send a `GET` request to the `/acceptedcountries` endpoint to retrieve existing `acceptedcountries` object tokens.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the accepted countries object.
 @return ApiGetAcceptedcountriesTokenRequest
*/
func (a *AcceptedCountriesAPIService) GetAcceptedcountriesToken(ctx context.Context, token string) ApiGetAcceptedcountriesTokenRequest {
	return ApiGetAcceptedcountriesTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return AcceptedCountriesModel
func (a *AcceptedCountriesAPIService) GetAcceptedcountriesTokenExecute(r ApiGetAcceptedcountriesTokenRequest) (*AcceptedCountriesModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AcceptedCountriesModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcceptedCountriesAPIService.GetAcceptedcountriesToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acceptedcountries/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
