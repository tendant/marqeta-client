/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountHolderGroupsAPIService AccountHolderGroupsAPI service
type AccountHolderGroupsAPIService service

type ApiGetAccountholdergroupsRequest struct {
	ctx context.Context
	ApiService *AccountHolderGroupsAPIService
	count *int32
	startIndex *int32
	sortBy *string
}

// Number of resources to retrieve.
func (r ApiGetAccountholdergroupsRequest) Count(count int32) ApiGetAccountholdergroupsRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetAccountholdergroupsRequest) StartIndex(startIndex int32) ApiGetAccountholdergroupsRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetAccountholdergroupsRequest) SortBy(sortBy string) ApiGetAccountholdergroupsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetAccountholdergroupsRequest) Execute() (*AccountHolderGroupListResponse, *http.Response, error) {
	return r.ApiService.GetAccountholdergroupsExecute(r)
}

/*
GetAccountholdergroups List account holder groups

Use this endpoint to return an array of all account holder groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAccountholdergroupsRequest
*/
func (a *AccountHolderGroupsAPIService) GetAccountholdergroups(ctx context.Context) ApiGetAccountholdergroupsRequest {
	return ApiGetAccountholdergroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountHolderGroupListResponse
func (a *AccountHolderGroupsAPIService) GetAccountholdergroupsExecute(r ApiGetAccountholdergroupsRequest) (*AccountHolderGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountHolderGroupListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountHolderGroupsAPIService.GetAccountholdergroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accountholdergroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAccountholdergroupsTokenRequest struct {
	ctx context.Context
	ApiService *AccountHolderGroupsAPIService
	token string
}

func (r ApiGetAccountholdergroupsTokenRequest) Execute() (*AccountHolderGroupResponse, *http.Response, error) {
	return r.ApiService.GetAccountholdergroupsTokenExecute(r)
}

/*
GetAccountholdergroupsToken Retrieve account holder group

Use this endpoint to retrieve a specific account holder group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the account holder group.
 @return ApiGetAccountholdergroupsTokenRequest
*/
func (a *AccountHolderGroupsAPIService) GetAccountholdergroupsToken(ctx context.Context, token string) ApiGetAccountholdergroupsTokenRequest {
	return ApiGetAccountholdergroupsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return AccountHolderGroupResponse
func (a *AccountHolderGroupsAPIService) GetAccountholdergroupsTokenExecute(r ApiGetAccountholdergroupsTokenRequest) (*AccountHolderGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountHolderGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountHolderGroupsAPIService.GetAccountholdergroupsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accountholdergroups/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostAccountholdergroupsRequest struct {
	ctx context.Context
	ApiService *AccountHolderGroupsAPIService
	accountHolderGroupRequest *AccountHolderGroupRequest
}

// Account holder group object
func (r ApiPostAccountholdergroupsRequest) AccountHolderGroupRequest(accountHolderGroupRequest AccountHolderGroupRequest) ApiPostAccountholdergroupsRequest {
	r.accountHolderGroupRequest = &accountHolderGroupRequest
	return r
}

func (r ApiPostAccountholdergroupsRequest) Execute() (*AccountHolderGroupResponse, *http.Response, error) {
	return r.ApiService.PostAccountholdergroupsExecute(r)
}

/*
PostAccountholdergroups Create account holder group

Use this endpoint to create an account holder group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostAccountholdergroupsRequest
*/
func (a *AccountHolderGroupsAPIService) PostAccountholdergroups(ctx context.Context) ApiPostAccountholdergroupsRequest {
	return ApiPostAccountholdergroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AccountHolderGroupResponse
func (a *AccountHolderGroupsAPIService) PostAccountholdergroupsExecute(r ApiPostAccountholdergroupsRequest) (*AccountHolderGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountHolderGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountHolderGroupsAPIService.PostAccountholdergroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accountholdergroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountHolderGroupRequest == nil {
		return localVarReturnValue, nil, reportError("accountHolderGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountHolderGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAccountholdergroupsTokenRequest struct {
	ctx context.Context
	ApiService *AccountHolderGroupsAPIService
	token string
	accountHolderGroupUpdateRequest *AccountHolderGroupUpdateRequest
}

// Account holder group update object
func (r ApiPutAccountholdergroupsTokenRequest) AccountHolderGroupUpdateRequest(accountHolderGroupUpdateRequest AccountHolderGroupUpdateRequest) ApiPutAccountholdergroupsTokenRequest {
	r.accountHolderGroupUpdateRequest = &accountHolderGroupUpdateRequest
	return r
}

func (r ApiPutAccountholdergroupsTokenRequest) Execute() (*AccountHolderGroupResponse, *http.Response, error) {
	return r.ApiService.PutAccountholdergroupsTokenExecute(r)
}

/*
PutAccountholdergroupsToken Update account holder group

Use this endpoint to update a specific account holder group.
Only values of parameters in the request are modified; all others are left unchanged.

To update a specific account holder group, send a `PUT` request to the `/accountholdergroups/{token}` endpoint.
Use the `token` path parameter to specify the account holder group to update.
Include the account holder group details to update in link:http://json.org[JSON, window="_blank"] format in the body of the request.
[NOTE]
While you can update account holder groups that you create, the default group is restricted and requires special permissions to update.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the account holder group.
 @return ApiPutAccountholdergroupsTokenRequest
*/
func (a *AccountHolderGroupsAPIService) PutAccountholdergroupsToken(ctx context.Context, token string) ApiPutAccountholdergroupsTokenRequest {
	return ApiPutAccountholdergroupsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return AccountHolderGroupResponse
func (a *AccountHolderGroupsAPIService) PutAccountholdergroupsTokenExecute(r ApiPutAccountholdergroupsTokenRequest) (*AccountHolderGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountHolderGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountHolderGroupsAPIService.PutAccountholdergroupsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accountholdergroups/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountHolderGroupUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("accountHolderGroupUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountHolderGroupUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
