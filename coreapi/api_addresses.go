/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AddressesAPIService AddressesAPI service
type AddressesAPIService service

type ApiGetFundingsourcesAddressesBusinessBusinesstokenRequest struct {
	ctx context.Context
	ApiService *AddressesAPIService
	businessToken string
	fields *string
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetFundingsourcesAddressesBusinessBusinesstokenRequest) Fields(fields string) ApiGetFundingsourcesAddressesBusinessBusinesstokenRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFundingsourcesAddressesBusinessBusinesstokenRequest) Execute() (*CardholderAddressListResponse, *http.Response, error) {
	return r.ApiService.GetFundingsourcesAddressesBusinessBusinesstokenExecute(r)
}

/*
GetFundingsourcesAddressesBusinessBusinesstoken List business addresses

Use this endpoint to list existing addresses for a business.
This endpoint supports <</core-api/field-filtering, field filtering>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param businessToken Unique identifier of the business account holder.  Send a `GET` request to `/businesses` to retrieve business tokens.
 @return ApiGetFundingsourcesAddressesBusinessBusinesstokenRequest
*/
func (a *AddressesAPIService) GetFundingsourcesAddressesBusinessBusinesstoken(ctx context.Context, businessToken string) ApiGetFundingsourcesAddressesBusinessBusinesstokenRequest {
	return ApiGetFundingsourcesAddressesBusinessBusinesstokenRequest{
		ApiService: a,
		ctx: ctx,
		businessToken: businessToken,
	}
}

// Execute executes the request
//  @return CardholderAddressListResponse
func (a *AddressesAPIService) GetFundingsourcesAddressesBusinessBusinesstokenExecute(r ApiGetFundingsourcesAddressesBusinessBusinesstokenRequest) (*CardholderAddressListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardholderAddressListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.GetFundingsourcesAddressesBusinessBusinesstoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fundingsources/addresses/business/{business_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"business_token"+"}", url.PathEscape(parameterValueToString(r.businessToken, "businessToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFundingsourcesAddressesFundingsourceaddresstokenRequest struct {
	ctx context.Context
	ApiService *AddressesAPIService
	fundingSourceAddressToken string
}

func (r ApiGetFundingsourcesAddressesFundingsourceaddresstokenRequest) Execute() (*CardholderAddressResponse, *http.Response, error) {
	return r.ApiService.GetFundingsourcesAddressesFundingsourceaddresstokenExecute(r)
}

/*
GetFundingsourcesAddressesFundingsourceaddresstoken Retrieve address

Use this endpoint to retrieve a funding source address.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fundingSourceAddressToken Unique identifier of the funding source address.
 @return ApiGetFundingsourcesAddressesFundingsourceaddresstokenRequest
*/
func (a *AddressesAPIService) GetFundingsourcesAddressesFundingsourceaddresstoken(ctx context.Context, fundingSourceAddressToken string) ApiGetFundingsourcesAddressesFundingsourceaddresstokenRequest {
	return ApiGetFundingsourcesAddressesFundingsourceaddresstokenRequest{
		ApiService: a,
		ctx: ctx,
		fundingSourceAddressToken: fundingSourceAddressToken,
	}
}

// Execute executes the request
//  @return CardholderAddressResponse
func (a *AddressesAPIService) GetFundingsourcesAddressesFundingsourceaddresstokenExecute(r ApiGetFundingsourcesAddressesFundingsourceaddresstokenRequest) (*CardholderAddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardholderAddressResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.GetFundingsourcesAddressesFundingsourceaddresstoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fundingsources/addresses/{funding_source_address_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"funding_source_address_token"+"}", url.PathEscape(parameterValueToString(r.fundingSourceAddressToken, "fundingSourceAddressToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFundingsourcesAddressesUserUsertokenRequest struct {
	ctx context.Context
	ApiService *AddressesAPIService
	userToken string
	fields *string
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetFundingsourcesAddressesUserUsertokenRequest) Fields(fields string) ApiGetFundingsourcesAddressesUserUsertokenRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFundingsourcesAddressesUserUsertokenRequest) Execute() (*CardholderAddressListResponse, *http.Response, error) {
	return r.ApiService.GetFundingsourcesAddressesUserUsertokenExecute(r)
}

/*
GetFundingsourcesAddressesUserUsertoken Lists all addresses for a user

Use this endpoint to list existing addresses for a user.
This endpoint supports <</core-api/field-filtering, field filtering>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userToken Unique identifier of the user account holder.
 @return ApiGetFundingsourcesAddressesUserUsertokenRequest
*/
func (a *AddressesAPIService) GetFundingsourcesAddressesUserUsertoken(ctx context.Context, userToken string) ApiGetFundingsourcesAddressesUserUsertokenRequest {
	return ApiGetFundingsourcesAddressesUserUsertokenRequest{
		ApiService: a,
		ctx: ctx,
		userToken: userToken,
	}
}

// Execute executes the request
//  @return CardholderAddressListResponse
func (a *AddressesAPIService) GetFundingsourcesAddressesUserUsertokenExecute(r ApiGetFundingsourcesAddressesUserUsertokenRequest) (*CardholderAddressListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardholderAddressListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.GetFundingsourcesAddressesUserUsertoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fundingsources/addresses/user/{user_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_token"+"}", url.PathEscape(parameterValueToString(r.userToken, "userToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFundingsourcesAddressesRequest struct {
	ctx context.Context
	ApiService *AddressesAPIService
	cardHolderAddressModel *CardHolderAddressModel
}

func (r ApiPostFundingsourcesAddressesRequest) CardHolderAddressModel(cardHolderAddressModel CardHolderAddressModel) ApiPostFundingsourcesAddressesRequest {
	r.cardHolderAddressModel = &cardHolderAddressModel
	return r
}

func (r ApiPostFundingsourcesAddressesRequest) Execute() (*CardholderAddressResponse, *http.Response, error) {
	return r.ApiService.PostFundingsourcesAddressesExecute(r)
}

/*
PostFundingsourcesAddresses Create address

Use this endpoint to create an address resource.

When creating the address, you must pass the token of either an existing user in the `user_token` field or an existing business in the `business_token` field.
Do not pass both.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFundingsourcesAddressesRequest
*/
func (a *AddressesAPIService) PostFundingsourcesAddresses(ctx context.Context) ApiPostFundingsourcesAddressesRequest {
	return ApiPostFundingsourcesAddressesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardholderAddressResponse
func (a *AddressesAPIService) PostFundingsourcesAddressesExecute(r ApiPostFundingsourcesAddressesRequest) (*CardholderAddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardholderAddressResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.PostFundingsourcesAddresses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fundingsources/addresses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cardHolderAddressModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFundingsourcesAddressesFundingsourceaddresstokenRequest struct {
	ctx context.Context
	ApiService *AddressesAPIService
	fundingSourceAddressToken string
	cardHolderAddressUpdateModel *CardHolderAddressUpdateModel
}

func (r ApiPutFundingsourcesAddressesFundingsourceaddresstokenRequest) CardHolderAddressUpdateModel(cardHolderAddressUpdateModel CardHolderAddressUpdateModel) ApiPutFundingsourcesAddressesFundingsourceaddresstokenRequest {
	r.cardHolderAddressUpdateModel = &cardHolderAddressUpdateModel
	return r
}

func (r ApiPutFundingsourcesAddressesFundingsourceaddresstokenRequest) Execute() (*CardholderAddressResponse, *http.Response, error) {
	return r.ApiService.PutFundingsourcesAddressesFundingsourceaddresstokenExecute(r)
}

/*
PutFundingsourcesAddressesFundingsourceaddresstoken Update address

Use this endpoint to update an address.
Only values of parameters in the request are modified; all others are left unchanged.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fundingSourceAddressToken Unique identifier of the funding source address.
 @return ApiPutFundingsourcesAddressesFundingsourceaddresstokenRequest
*/
func (a *AddressesAPIService) PutFundingsourcesAddressesFundingsourceaddresstoken(ctx context.Context, fundingSourceAddressToken string) ApiPutFundingsourcesAddressesFundingsourceaddresstokenRequest {
	return ApiPutFundingsourcesAddressesFundingsourceaddresstokenRequest{
		ApiService: a,
		ctx: ctx,
		fundingSourceAddressToken: fundingSourceAddressToken,
	}
}

// Execute executes the request
//  @return CardholderAddressResponse
func (a *AddressesAPIService) PutFundingsourcesAddressesFundingsourceaddresstokenExecute(r ApiPutFundingsourcesAddressesFundingsourceaddresstokenRequest) (*CardholderAddressResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardholderAddressResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressesAPIService.PutFundingsourcesAddressesFundingsourceaddresstoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fundingsources/addresses/{funding_source_address_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"funding_source_address_token"+"}", url.PathEscape(parameterValueToString(r.fundingSourceAddressToken, "fundingSourceAddressToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cardHolderAddressUpdateModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
