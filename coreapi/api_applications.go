/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ApplicationsAPIService ApplicationsAPI service
type ApplicationsAPIService service

type ApiCreditApplicationsPostRequest struct {
	ctx context.Context
	ApiService *ApplicationsAPIService
	createApplicationsRequest *CreateApplicationsRequest
}

func (r ApiCreditApplicationsPostRequest) CreateApplicationsRequest(createApplicationsRequest CreateApplicationsRequest) ApiCreditApplicationsPostRequest {
	r.createApplicationsRequest = &createApplicationsRequest
	return r
}

func (r ApiCreditApplicationsPostRequest) Execute() (*ApplicationsResponse, *http.Response, error) {
	return r.ApiService.CreditApplicationsPostExecute(r)
}

/*
CreditApplicationsPost Create application

Create a new application.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreditApplicationsPostRequest
*/
func (a *ApplicationsAPIService) CreditApplicationsPost(ctx context.Context) ApiCreditApplicationsPostRequest {
	return ApiCreditApplicationsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApplicationsResponse
func (a *ApplicationsAPIService) CreditApplicationsPostExecute(r ApiCreditApplicationsPostRequest) (*ApplicationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsAPIService.CreditApplicationsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/applications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createApplicationsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFileByTypeRequest struct {
	ctx context.Context
	ApiService *ApplicationsAPIService
	type_ FileType
	bundleToken *string
	applicationToken *string
}

// Unique identifier of the bundle on which you want to retrieve a file.  Required if retrieving one of the following file types:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60;
func (r ApiGetFileByTypeRequest) BundleToken(bundleToken string) ApiGetFileByTypeRequest {
	r.bundleToken = &bundleToken
	return r
}

// Unique identifier of the application on which you want to retrieve a file.  Required if retrieving one of the following files:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;TERMS_SCHEDULE&#x60;
func (r ApiGetFileByTypeRequest) ApplicationToken(applicationToken string) ApiGetFileByTypeRequest {
	r.applicationToken = &applicationToken
	return r
}

func (r ApiGetFileByTypeRequest) Execute() (*FileResponse, *http.Response, error) {
	return r.ApiService.GetFileByTypeExecute(r)
}

/*
GetFileByType Retrieve file on a bundle or application

Retrieve a specific type of file on a bundle or application.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param type_ The type of file to retrieve.  * `SOCT` - The Summary of Credit Terms (SOCT), which outlines the interest rates, interest charges, and fees associated with the credit account being offered to the user. * `REWARDS_DISCLOSURE_PRE_TERMS` - The Rewards Disclosure Pre-terms, which discloses detailed information about the rewards program on the credit account being offered to the user before a decision is rendered on their application. * `REWARDS_DISCLOSURE_POST_TERMS` - The Rewards Disclosure Post-terms, which discloses detailed information about the rewards program on the user's credit account if their application is approved. * `BENEFITS_DISCLOSURE` - The Benefits Disclosure, which which is given to a user if their application is approved and discloses detailed information about the benefits on the user's credit account. * `CARD_MEMBER_AGREEMENT` - The Card Member Agreement, which specifies the terms and conditions of the user's credit account, including the interest rates, interest charges, fees, minimum payment calculations, and more. * `PRIVACY_POLICY` - The Privacy Policy, which explains how the information on the user's application is collected, handled, and processed. * `E_DISCLOSURE` - The eDisclosure, which states that the user has agreed to receive disclosures electronically. * `TERMS_SCHEDULE` - The Terms Schedule, which is given to a user if their application is approved and specifies the interest rate details on the user's credit account. * `NOAA` - The Notice of Adverse Action (NOAA), which is given to a user if their application is declined and informs them of the specific reasons why they were denied a credit account.
 @return ApiGetFileByTypeRequest
*/
func (a *ApplicationsAPIService) GetFileByType(ctx context.Context, type_ FileType) ApiGetFileByTypeRequest {
	return ApiGetFileByTypeRequest{
		ApiService: a,
		ctx: ctx,
		type_: type_,
	}
}

// Execute executes the request
//  @return FileResponse
func (a *ApplicationsAPIService) GetFileByTypeExecute(r ApiGetFileByTypeRequest) (*FileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsAPIService.GetFileByType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/applications/files/{type}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", url.PathEscape(parameterValueToString(r.type_, "type_")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bundleToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bundle_token", r.bundleToken, "")
	}
	if r.applicationToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "application_token", r.applicationToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPageApplicationTransitionsRequest struct {
	ctx context.Context
	ApiService *ApplicationsAPIService
	token string
}

func (r ApiPageApplicationTransitionsRequest) Execute() (*ApplicationsTransitionPage, *http.Response, error) {
	return r.ApiService.PageApplicationTransitionsExecute(r)
}

/*
PageApplicationTransitions List application transitions

Retrieve an array of transitions on a specific application.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token The unique identifier of the application for which you want to retrieve transitions.
 @return ApiPageApplicationTransitionsRequest
*/
func (a *ApplicationsAPIService) PageApplicationTransitions(ctx context.Context, token string) ApiPageApplicationTransitionsRequest {
	return ApiPageApplicationTransitionsRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return ApplicationsTransitionPage
func (a *ApplicationsAPIService) PageApplicationTransitionsExecute(r ApiPageApplicationTransitionsRequest) (*ApplicationsTransitionPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationsTransitionPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsAPIService.PageApplicationTransitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/applications/{token}/transitions"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveApplicationRequest struct {
	ctx context.Context
	ApiService *ApplicationsAPIService
	token string
	expand *[]ExpandObjects
}

// Embeds the specified object into the response.
func (r ApiRetrieveApplicationRequest) Expand(expand []ExpandObjects) ApiRetrieveApplicationRequest {
	r.expand = &expand
	return r
}

func (r ApiRetrieveApplicationRequest) Execute() (*ApplicationsResponse, *http.Response, error) {
	return r.ApiService.RetrieveApplicationExecute(r)
}

/*
RetrieveApplication Retrieve application

Retrieve a specific application.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the application to retrieve.
 @return ApiRetrieveApplicationRequest
*/
func (a *ApplicationsAPIService) RetrieveApplication(ctx context.Context, token string) ApiRetrieveApplicationRequest {
	return ApiRetrieveApplicationRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return ApplicationsResponse
func (a *ApplicationsAPIService) RetrieveApplicationExecute(r ApiRetrieveApplicationRequest) (*ApplicationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsAPIService.RetrieveApplication")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/applications/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.expand != nil {
		t := *r.expand
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "expand", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "expand", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveFilesRequest struct {
	ctx context.Context
	ApiService *ApplicationsAPIService
	bundleToken *string
	applicationToken *string
}

// Unique identifier of the bundle whose files you want to retrieve.  The following file types are returned with the &#x60;bundle_token&#x60;:  * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60;
func (r ApiRetrieveFilesRequest) BundleToken(bundleToken string) ApiRetrieveFilesRequest {
	r.bundleToken = &bundleToken
	return r
}

// Unique identifier of the application whose files you want to retrieve.  The following file types are returned with the &#x60;application_token&#x60;:  * &#x60;BENEFITS_DISCLOSURE&#x60; * &#x60;CARD_MEMBER_AGREEMENT&#x60; * &#x60;E_DISCLOSURE&#x60; * &#x60;NOAA&#x60; * &#x60;PRIVACY_POLICY&#x60; * &#x60;REWARDS_DISCLOSURE_PRE_TERMS&#x60; * &#x60;REWARDS_DISCLOSURE_POST_TERMS&#x60; * &#x60;SOCT&#x60; * &#x60;TERMS_SCHEDULE&#x60;
func (r ApiRetrieveFilesRequest) ApplicationToken(applicationToken string) ApiRetrieveFilesRequest {
	r.applicationToken = &applicationToken
	return r
}

func (r ApiRetrieveFilesRequest) Execute() (*map[string]FileResponse, *http.Response, error) {
	return r.ApiService.RetrieveFilesExecute(r)
}

/*
RetrieveFiles List files on a bundle or application

Retrieve an array of files on a bundle or application

Each top-level object returned in the array contains the fields documented in the <</core-api/credit-applications#_response_body_4, response body>>. The name of each object is its corresponding file type:

* `BENEFITS_DISCLOSURE`
* `CARD_MEMBER_AGREEMENT`
* `E_DISCLOSURE`
* `NOAA`
* `PRIVACY_POLICY`
* `REWARDS_DISCLOSURE_PRE_TERMS`
* `REWARDS_DISCLOSURE_POST_TERMS`
* `SOCT`
* `TERMS_SCHEDULE`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRetrieveFilesRequest
*/
func (a *ApplicationsAPIService) RetrieveFiles(ctx context.Context) ApiRetrieveFilesRequest {
	return ApiRetrieveFilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]FileResponse
func (a *ApplicationsAPIService) RetrieveFilesExecute(r ApiRetrieveFilesRequest) (*map[string]FileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *map[string]FileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsAPIService.RetrieveFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/applications/files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bundleToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bundle_token", r.bundleToken, "")
	}
	if r.applicationToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "application_token", r.applicationToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTransitionApplicationRequest struct {
	ctx context.Context
	ApiService *ApplicationsAPIService
	token string
	applicationTransitionRequest *ApplicationTransitionRequest
}

func (r ApiTransitionApplicationRequest) ApplicationTransitionRequest(applicationTransitionRequest ApplicationTransitionRequest) ApiTransitionApplicationRequest {
	r.applicationTransitionRequest = &applicationTransitionRequest
	return r
}

func (r ApiTransitionApplicationRequest) Execute() (*ApplicationTransitionResponse, *http.Response, error) {
	return r.ApiService.TransitionApplicationExecute(r)
}

/*
TransitionApplication Transition application state

Transition the current state of an application to a new state.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the application whose state you want to transition.
 @return ApiTransitionApplicationRequest
*/
func (a *ApplicationsAPIService) TransitionApplication(ctx context.Context, token string) ApiTransitionApplicationRequest {
	return ApiTransitionApplicationRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return ApplicationTransitionResponse
func (a *ApplicationsAPIService) TransitionApplicationExecute(r ApiTransitionApplicationRequest) (*ApplicationTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApplicationTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsAPIService.TransitionApplication")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/applications/{token}/transitions"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.applicationTransitionRequest == nil {
		return localVarReturnValue, nil, reportError("applicationTransitionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.applicationTransitionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
