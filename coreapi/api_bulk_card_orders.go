/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BulkCardOrdersAPIService BulkCardOrdersAPI service
type BulkCardOrdersAPIService service

type ApiGetBulkissuancesRequest struct {
	ctx context.Context
	ApiService *BulkCardOrdersAPIService
	count *int32
	startIndex *int32
	sortBy *string
}

// Number of bulk card orders to retrieve.
func (r ApiGetBulkissuancesRequest) Count(count int32) ApiGetBulkissuancesRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetBulkissuancesRequest) StartIndex(startIndex int32) ApiGetBulkissuancesRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetBulkissuancesRequest) SortBy(sortBy string) ApiGetBulkissuancesRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetBulkissuancesRequest) Execute() (*BulkCardOrderListResponse, *http.Response, error) {
	return r.ApiService.GetBulkissuancesExecute(r)
}

/*
GetBulkissuances List bulk card orders

Use this endpoint to list existing bulk card orders.

This endpoint supports <</core-api/sorting-and-pagination, pagination and sorting>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBulkissuancesRequest
*/
func (a *BulkCardOrdersAPIService) GetBulkissuances(ctx context.Context) ApiGetBulkissuancesRequest {
	return ApiGetBulkissuancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BulkCardOrderListResponse
func (a *BulkCardOrdersAPIService) GetBulkissuancesExecute(r ApiGetBulkissuancesRequest) (*BulkCardOrderListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkCardOrderListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkCardOrdersAPIService.GetBulkissuances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bulkissuances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBulkissuancesTokenRequest struct {
	ctx context.Context
	ApiService *BulkCardOrdersAPIService
	token string
}

func (r ApiGetBulkissuancesTokenRequest) Execute() (*BulkIssuanceResponse, *http.Response, error) {
	return r.ApiService.GetBulkissuancesTokenExecute(r)
}

/*
GetBulkissuancesToken Retrieve bulk card order

Use this endpoint to retrieve a specific bulk card order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token The unique identifier of the bulk card order to retrieve.
 @return ApiGetBulkissuancesTokenRequest
*/
func (a *BulkCardOrdersAPIService) GetBulkissuancesToken(ctx context.Context, token string) ApiGetBulkissuancesTokenRequest {
	return ApiGetBulkissuancesTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return BulkIssuanceResponse
func (a *BulkCardOrdersAPIService) GetBulkissuancesTokenExecute(r ApiGetBulkissuancesTokenRequest) (*BulkIssuanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkIssuanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkCardOrdersAPIService.GetBulkissuancesToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bulkissuances/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostBulkissuancesRequest struct {
	ctx context.Context
	ApiService *BulkCardOrdersAPIService
	bulkIssuanceRequest *BulkIssuanceRequest
}

func (r ApiPostBulkissuancesRequest) BulkIssuanceRequest(bulkIssuanceRequest BulkIssuanceRequest) ApiPostBulkissuancesRequest {
	r.bulkIssuanceRequest = &bulkIssuanceRequest
	return r
}

func (r ApiPostBulkissuancesRequest) Execute() (*BulkIssuanceResponse, *http.Response, error) {
	return r.ApiService.PostBulkissuancesExecute(r)
}

/*
PostBulkissuances Create bulk card order

Use this endpoint to order physical cards in bulk.
A new bulk card order creates new cards or users, generally within about a day.

Before creating a bulk card order, set the `config.fulfillment.bulk_ship` field of the associated card product to `true`.

*To associate all cards with the same user:*

* Set `user_association.single_inventory_user=true`
* Set `user_association.single_inventory_user_token` equal to the token of an existing user.

The bulk card order automatically populates the database with the specified card objects.
Values for the card `token` fields are generated in the format `card-numericPostfix`, where `numericPostfix` is a randomly generated number that is added for each new card that is generated.

*To associate each card with a unique user:*

Set `user_association.single_inventory_user=false`.
Both the cards and their associated users are automatically generated.
Values for the user `token` fields are generated in the format `user-numericPostfix`.
The `numericPostfix` values for cards and their associated users match.
This value is also printed on the physical cards if the `name_line_1_numeric_postfix` field is set to `true`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostBulkissuancesRequest
*/
func (a *BulkCardOrdersAPIService) PostBulkissuances(ctx context.Context) ApiPostBulkissuancesRequest {
	return ApiPostBulkissuancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BulkIssuanceResponse
func (a *BulkCardOrdersAPIService) PostBulkissuancesExecute(r ApiPostBulkissuancesRequest) (*BulkIssuanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkIssuanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkCardOrdersAPIService.PostBulkissuances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bulkissuances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkIssuanceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
