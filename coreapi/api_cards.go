/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CardsAPIService CardsAPI service
type CardsAPIService service

type ApiGetCardsRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	lastFour *string
	count *int32
	startIndex *int32
	fields *string
	sortBy *string
}

// Last four digits of the primary account number (PAN) of the card you want to locate.
func (r ApiGetCardsRequest) LastFour(lastFour string) ApiGetCardsRequest {
	r.lastFour = &lastFour
	return r
}

// Number of resources to retrieve.
func (r ApiGetCardsRequest) Count(count int32) ApiGetCardsRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetCardsRequest) StartIndex(startIndex int32) ApiGetCardsRequest {
	r.startIndex = &startIndex
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetCardsRequest) Fields(fields string) ApiGetCardsRequest {
	r.fields = &fields
	return r
}

// Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetCardsRequest) SortBy(sortBy string) ApiGetCardsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetCardsRequest) Execute() (*CardListResponse, *http.Response, error) {
	return r.ApiService.GetCardsExecute(r)
}

/*
GetCards List cards by last 4 digits of PAN

Retrieves an array of cards whose primary account numbers (PANs) end in the four digits specified by the `last_four` query parameter.

This endpoint supports <</core-api/field-filtering, field filtering>>, <</core-api/object-expansion, object expansion>>, <</core-api/sorting-and-pagination, sorting, and pagination>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCardsRequest
*/
func (a *CardsAPIService) GetCards(ctx context.Context) ApiGetCardsRequest {
	return ApiGetCardsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardListResponse
func (a *CardsAPIService) GetCardsExecute(r ApiGetCardsRequest) (*CardListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.GetCards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lastFour == nil {
		return localVarReturnValue, nil, reportError("lastFour is required and must be specified")
	}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "last_four", r.lastFour, "")
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCardsBarcodeBarcodeRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	barcode string
	fields *string
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetCardsBarcodeBarcodeRequest) Fields(fields string) ApiGetCardsBarcodeBarcodeRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCardsBarcodeBarcodeRequest) Execute() (*CardResponse, *http.Response, error) {
	return r.ApiService.GetCardsBarcodeBarcodeExecute(r)
}

/*
GetCardsBarcodeBarcode Retrieve card by barcode

Retrieves a card by its barcode.

This endpoint supports <</core-api/field-filtering, field filtering>> and <</core-api/object-expansion, object expansion>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param barcode Barcode of the card to retrieve.
 @return ApiGetCardsBarcodeBarcodeRequest
*/
func (a *CardsAPIService) GetCardsBarcodeBarcode(ctx context.Context, barcode string) ApiGetCardsBarcodeBarcodeRequest {
	return ApiGetCardsBarcodeBarcodeRequest{
		ApiService: a,
		ctx: ctx,
		barcode: barcode,
	}
}

// Execute executes the request
//  @return CardResponse
func (a *CardsAPIService) GetCardsBarcodeBarcodeExecute(r ApiGetCardsBarcodeBarcodeRequest) (*CardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.GetCardsBarcodeBarcode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cards/barcode/{barcode}"
	localVarPath = strings.Replace(localVarPath, "{"+"barcode"+"}", url.PathEscape(parameterValueToString(r.barcode, "barcode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCardsTokenRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	token string
	fields *string
	expand *string
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetCardsTokenRequest) Fields(fields string) ApiGetCardsTokenRequest {
	r.fields = &fields
	return r
}

// Embeds the associated object of the specified type into the response, for all &#x60;GET /cards&#x60; endpoints.
func (r ApiGetCardsTokenRequest) Expand(expand string) ApiGetCardsTokenRequest {
	r.expand = &expand
	return r
}

func (r ApiGetCardsTokenRequest) Execute() (*CardResponse, *http.Response, error) {
	return r.ApiService.GetCardsTokenExecute(r)
}

/*
GetCardsToken Retrieve card

Retrieves a specific card.

This endpoint supports <</core-api/field-filtering, field filtering>> and <</core-api/object-expansion, object expansion>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the card you want to retrieve.
 @return ApiGetCardsTokenRequest
*/
func (a *CardsAPIService) GetCardsToken(ctx context.Context, token string) ApiGetCardsTokenRequest {
	return ApiGetCardsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return CardResponse
func (a *CardsAPIService) GetCardsTokenExecute(r ApiGetCardsTokenRequest) (*CardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.GetCardsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cards/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCardsTokenShowpanRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	token string
	fields *string
	showCvvNumber *bool
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetCardsTokenShowpanRequest) Fields(fields string) ApiGetCardsTokenShowpanRequest {
	r.fields = &fields
	return r
}

// Set to &#x60;true&#x60; to show the CVV2 number in the response.
func (r ApiGetCardsTokenShowpanRequest) ShowCvvNumber(showCvvNumber bool) ApiGetCardsTokenShowpanRequest {
	r.showCvvNumber = &showCvvNumber
	return r
}

func (r ApiGetCardsTokenShowpanRequest) Execute() (*CardResponse, *http.Response, error) {
	return r.ApiService.GetCardsTokenShowpanExecute(r)
}

/*
GetCardsTokenShowpan Show card PAN

Retrieves a primary account number (PAN).
For security reasons, the PAN is not fully visible on the card resource returned by `GET` `/cards/{token}`.

This endpoint supports <</core-api/field-filtering, field filtering>> and <</core-api/object-expansion, object expansion>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the card whose primary account number (PAN) you want to retrieve. Send a `GET` request to `/cards` to retrieve card tokens.
 @return ApiGetCardsTokenShowpanRequest
*/
func (a *CardsAPIService) GetCardsTokenShowpan(ctx context.Context, token string) ApiGetCardsTokenShowpanRequest {
	return ApiGetCardsTokenShowpanRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return CardResponse
func (a *CardsAPIService) GetCardsTokenShowpanExecute(r ApiGetCardsTokenShowpanRequest) (*CardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.GetCardsTokenShowpan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cards/{token}/showpan"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.showCvvNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_cvv_number", r.showCvvNumber, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCardsUserTokenRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	token string
	count *int32
	startIndex *int32
	fields *string
	sortBy *string
}

// Number of resources to retrieve.
func (r ApiGetCardsUserTokenRequest) Count(count int32) ApiGetCardsUserTokenRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetCardsUserTokenRequest) StartIndex(startIndex int32) ApiGetCardsUserTokenRequest {
	r.startIndex = &startIndex
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetCardsUserTokenRequest) Fields(fields string) ApiGetCardsUserTokenRequest {
	r.fields = &fields
	return r
}

// Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetCardsUserTokenRequest) SortBy(sortBy string) ApiGetCardsUserTokenRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetCardsUserTokenRequest) Execute() (*CardListResponse, *http.Response, error) {
	return r.ApiService.GetCardsUserTokenExecute(r)
}

/*
GetCardsUserToken List cards for user

Retrieves a list of the cards associated with a specific user.

This endpoint supports <</core-api/field-filtering, field filtering,>> <</core-api/sorting-and-pagination, pagination>>, and <</core-api/object-expansion, object expansion>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the user whose cards you want to list. Send a `GET` request to `/users` to retrieve user tokens.
 @return ApiGetCardsUserTokenRequest
*/
func (a *CardsAPIService) GetCardsUserToken(ctx context.Context, token string) ApiGetCardsUserTokenRequest {
	return ApiGetCardsUserTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return CardListResponse
func (a *CardsAPIService) GetCardsUserTokenExecute(r ApiGetCardsUserTokenRequest) (*CardListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.GetCardsUserToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cards/user/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCardsRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	showCvvNumber *bool
	showPan *bool
	cardRequest *CardRequest
}

// Set to &#x60;true&#x60; to show the CVV2 number in the response.
func (r ApiPostCardsRequest) ShowCvvNumber(showCvvNumber bool) ApiPostCardsRequest {
	r.showCvvNumber = &showCvvNumber
	return r
}

// Set to &#x60;true&#x60; to show the full primary account number (PAN) in the response.
func (r ApiPostCardsRequest) ShowPan(showPan bool) ApiPostCardsRequest {
	r.showPan = &showPan
	return r
}

func (r ApiPostCardsRequest) CardRequest(cardRequest CardRequest) ApiPostCardsRequest {
	r.cardRequest = &cardRequest
	return r
}

func (r ApiPostCardsRequest) Execute() (*CardResponse, *http.Response, error) {
	return r.ApiService.PostCardsExecute(r)
}

/*
PostCards Create card

Creates a card.

Create the user and card product before you create the card.
You create a card using the `user_token` of the user who will own the card and the `card_product_token` of the card product that will control the card.

[TIP]
By default, newly created cards are inactive and must be explicitly activated (see <</core-api/cards#_create_card_transition, Create Card Transition>> for information on activating cards).
To create cards that are activated upon issue, configure your card product's `config.card_life_cycle.activate_upon_issue` field (see <</core-api/card-products, Card Products>>).

Send a `POST` request to `/pins/controltoken` to set the card's personal identification number (PIN) if your program requires PIN numbers (for example, for Europay Mastercard and Visa cards); this action updates the `pin_is_set` field to `true`.
See <</core-api/pins#_create_or_update_pin, Create or Update PIN>> for details.

You can use optional query parameters to show the primary account number (PAN) and card verification value (CVV2) number in the response.
If `show_pan` and `show_cvv_number` are set to `true`, the fulfillment state of the card is `DIGITALLY_PRESENTED` instead of the typical initial state of `ISSUED`.
This fulfillment state does not affect the delivery of physical cards.

This endpoint requires PCI DSS compliance if `show_pan` and `show_cvv_number` are set to `true`.
You must comply with PCI DSS data security requirements if you store, transmit, or process sensitive card data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCardsRequest
*/
func (a *CardsAPIService) PostCards(ctx context.Context) ApiPostCardsRequest {
	return ApiPostCardsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardResponse
func (a *CardsAPIService) PostCardsExecute(r ApiPostCardsRequest) (*CardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.PostCards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showCvvNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_cvv_number", r.showCvvNumber, "")
	} else {
		var defaultValue bool = false
		r.showCvvNumber = &defaultValue
	}
	if r.showPan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_pan", r.showPan, "")
	} else {
		var defaultValue bool = false
		r.showPan = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cardRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCardsGetbypanRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	panRequest *PanRequest
}

func (r ApiPostCardsGetbypanRequest) PanRequest(panRequest PanRequest) ApiPostCardsGetbypanRequest {
	r.panRequest = &panRequest
	return r
}

func (r ApiPostCardsGetbypanRequest) Execute() (*PanResponse, *http.Response, error) {
	return r.ApiService.PostCardsGetbypanExecute(r)
}

/*
PostCardsGetbypan Retrieve card by PAN

Retrieves the `user_token` and `card_token` for a primary account number (PAN).
In the case of a reissued card, where multiple cards share the same PAN, the information for the most recently issued card is returned.

This request is useful in IVR scenarios where a user has telephoned and identifies the card by the PAN.
The retrieval of these tokens is implemented as a `POST` request because supplying the PAN in the request body is more secure than supplying it in the URL (as would be required with a `GET`).

[WARNING]
Sending a request to this endpoint requires PCI DSS compliance.
You must comply with PCI DSS data security requirements if you want to store, transmit, or process sensitive card data such as the cardholder's primary account number (PAN), personal identification number (PIN), and card expiration date.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCardsGetbypanRequest
*/
func (a *CardsAPIService) PostCardsGetbypan(ctx context.Context) ApiPostCardsGetbypanRequest {
	return ApiPostCardsGetbypanRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PanResponse
func (a *CardsAPIService) PostCardsGetbypanExecute(r ApiPostCardsGetbypanRequest) (*PanResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PanResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.PostCardsGetbypan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cards/getbypan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.panRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCardsTokenRequest struct {
	ctx context.Context
	ApiService *CardsAPIService
	token string
	cardUpdateRequest *CardUpdateRequest
}

func (r ApiPutCardsTokenRequest) CardUpdateRequest(cardUpdateRequest CardUpdateRequest) ApiPutCardsTokenRequest {
	r.cardUpdateRequest = &cardUpdateRequest
	return r
}

func (r ApiPutCardsTokenRequest) Execute() (*CardResponse, *http.Response, error) {
	return r.ApiService.PutCardsTokenExecute(r)
}

/*
PutCardsToken Update card

Updates the details of an existing card.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the card you want to update.
 @return ApiPutCardsTokenRequest
*/
func (a *CardsAPIService) PutCardsToken(ctx context.Context, token string) ApiPutCardsTokenRequest {
	return ApiPutCardsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return CardResponse
func (a *CardsAPIService) PutCardsTokenExecute(r ApiPutCardsTokenRequest) (*CardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CardsAPIService.PutCardsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cards/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cardUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
