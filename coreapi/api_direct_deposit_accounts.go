/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DirectDepositAccountsAPIService DirectDepositAccountsAPI service
type DirectDepositAccountsAPIService service

type ApiCreateAccountRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	directDepositAccountRequest *DirectDepositAccountRequest
}

// Create direct deposit account for cardholder
func (r ApiCreateAccountRequest) DirectDepositAccountRequest(directDepositAccountRequest DirectDepositAccountRequest) ApiCreateAccountRequest {
	r.directDepositAccountRequest = &directDepositAccountRequest
	return r
}

func (r ApiCreateAccountRequest) Execute() (*DirectDepositAccountResponse, *http.Response, error) {
	return r.ApiService.CreateAccountExecute(r)
}

/*
CreateAccount Creates new direct deposit account for cardholder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAccountRequest
*/
func (a *DirectDepositAccountsAPIService) CreateAccount(ctx context.Context) ApiCreateAccountRequest {
	return ApiCreateAccountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DirectDepositAccountResponse
func (a *DirectDepositAccountsAPIService) CreateAccountExecute(r ApiCreateAccountRequest) (*DirectDepositAccountResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositAccountResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.CreateAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.directDepositAccountRequest == nil {
		return localVarReturnValue, nil, reportError("directDepositAccountRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.directDepositAccountRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTransitionRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	directDepositAccountTransitionRequest *DirectDepositAccountTransitionRequest
}

// Create transition for direct deposit account
func (r ApiCreateTransitionRequest) DirectDepositAccountTransitionRequest(directDepositAccountTransitionRequest DirectDepositAccountTransitionRequest) ApiCreateTransitionRequest {
	r.directDepositAccountTransitionRequest = &directDepositAccountTransitionRequest
	return r
}

func (r ApiCreateTransitionRequest) Execute() (*DirectDepositAccountTransitionResponse, *http.Response, error) {
	return r.ApiService.CreateTransitionExecute(r)
}

/*
CreateTransition Creates new transition for a direct deposit account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateTransitionRequest
*/
func (a *DirectDepositAccountsAPIService) CreateTransition(ctx context.Context) ApiCreateTransitionRequest {
	return ApiCreateTransitionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DirectDepositAccountTransitionResponse
func (a *DirectDepositAccountsAPIService) CreateTransitionExecute(r ApiCreateTransitionRequest) (*DirectDepositAccountTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositAccountTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.CreateTransition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts/transitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.directDepositAccountTransitionRequest == nil {
		return localVarReturnValue, nil, reportError("directDepositAccountTransitionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.directDepositAccountTransitionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCDDInfoRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	token string
}

func (r ApiGetCDDInfoRequest) Execute() (*CustomerDueDiligenceResponse, *http.Response, error) {
	return r.ApiService.GetCDDInfoExecute(r)
}

/*
GetCDDInfo Get direct deposit account transition list for card holder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Get CDD info for a specific DDA token
 @return ApiGetCDDInfoRequest
*/
func (a *DirectDepositAccountsAPIService) GetCDDInfo(ctx context.Context, token string) ApiGetCDDInfoRequest {
	return ApiGetCDDInfoRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return CustomerDueDiligenceResponse
func (a *DirectDepositAccountsAPIService) GetCDDInfoExecute(r ApiGetCDDInfoRequest) (*CustomerDueDiligenceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomerDueDiligenceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.GetCDDInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts/{token}/cdd"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDirectDepositAccountRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	token string
}

func (r ApiGetDirectDepositAccountRequest) Execute() (*DirectDepositAccountResponse, *http.Response, error) {
	return r.ApiService.GetDirectDepositAccountExecute(r)
}

/*
GetDirectDepositAccount Get direct deposit account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Get specific direct deposit account
 @return ApiGetDirectDepositAccountRequest
*/
func (a *DirectDepositAccountsAPIService) GetDirectDepositAccount(ctx context.Context, token string) ApiGetDirectDepositAccountRequest {
	return ApiGetDirectDepositAccountRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return DirectDepositAccountResponse
func (a *DirectDepositAccountsAPIService) GetDirectDepositAccountExecute(r ApiGetDirectDepositAccountRequest) (*DirectDepositAccountResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositAccountResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.GetDirectDepositAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDirectDepositAccountTransitionRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	token string
}

func (r ApiGetDirectDepositAccountTransitionRequest) Execute() (*DirectDepositAccountTransitionResponse, *http.Response, error) {
	return r.ApiService.GetDirectDepositAccountTransitionExecute(r)
}

/*
GetDirectDepositAccountTransition Get direct deposit account transition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Get specific direct deposit account transition
 @return ApiGetDirectDepositAccountTransitionRequest
*/
func (a *DirectDepositAccountsAPIService) GetDirectDepositAccountTransition(ctx context.Context, token string) ApiGetDirectDepositAccountTransitionRequest {
	return ApiGetDirectDepositAccountTransitionRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return DirectDepositAccountTransitionResponse
func (a *DirectDepositAccountsAPIService) GetDirectDepositAccountTransitionExecute(r ApiGetDirectDepositAccountTransitionRequest) (*DirectDepositAccountTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositAccountTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.GetDirectDepositAccountTransition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts/transitions/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTransitionListRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	userToken string
	count *int32
	startIndex *int32
	sortBy *string
}

// Number of users to retrieve
func (r ApiGetTransitionListRequest) Count(count int32) ApiGetTransitionListRequest {
	r.count = &count
	return r
}

// Start index
func (r ApiGetTransitionListRequest) StartIndex(startIndex int32) ApiGetTransitionListRequest {
	r.startIndex = &startIndex
	return r
}

// Sort order
func (r ApiGetTransitionListRequest) SortBy(sortBy string) ApiGetTransitionListRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetTransitionListRequest) Execute() (*DirectDepositAccountTransitionResponse, *http.Response, error) {
	return r.ApiService.GetTransitionListExecute(r)
}

/*
GetTransitionList Get direct deposit account transition list for card holder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userToken Get direct deposit account transition list for user
 @return ApiGetTransitionListRequest
*/
func (a *DirectDepositAccountsAPIService) GetTransitionList(ctx context.Context, userToken string) ApiGetTransitionListRequest {
	return ApiGetTransitionListRequest{
		ApiService: a,
		ctx: ctx,
		userToken: userToken,
	}
}

// Execute executes the request
//  @return DirectDepositAccountTransitionResponse
func (a *DirectDepositAccountsAPIService) GetTransitionListExecute(r ApiGetTransitionListRequest) (*DirectDepositAccountTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositAccountTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.GetTransitionList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts/{user_token}/transitions"
	localVarPath = strings.Replace(localVarPath, "{"+"user_token"+"}", url.PathEscape(parameterValueToString(r.userToken, "userToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserDirectDepositAccountsRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	token string
	count *int32
	startIndex *int32
	sortBy *string
	state *string
}

// Number of users to retrieve
func (r ApiGetUserDirectDepositAccountsRequest) Count(count int32) ApiGetUserDirectDepositAccountsRequest {
	r.count = &count
	return r
}

// Start index
func (r ApiGetUserDirectDepositAccountsRequest) StartIndex(startIndex int32) ApiGetUserDirectDepositAccountsRequest {
	r.startIndex = &startIndex
	return r
}

// Sort order
func (r ApiGetUserDirectDepositAccountsRequest) SortBy(sortBy string) ApiGetUserDirectDepositAccountsRequest {
	r.sortBy = &sortBy
	return r
}

// Direct deposit account status
func (r ApiGetUserDirectDepositAccountsRequest) State(state string) ApiGetUserDirectDepositAccountsRequest {
	r.state = &state
	return r
}

func (r ApiGetUserDirectDepositAccountsRequest) Execute() (*DirectDepositAccountListResponse, *http.Response, error) {
	return r.ApiService.GetUserDirectDepositAccountsExecute(r)
}

/*
GetUserDirectDepositAccounts List all specific direct deposit accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Get specific direct deposit account
 @return ApiGetUserDirectDepositAccountsRequest
*/
func (a *DirectDepositAccountsAPIService) GetUserDirectDepositAccounts(ctx context.Context, token string) ApiGetUserDirectDepositAccountsRequest {
	return ApiGetUserDirectDepositAccountsRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return DirectDepositAccountListResponse
func (a *DirectDepositAccountsAPIService) GetUserDirectDepositAccountsExecute(r ApiGetUserDirectDepositAccountsRequest) (*DirectDepositAccountListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositAccountListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.GetUserDirectDepositAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts/user/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserForDirectDepositAccountRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	accountNumber string
}

func (r ApiGetUserForDirectDepositAccountRequest) Execute() (*DirectDepositAccountResponse, *http.Response, error) {
	return r.ApiService.GetUserForDirectDepositAccountExecute(r)
}

/*
GetUserForDirectDepositAccount Get User for Plain Text Account Number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountNumber Get user associated with direct deposit account number
 @return ApiGetUserForDirectDepositAccountRequest
*/
func (a *DirectDepositAccountsAPIService) GetUserForDirectDepositAccount(ctx context.Context, accountNumber string) ApiGetUserForDirectDepositAccountRequest {
	return ApiGetUserForDirectDepositAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountNumber: accountNumber,
	}
}

// Execute executes the request
//  @return DirectDepositAccountResponse
func (a *DirectDepositAccountsAPIService) GetUserForDirectDepositAccountExecute(r ApiGetUserForDirectDepositAccountRequest) (*DirectDepositAccountResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositAccountResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.GetUserForDirectDepositAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts/account/{account_number}/user"
	localVarPath = strings.Replace(localVarPath, "{"+"account_number"+"}", url.PathEscape(parameterValueToString(r.accountNumber, "accountNumber")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	token string
	depositAccountUpdateRequest *DepositAccountUpdateRequest
}

// Update direct deposit account
func (r ApiUpdateRequest) DepositAccountUpdateRequest(depositAccountUpdateRequest DepositAccountUpdateRequest) ApiUpdateRequest {
	r.depositAccountUpdateRequest = &depositAccountUpdateRequest
	return r
}

func (r ApiUpdateRequest) Execute() (*DirectDepositAccountResponse, *http.Response, error) {
	return r.ApiService.UpdateExecute(r)
}

/*
Update Update direct deposit account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token
 @return ApiUpdateRequest

Deprecated
*/
func (a *DirectDepositAccountsAPIService) Update(ctx context.Context, token string) ApiUpdateRequest {
	return ApiUpdateRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return DirectDepositAccountResponse
// Deprecated
func (a *DirectDepositAccountsAPIService) UpdateExecute(r ApiUpdateRequest) (*DirectDepositAccountResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositAccountResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.Update")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.depositAccountUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("depositAccountUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.depositAccountUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCDDInfoRequest struct {
	ctx context.Context
	ApiService *DirectDepositAccountsAPIService
	token string
	cddtoken string
	customerDueDiligenceUpdateResponse *CustomerDueDiligenceUpdateResponse
}

// Update CDD answers
func (r ApiUpdateCDDInfoRequest) CustomerDueDiligenceUpdateResponse(customerDueDiligenceUpdateResponse CustomerDueDiligenceUpdateResponse) ApiUpdateCDDInfoRequest {
	r.customerDueDiligenceUpdateResponse = &customerDueDiligenceUpdateResponse
	return r
}

func (r ApiUpdateCDDInfoRequest) Execute() (*CustomerDueDiligenceResponse, *http.Response, error) {
	return r.ApiService.UpdateCDDInfoExecute(r)
}

/*
UpdateCDDInfo Update CDD answers for Direct Deposit Account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token
 @param cddtoken
 @return ApiUpdateCDDInfoRequest
*/
func (a *DirectDepositAccountsAPIService) UpdateCDDInfo(ctx context.Context, token string, cddtoken string) ApiUpdateCDDInfoRequest {
	return ApiUpdateCDDInfoRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
		cddtoken: cddtoken,
	}
}

// Execute executes the request
//  @return CustomerDueDiligenceResponse
func (a *DirectDepositAccountsAPIService) UpdateCDDInfoExecute(r ApiUpdateCDDInfoRequest) (*CustomerDueDiligenceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomerDueDiligenceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositAccountsAPIService.UpdateCDDInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/depositaccounts/{token}/cdd/{cddtoken}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cddtoken"+"}", url.PathEscape(parameterValueToString(r.cddtoken, "cddtoken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customerDueDiligenceUpdateResponse == nil {
		return localVarReturnValue, nil, reportError("customerDueDiligenceUpdateResponse is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customerDueDiligenceUpdateResponse
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
