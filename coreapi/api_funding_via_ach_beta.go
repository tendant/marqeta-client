/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FundingViaACHBetaAPIService FundingViaACHBetaAPI service
type FundingViaACHBetaAPIService service

type ApiGetBanktransfersAchRequest struct {
	ctx context.Context
	ApiService *FundingViaACHBetaAPIService
	count *int32
	startIndex *int32
	userToken *string
	businessToken *string
	fundingSourceToken *string
	statuses *string
	sortBy *string
	expand *string
	fundingSourceType *string
}

// Number of resources to retrieve.
func (r ApiGetBanktransfersAchRequest) Count(count int32) ApiGetBanktransfersAchRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetBanktransfersAchRequest) StartIndex(startIndex int32) ApiGetBanktransfersAchRequest {
	r.startIndex = &startIndex
	return r
}

// Unique identifier of the user resource.
func (r ApiGetBanktransfersAchRequest) UserToken(userToken string) ApiGetBanktransfersAchRequest {
	r.userToken = &userToken
	return r
}

// Unique identifier of the business resource.
func (r ApiGetBanktransfersAchRequest) BusinessToken(businessToken string) ApiGetBanktransfersAchRequest {
	r.businessToken = &businessToken
	return r
}

// Unique identifier of the funding source.
func (r ApiGetBanktransfersAchRequest) FundingSourceToken(fundingSourceToken string) ApiGetBanktransfersAchRequest {
	r.fundingSourceToken = &fundingSourceToken
	return r
}

// Comma-delimited list of bank transfer statuses.
func (r ApiGetBanktransfersAchRequest) Statuses(statuses string) ApiGetBanktransfersAchRequest {
	r.statuses = &statuses
	return r
}

// Field on which to sort Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetBanktransfersAchRequest) SortBy(sortBy string) ApiGetBanktransfersAchRequest {
	r.sortBy = &sortBy
	return r
}

// Returns the full funding source object when &#x60;fundingsource&#x60; is passed. Otherwise, returns the funding source token.
func (r ApiGetBanktransfersAchRequest) Expand(expand string) ApiGetBanktransfersAchRequest {
	r.expand = &expand
	return r
}

// Funding source type to filter.
func (r ApiGetBanktransfersAchRequest) FundingSourceType(fundingSourceType string) ApiGetBanktransfersAchRequest {
	r.fundingSourceType = &fundingSourceType
	return r
}

func (r ApiGetBanktransfersAchRequest) Execute() (*BankTransferListResponse, *http.Response, error) {
	return r.ApiService.GetBanktransfersAchExecute(r)
}

/*
GetBanktransfersAch List ACH transfers

Retrieve a list of all ACH transfers.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBanktransfersAchRequest
*/
func (a *FundingViaACHBetaAPIService) GetBanktransfersAch(ctx context.Context) ApiGetBanktransfersAchRequest {
	return ApiGetBanktransfersAchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BankTransferListResponse
func (a *FundingViaACHBetaAPIService) GetBanktransfersAchExecute(r ApiGetBanktransfersAchRequest) (*BankTransferListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankTransferListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundingViaACHBetaAPIService.GetBanktransfersAch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/banktransfers/ach"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.userToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_token", r.userToken, "")
	}
	if r.businessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "business_token", r.businessToken, "")
	}
	if r.fundingSourceToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "funding_source_token", r.fundingSourceToken, "")
	}
	if r.statuses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", r.statuses, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "")
	}
	if r.fundingSourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "funding_source_type", r.fundingSourceType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBanktransfersAchTokenRequest struct {
	ctx context.Context
	ApiService *FundingViaACHBetaAPIService
	token string
}

func (r ApiGetBanktransfersAchTokenRequest) Execute() (*BankTransferResponseModel, *http.Response, error) {
	return r.ApiService.GetBanktransfersAchTokenExecute(r)
}

/*
GetBanktransfersAchToken Retrieve ACH transfer

Retrieve a specific ACH transfer.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the bank transfer.
 @return ApiGetBanktransfersAchTokenRequest
*/
func (a *FundingViaACHBetaAPIService) GetBanktransfersAchToken(ctx context.Context, token string) ApiGetBanktransfersAchTokenRequest {
	return ApiGetBanktransfersAchTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return BankTransferResponseModel
func (a *FundingViaACHBetaAPIService) GetBanktransfersAchTokenExecute(r ApiGetBanktransfersAchTokenRequest) (*BankTransferResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankTransferResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundingViaACHBetaAPIService.GetBanktransfersAchToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/banktransfers/ach/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBanktransfersAchTransitionsRequest struct {
	ctx context.Context
	ApiService *FundingViaACHBetaAPIService
	count *int32
	token *string
	bankTransferToken *string
	startIndex *int32
	sortBy *string
	statuses *string
}

// Number of bank transfer transitions to retrieve.
func (r ApiGetBanktransfersAchTransitionsRequest) Count(count int32) ApiGetBanktransfersAchTransitionsRequest {
	r.count = &count
	return r
}

// Unique identifier of the bank transfer transition.
func (r ApiGetBanktransfersAchTransitionsRequest) Token(token string) ApiGetBanktransfersAchTransitionsRequest {
	r.token = &token
	return r
}

// Unique identifier of the bank transfer.
func (r ApiGetBanktransfersAchTransitionsRequest) BankTransferToken(bankTransferToken string) ApiGetBanktransfersAchTransitionsRequest {
	r.bankTransferToken = &bankTransferToken
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetBanktransfersAchTransitionsRequest) StartIndex(startIndex int32) ApiGetBanktransfersAchTransitionsRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields lastModifiedTime or createdTime. Prefix the field name with a hyphen (-) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetBanktransfersAchTransitionsRequest) SortBy(sortBy string) ApiGetBanktransfersAchTransitionsRequest {
	r.sortBy = &sortBy
	return r
}

// Comma-delimited list of bank transfer states to display.
func (r ApiGetBanktransfersAchTransitionsRequest) Statuses(statuses string) ApiGetBanktransfersAchTransitionsRequest {
	r.statuses = &statuses
	return r
}

func (r ApiGetBanktransfersAchTransitionsRequest) Execute() (*BankTransferTransitionListResponse, *http.Response, error) {
	return r.ApiService.GetBanktransfersAchTransitionsExecute(r)
}

/*
GetBanktransfersAchTransitions List ACH transfer transitions

Retrieve a list of all ACH transfer transitions for a given ACH transfer.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBanktransfersAchTransitionsRequest
*/
func (a *FundingViaACHBetaAPIService) GetBanktransfersAchTransitions(ctx context.Context) ApiGetBanktransfersAchTransitionsRequest {
	return ApiGetBanktransfersAchTransitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BankTransferTransitionListResponse
func (a *FundingViaACHBetaAPIService) GetBanktransfersAchTransitionsExecute(r ApiGetBanktransfersAchTransitionsRequest) (*BankTransferTransitionListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankTransferTransitionListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundingViaACHBetaAPIService.GetBanktransfersAchTransitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/banktransfers/ach/transitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "")
	}
	if r.bankTransferToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bank_transfer_token", r.bankTransferToken, "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	if r.statuses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", r.statuses, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostBanktransfersAchRequest struct {
	ctx context.Context
	ApiService *FundingViaACHBetaAPIService
	bankTransferRequestModel *BankTransferRequestModel
}

// Create bank transfer request model
func (r ApiPostBanktransfersAchRequest) BankTransferRequestModel(bankTransferRequestModel BankTransferRequestModel) ApiPostBanktransfersAchRequest {
	r.bankTransferRequestModel = &bankTransferRequestModel
	return r
}

func (r ApiPostBanktransfersAchRequest) Execute() (*BankTransferResponseModel, *http.Response, error) {
	return r.ApiService.PostBanktransfersAchExecute(r)
}

/*
PostBanktransfersAch Create ACH transfer

Create an ACH transfer that pushes funds to an external account or pulls funds into your program funding account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostBanktransfersAchRequest
*/
func (a *FundingViaACHBetaAPIService) PostBanktransfersAch(ctx context.Context) ApiPostBanktransfersAchRequest {
	return ApiPostBanktransfersAchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BankTransferResponseModel
func (a *FundingViaACHBetaAPIService) PostBanktransfersAchExecute(r ApiPostBanktransfersAchRequest) (*BankTransferResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankTransferResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundingViaACHBetaAPIService.PostBanktransfersAch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/banktransfers/ach"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bankTransferRequestModel == nil {
		return localVarReturnValue, nil, reportError("bankTransferRequestModel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bankTransferRequestModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostBanktransfersAchTransitionsRequest struct {
	ctx context.Context
	ApiService *FundingViaACHBetaAPIService
	bankTransferTransitionRequestModel *BankTransferTransitionRequestModel
}

// Create bank transfer transition request model
func (r ApiPostBanktransfersAchTransitionsRequest) BankTransferTransitionRequestModel(bankTransferTransitionRequestModel BankTransferTransitionRequestModel) ApiPostBanktransfersAchTransitionsRequest {
	r.bankTransferTransitionRequestModel = &bankTransferTransitionRequestModel
	return r
}

func (r ApiPostBanktransfersAchTransitionsRequest) Execute() (*BankTransferTransitionResponseModel, *http.Response, error) {
	return r.ApiService.PostBanktransfersAchTransitionsExecute(r)
}

/*
PostBanktransfersAchTransitions Create ACH transfer transition

Create an ACH transfer transition that updates the `status` of an ACH transfer.

Each ACH transfer has a lifecycle of statuses, as shown in the following diagram:

[#banktransfers-1-image]
image::achtransfers1[alt='ACH transfer lifecycle', width=575]

[NOTE]
You can create ACH transfer transitions in the sandbox environment.
However, Marqeta transitions ACH transfers through their lifecycle in the production environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostBanktransfersAchTransitionsRequest
*/
func (a *FundingViaACHBetaAPIService) PostBanktransfersAchTransitions(ctx context.Context) ApiPostBanktransfersAchTransitionsRequest {
	return ApiPostBanktransfersAchTransitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BankTransferTransitionResponseModel
func (a *FundingViaACHBetaAPIService) PostBanktransfersAchTransitionsExecute(r ApiPostBanktransfersAchTransitionsRequest) (*BankTransferTransitionResponseModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankTransferTransitionResponseModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundingViaACHBetaAPIService.PostBanktransfersAchTransitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/banktransfers/ach/transitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bankTransferTransitionRequestModel == nil {
		return localVarReturnValue, nil, reportError("bankTransferTransitionRequestModel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bankTransferTransitionRequestModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
