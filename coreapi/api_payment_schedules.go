/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// PaymentSchedulesAPIService PaymentSchedulesAPI service
type PaymentSchedulesAPIService service

type ApiCreatePaymentScheduleRequest struct {
	ctx context.Context
	ApiService *PaymentSchedulesAPIService
	accountToken string
	paymentScheduleCreateReq *PaymentScheduleCreateReq
}

func (r ApiCreatePaymentScheduleRequest) PaymentScheduleCreateReq(paymentScheduleCreateReq PaymentScheduleCreateReq) ApiCreatePaymentScheduleRequest {
	r.paymentScheduleCreateReq = &paymentScheduleCreateReq
	return r
}

func (r ApiCreatePaymentScheduleRequest) Execute() (*PaymentScheduleResponse, *http.Response, error) {
	return r.ApiService.CreatePaymentScheduleExecute(r)
}

/*
CreatePaymentSchedule Create payment schedule

Create a new payment schedule, either one-time or recurring.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountToken The unique identifier of the credit account for which you want to create a payment schedule.  Send a `GET` request to `/credit/accounts` to retrieve existing credit account tokens.
 @return ApiCreatePaymentScheduleRequest
*/
func (a *PaymentSchedulesAPIService) CreatePaymentSchedule(ctx context.Context, accountToken string) ApiCreatePaymentScheduleRequest {
	return ApiCreatePaymentScheduleRequest{
		ApiService: a,
		ctx: ctx,
		accountToken: accountToken,
	}
}

// Execute executes the request
//  @return PaymentScheduleResponse
func (a *PaymentSchedulesAPIService) CreatePaymentScheduleExecute(r ApiCreatePaymentScheduleRequest) (*PaymentScheduleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentScheduleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSchedulesAPIService.CreatePaymentSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/accounts/{account_token}/paymentschedules"
	localVarPath = strings.Replace(localVarPath, "{"+"account_token"+"}", url.PathEscape(parameterValueToString(r.accountToken, "accountToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paymentScheduleCreateReq == nil {
		return localVarReturnValue, nil, reportError("paymentScheduleCreateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.paymentScheduleCreateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreatePaymentScheduleTransitionRequest struct {
	ctx context.Context
	ApiService *PaymentSchedulesAPIService
	accountToken string
	paymentScheduleToken string
	paymentScheduleTransitionCreateReq *PaymentScheduleTransitionCreateReq
}

func (r ApiCreatePaymentScheduleTransitionRequest) PaymentScheduleTransitionCreateReq(paymentScheduleTransitionCreateReq PaymentScheduleTransitionCreateReq) ApiCreatePaymentScheduleTransitionRequest {
	r.paymentScheduleTransitionCreateReq = &paymentScheduleTransitionCreateReq
	return r
}

func (r ApiCreatePaymentScheduleTransitionRequest) Execute() (*PaymentScheduleTransitionResponse, *http.Response, error) {
	return r.ApiService.CreatePaymentScheduleTransitionExecute(r)
}

/*
CreatePaymentScheduleTransition Create payment schedule transition

Transition a payment schedule to a new status.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountToken The unique identifier of the credit account on which to transition a payment schedule.  Send a `GET` request to `/credit/accounts` to retrieve existing credit account tokens.
 @param paymentScheduleToken The unique identifier of the payment schedule whose status is to transition.  Send a `GET` request to `/credit/accounts/{account_token}/paymentschedules` to retrieve existing payment schedule tokens.
 @return ApiCreatePaymentScheduleTransitionRequest
*/
func (a *PaymentSchedulesAPIService) CreatePaymentScheduleTransition(ctx context.Context, accountToken string, paymentScheduleToken string) ApiCreatePaymentScheduleTransitionRequest {
	return ApiCreatePaymentScheduleTransitionRequest{
		ApiService: a,
		ctx: ctx,
		accountToken: accountToken,
		paymentScheduleToken: paymentScheduleToken,
	}
}

// Execute executes the request
//  @return PaymentScheduleTransitionResponse
func (a *PaymentSchedulesAPIService) CreatePaymentScheduleTransitionExecute(r ApiCreatePaymentScheduleTransitionRequest) (*PaymentScheduleTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentScheduleTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSchedulesAPIService.CreatePaymentScheduleTransition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/accounts/{account_token}/paymentschedules/{payment_schedule_token}/transitions"
	localVarPath = strings.Replace(localVarPath, "{"+"account_token"+"}", url.PathEscape(parameterValueToString(r.accountToken, "accountToken")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"payment_schedule_token"+"}", url.PathEscape(parameterValueToString(r.paymentScheduleToken, "paymentScheduleToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paymentScheduleTransitionCreateReq == nil {
		return localVarReturnValue, nil, reportError("paymentScheduleTransitionCreateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.paymentScheduleTransitionCreateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrievePaymentScheduleRequest struct {
	ctx context.Context
	ApiService *PaymentSchedulesAPIService
	accountToken string
	paymentScheduleToken string
}

func (r ApiRetrievePaymentScheduleRequest) Execute() (*PaymentScheduleResponse, *http.Response, error) {
	return r.ApiService.RetrievePaymentScheduleExecute(r)
}

/*
RetrievePaymentSchedule Retrieve payment schedule

Retrieve a single payment schedule on a specific credit account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountToken The unique identifier of the credit account for which you want to retrieve a payment schedule.  Send a `GET` request to `/credit/accounts` to retrieve existing credit account tokens.
 @param paymentScheduleToken The unique identifier of the payment schedule that you want to retrieve.  Send a `GET` request to `/credit/accounts/{account_token}/paymentschedules` to retrieve existing payment schedule tokens.
 @return ApiRetrievePaymentScheduleRequest
*/
func (a *PaymentSchedulesAPIService) RetrievePaymentSchedule(ctx context.Context, accountToken string, paymentScheduleToken string) ApiRetrievePaymentScheduleRequest {
	return ApiRetrievePaymentScheduleRequest{
		ApiService: a,
		ctx: ctx,
		accountToken: accountToken,
		paymentScheduleToken: paymentScheduleToken,
	}
}

// Execute executes the request
//  @return PaymentScheduleResponse
func (a *PaymentSchedulesAPIService) RetrievePaymentScheduleExecute(r ApiRetrievePaymentScheduleRequest) (*PaymentScheduleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentScheduleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSchedulesAPIService.RetrievePaymentSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/accounts/{account_token}/paymentschedules/{payment_schedule_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_token"+"}", url.PathEscape(parameterValueToString(r.accountToken, "accountToken")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"payment_schedule_token"+"}", url.PathEscape(parameterValueToString(r.paymentScheduleToken, "paymentScheduleToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrievePaymentScheduleTransitionRequest struct {
	ctx context.Context
	ApiService *PaymentSchedulesAPIService
	accountToken string
	paymentScheduleToken string
	token string
}

func (r ApiRetrievePaymentScheduleTransitionRequest) Execute() (*PaymentScheduleTransitionResponse, *http.Response, error) {
	return r.ApiService.RetrievePaymentScheduleTransitionExecute(r)
}

/*
RetrievePaymentScheduleTransition Retrieve payment schedule transition

Retrieve a single payment schedule transition on a specific credit account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountToken The unique identifier of the credit account for which you want to retrieve a payment schedule transition.  Send a `GET` request to `/credit/accounts` to retrieve existing credit account tokens.
 @param paymentScheduleToken The unique identifier of the payment schedule you want to retrieve.  Send a `GET` request to `/credit/accounts/{account_token}/paymentschedules` to retrieve existing payment schedule tokens.
 @param token The unique identifier of the payment schedule transition you want to retrieve.  Send a `GET` request to `/credit/accounts/{account_token}/paymentschedules/{payment_schedule_token}/transitions` to retrieve existing payment schedule transition tokens.
 @return ApiRetrievePaymentScheduleTransitionRequest
*/
func (a *PaymentSchedulesAPIService) RetrievePaymentScheduleTransition(ctx context.Context, accountToken string, paymentScheduleToken string, token string) ApiRetrievePaymentScheduleTransitionRequest {
	return ApiRetrievePaymentScheduleTransitionRequest{
		ApiService: a,
		ctx: ctx,
		accountToken: accountToken,
		paymentScheduleToken: paymentScheduleToken,
		token: token,
	}
}

// Execute executes the request
//  @return PaymentScheduleTransitionResponse
func (a *PaymentSchedulesAPIService) RetrievePaymentScheduleTransitionExecute(r ApiRetrievePaymentScheduleTransitionRequest) (*PaymentScheduleTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentScheduleTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSchedulesAPIService.RetrievePaymentScheduleTransition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/accounts/{account_token}/paymentschedules/{payment_schedule_token}/transitions/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_token"+"}", url.PathEscape(parameterValueToString(r.accountToken, "accountToken")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"payment_schedule_token"+"}", url.PathEscape(parameterValueToString(r.paymentScheduleToken, "paymentScheduleToken")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrievePaymentScheduleTransitionsRequest struct {
	ctx context.Context
	ApiService *PaymentSchedulesAPIService
	accountToken string
	paymentScheduleToken string
	count *int32
	startIndex *int32
	sortBy *string
}

// The number of resources to retrieve.
func (r ApiRetrievePaymentScheduleTransitionsRequest) Count(count int32) ApiRetrievePaymentScheduleTransitionsRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiRetrievePaymentScheduleTransitionsRequest) StartIndex(startIndex int32) ApiRetrievePaymentScheduleTransitionsRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;.
func (r ApiRetrievePaymentScheduleTransitionsRequest) SortBy(sortBy string) ApiRetrievePaymentScheduleTransitionsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiRetrievePaymentScheduleTransitionsRequest) Execute() (*PaymentScheduleTransitionPage, *http.Response, error) {
	return r.ApiService.RetrievePaymentScheduleTransitionsExecute(r)
}

/*
RetrievePaymentScheduleTransitions Retrieve payment schedule transitions

Retrieve an array of payment schedule transitions on a specific credit account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountToken The unique identifier of the credit account for which you want to retrieve payment schedule transitions.  Send a `GET` request to `/credit/accounts` to retrieve existing credit account tokens.
 @param paymentScheduleToken The unique identifier of the payment schedule for which you want to retrieve transitions.  Send a `GET` request to `/credit/accounts/{account_token}/paymentschedules` to retrieve existing payment schedule tokens.
 @return ApiRetrievePaymentScheduleTransitionsRequest
*/
func (a *PaymentSchedulesAPIService) RetrievePaymentScheduleTransitions(ctx context.Context, accountToken string, paymentScheduleToken string) ApiRetrievePaymentScheduleTransitionsRequest {
	return ApiRetrievePaymentScheduleTransitionsRequest{
		ApiService: a,
		ctx: ctx,
		accountToken: accountToken,
		paymentScheduleToken: paymentScheduleToken,
	}
}

// Execute executes the request
//  @return PaymentScheduleTransitionPage
func (a *PaymentSchedulesAPIService) RetrievePaymentScheduleTransitionsExecute(r ApiRetrievePaymentScheduleTransitionsRequest) (*PaymentScheduleTransitionPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentScheduleTransitionPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSchedulesAPIService.RetrievePaymentScheduleTransitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/accounts/{account_token}/paymentschedules/{payment_schedule_token}/transitions"
	localVarPath = strings.Replace(localVarPath, "{"+"account_token"+"}", url.PathEscape(parameterValueToString(r.accountToken, "accountToken")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"payment_schedule_token"+"}", url.PathEscape(parameterValueToString(r.paymentScheduleToken, "paymentScheduleToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrievePaymentSchedulesRequest struct {
	ctx context.Context
	ApiService *PaymentSchedulesAPIService
	accountToken string
	statuses *[]PaymentScheduleStatus
	frequency *[]PaymentScheduleFrequency
	count *int32
	startIndex *int32
	sortBy *string
}

// Status of the payment schedules to retrieve.
func (r ApiRetrievePaymentSchedulesRequest) Statuses(statuses []PaymentScheduleStatus) ApiRetrievePaymentSchedulesRequest {
	r.statuses = &statuses
	return r
}

// Frequency of the payment schedules to retrieve.
func (r ApiRetrievePaymentSchedulesRequest) Frequency(frequency []PaymentScheduleFrequency) ApiRetrievePaymentSchedulesRequest {
	r.frequency = &frequency
	return r
}

// The number of resources to retrieve.
func (r ApiRetrievePaymentSchedulesRequest) Count(count int32) ApiRetrievePaymentSchedulesRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiRetrievePaymentSchedulesRequest) StartIndex(startIndex int32) ApiRetrievePaymentSchedulesRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;.
func (r ApiRetrievePaymentSchedulesRequest) SortBy(sortBy string) ApiRetrievePaymentSchedulesRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiRetrievePaymentSchedulesRequest) Execute() (*PaymentSchedulePage, *http.Response, error) {
	return r.ApiService.RetrievePaymentSchedulesExecute(r)
}

/*
RetrievePaymentSchedules List payment schedules

Retrieve an array of payment schedules on a specific credit account.

This endpoint supports <</core-api/sorting-and-pagination, sorting and pagination>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountToken The unique identifier of the credit account for which you want to retrieve payment schedules.  Send a `GET` request to `/credit/accounts` to retrieve existing credit account tokens.
 @return ApiRetrievePaymentSchedulesRequest
*/
func (a *PaymentSchedulesAPIService) RetrievePaymentSchedules(ctx context.Context, accountToken string) ApiRetrievePaymentSchedulesRequest {
	return ApiRetrievePaymentSchedulesRequest{
		ApiService: a,
		ctx: ctx,
		accountToken: accountToken,
	}
}

// Execute executes the request
//  @return PaymentSchedulePage
func (a *PaymentSchedulesAPIService) RetrievePaymentSchedulesExecute(r ApiRetrievePaymentSchedulesRequest) (*PaymentSchedulePage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentSchedulePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSchedulesAPIService.RetrievePaymentSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit/accounts/{account_token}/paymentschedules"
	localVarPath = strings.Replace(localVarPath, "{"+"account_token"+"}", url.PathEscape(parameterValueToString(r.accountToken, "accountToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.statuses != nil {
		t := *r.statuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", t, "multi")
		}
	}
	if r.frequency != nil {
		t := *r.frequency
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "frequency", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "frequency", t, "multi")
		}
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
