/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProgramTransfersAPIService ProgramTransfersAPI service
type ProgramTransfersAPIService service

type ApiGetProgramtransfersRequest struct {
	ctx context.Context
	ApiService *ProgramTransfersAPIService
	count *int32
	startIndex *int32
	fields *string
	sortBy *string
	userToken *string
	businessToken *string
	typeToken *string
}

// Number of program transfers to retrieve.
func (r ApiGetProgramtransfersRequest) Count(count int32) ApiGetProgramtransfersRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetProgramtransfersRequest) StartIndex(startIndex int32) ApiGetProgramtransfersRequest {
	r.startIndex = &startIndex
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetProgramtransfersRequest) Fields(fields string) ApiGetProgramtransfersRequest {
	r.fields = &fields
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetProgramtransfersRequest) SortBy(sortBy string) ApiGetProgramtransfersRequest {
	r.sortBy = &sortBy
	return r
}

// Unique identifier of the user account holder whose program transfers you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens.
func (r ApiGetProgramtransfersRequest) UserToken(userToken string) ApiGetProgramtransfersRequest {
	r.userToken = &userToken
	return r
}

// Unique identifier of the business account holder whose program transfers you want to retrieve.  Send a &#x60;GET&#x60; request to &#x60;/businesses&#x60; to retrieve business tokens.
func (r ApiGetProgramtransfersRequest) BusinessToken(businessToken string) ApiGetProgramtransfersRequest {
	r.businessToken = &businessToken
	return r
}

// Unique identifier of the program transfer type to retrieve.
func (r ApiGetProgramtransfersRequest) TypeToken(typeToken string) ApiGetProgramtransfersRequest {
	r.typeToken = &typeToken
	return r
}

func (r ApiGetProgramtransfersRequest) Execute() (*ProgramTransferListResponse, *http.Response, error) {
	return r.ApiService.GetProgramtransfersExecute(r)
}

/*
GetProgramtransfers List program transfers

Use this endpoint to list all program transfers.

To narrow your result set to program transfers of a particular type or that are associated with a particular account holder, include the appropriate parameters from the following URL Query Parameters table.
This endpoint also supports <</core-api/field-filtering, field filtering>>, <</core-api/sorting-and-pagination, pagination>>, and <</core-api/sorting-and-pagination, sorting>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProgramtransfersRequest
*/
func (a *ProgramTransfersAPIService) GetProgramtransfers(ctx context.Context) ApiGetProgramtransfersRequest {
	return ApiGetProgramtransfersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProgramTransferListResponse
func (a *ProgramTransfersAPIService) GetProgramtransfersExecute(r ApiGetProgramtransfersRequest) (*ProgramTransferListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProgramTransferListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramTransfersAPIService.GetProgramtransfers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/programtransfers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	if r.userToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_token", r.userToken, "")
	}
	if r.businessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "business_token", r.businessToken, "")
	}
	if r.typeToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_token", r.typeToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProgramtransfersTokenRequest struct {
	ctx context.Context
	ApiService *ProgramTransfersAPIService
	token string
}

func (r ApiGetProgramtransfersTokenRequest) Execute() (*ProgramTransferResponse, *http.Response, error) {
	return r.ApiService.GetProgramtransfersTokenExecute(r)
}

/*
GetProgramtransfersToken Retrieve program transfer

Use this endpoint to retrieve a specific program transfer.
Include the program transfer `token` path parameter to specify the program transfer to retrieve.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the program transfer.
 @return ApiGetProgramtransfersTokenRequest
*/
func (a *ProgramTransfersAPIService) GetProgramtransfersToken(ctx context.Context, token string) ApiGetProgramtransfersTokenRequest {
	return ApiGetProgramtransfersTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return ProgramTransferResponse
func (a *ProgramTransfersAPIService) GetProgramtransfersTokenExecute(r ApiGetProgramtransfersTokenRequest) (*ProgramTransferResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProgramTransferResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramTransfersAPIService.GetProgramtransfersToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/programtransfers/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProgramtransfersTypesRequest struct {
	ctx context.Context
	ApiService *ProgramTransfersAPIService
	count *int32
	startIndex *int32
	fields *string
	sortBy *string
}

// Number of program transfer types to retrieve.
func (r ApiGetProgramtransfersTypesRequest) Count(count int32) ApiGetProgramtransfersTypesRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetProgramtransfersTypesRequest) StartIndex(startIndex int32) ApiGetProgramtransfersTypesRequest {
	r.startIndex = &startIndex
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetProgramtransfersTypesRequest) Fields(fields string) ApiGetProgramtransfersTypesRequest {
	r.fields = &fields
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetProgramtransfersTypesRequest) SortBy(sortBy string) ApiGetProgramtransfersTypesRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetProgramtransfersTypesRequest) Execute() (*ProgramTransferTypeListResponse, *http.Response, error) {
	return r.ApiService.GetProgramtransfersTypesExecute(r)
}

/*
GetProgramtransfersTypes List program transfer types

Use this endpoint to list all program transfer types.

This endpoint supports <</core-api/field-filtering, field filtering>>, <</core-api/sorting-and-pagination, pagination>>, and <</core-api/sorting-and-pagination, sorting>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProgramtransfersTypesRequest
*/
func (a *ProgramTransfersAPIService) GetProgramtransfersTypes(ctx context.Context) ApiGetProgramtransfersTypesRequest {
	return ApiGetProgramtransfersTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProgramTransferTypeListResponse
func (a *ProgramTransfersAPIService) GetProgramtransfersTypesExecute(r ApiGetProgramtransfersTypesRequest) (*ProgramTransferTypeListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProgramTransferTypeListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramTransfersAPIService.GetProgramtransfersTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/programtransfers/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProgramtransfersTypesTypetokenRequest struct {
	ctx context.Context
	ApiService *ProgramTransfersAPIService
	typeToken string
}

func (r ApiGetProgramtransfersTypesTypetokenRequest) Execute() (*ProgramTransferTypeResponse, *http.Response, error) {
	return r.ApiService.GetProgramtransfersTypesTypetokenExecute(r)
}

/*
GetProgramtransfersTypesTypetoken Retrieve program transfer type

Use this endpoint to retrieve a specific program transfer.
Include the `type_token` path parameter to indicate the program transfer type to return.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param typeToken Unique identifier of the program transfer type.
 @return ApiGetProgramtransfersTypesTypetokenRequest
*/
func (a *ProgramTransfersAPIService) GetProgramtransfersTypesTypetoken(ctx context.Context, typeToken string) ApiGetProgramtransfersTypesTypetokenRequest {
	return ApiGetProgramtransfersTypesTypetokenRequest{
		ApiService: a,
		ctx: ctx,
		typeToken: typeToken,
	}
}

// Execute executes the request
//  @return ProgramTransferTypeResponse
func (a *ProgramTransfersAPIService) GetProgramtransfersTypesTypetokenExecute(r ApiGetProgramtransfersTypesTypetokenRequest) (*ProgramTransferTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProgramTransferTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramTransfersAPIService.GetProgramtransfersTypesTypetoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/programtransfers/types/{type_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"type_token"+"}", url.PathEscape(parameterValueToString(r.typeToken, "typeToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProgramtransfersRequest struct {
	ctx context.Context
	ApiService *ProgramTransfersAPIService
	programTransfer *ProgramTransfer
}

func (r ApiPostProgramtransfersRequest) ProgramTransfer(programTransfer ProgramTransfer) ApiPostProgramtransfersRequest {
	r.programTransfer = &programTransfer
	return r
}

func (r ApiPostProgramtransfersRequest) Execute() (*ProgramTransferResponse, *http.Response, error) {
	return r.ApiService.PostProgramtransfersExecute(r)
}

/*
PostProgramtransfers Create program transfer

Use this endpoint to create a program transfer.
Add the program transfer details to the body of the request in link:http://www.json.org/[JSON, window="_blank"] format.

Include either `user_token` or `business_token` in the message body to specify the account holder whose general purpose account (GPA) will be debited by the program transfer.
The user or business must already exist.

[NOTE]
If the GPA has insufficient funds to cover both the amount of the program transfer and all attached fees, then no funds are transferred.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProgramtransfersRequest
*/
func (a *ProgramTransfersAPIService) PostProgramtransfers(ctx context.Context) ApiPostProgramtransfersRequest {
	return ApiPostProgramtransfersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProgramTransferResponse
func (a *ProgramTransfersAPIService) PostProgramtransfersExecute(r ApiPostProgramtransfersRequest) (*ProgramTransferResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProgramTransferResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramTransfersAPIService.PostProgramtransfers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/programtransfers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.programTransfer
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProgramtransfersTypesRequest struct {
	ctx context.Context
	ApiService *ProgramTransfersAPIService
	programTransferTypeRequest *ProgramTransferTypeRequest
}

func (r ApiPostProgramtransfersTypesRequest) ProgramTransferTypeRequest(programTransferTypeRequest ProgramTransferTypeRequest) ApiPostProgramtransfersTypesRequest {
	r.programTransferTypeRequest = &programTransferTypeRequest
	return r
}

func (r ApiPostProgramtransfersTypesRequest) Execute() (*ProgramTransferTypeResponse, *http.Response, error) {
	return r.ApiService.PostProgramtransfersTypesExecute(r)
}

/*
PostProgramtransfersTypes Create program transfer type

Use this endpoint to create a program transfer type.
Add the program transfer details to the body of the request in link:http://www.json.org/[JSON, window="_blank"] format.

You are required to pass in a `program_funding_source_token` to associate a program funding source with the program transfer type.
You must therefore create a program funding source before creating a program transfer type.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProgramtransfersTypesRequest
*/
func (a *ProgramTransfersAPIService) PostProgramtransfersTypes(ctx context.Context) ApiPostProgramtransfersTypesRequest {
	return ApiPostProgramtransfersTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProgramTransferTypeResponse
func (a *ProgramTransfersAPIService) PostProgramtransfersTypesExecute(r ApiPostProgramtransfersTypesRequest) (*ProgramTransferTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProgramTransferTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramTransfersAPIService.PostProgramtransfersTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/programtransfers/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.programTransferTypeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProgramtransfersTypesTypetokenRequest struct {
	ctx context.Context
	ApiService *ProgramTransfersAPIService
	typeToken string
	programTransferTypeRequest *ProgramTransferTypeRequest
}

func (r ApiPutProgramtransfersTypesTypetokenRequest) ProgramTransferTypeRequest(programTransferTypeRequest ProgramTransferTypeRequest) ApiPutProgramtransfersTypesTypetokenRequest {
	r.programTransferTypeRequest = &programTransferTypeRequest
	return r
}

func (r ApiPutProgramtransfersTypesTypetokenRequest) Execute() (*ProgramTransferTypeResponse, *http.Response, error) {
	return r.ApiService.PutProgramtransfersTypesTypetokenExecute(r)
}

/*
PutProgramtransfersTypesTypetoken Update program transfer type

Use this endpoint to update a program transfer type.
Include the `type_token` path parameter to indicate the program transfer type to update.
Add the modified detail parameters to the body of the request in link:http://www.json.org/[JSON, window="_blank"] format.
Only values of parameters in the request are modified; all others are left unchanged.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param typeToken Unique identifier of the program transfer type.
 @return ApiPutProgramtransfersTypesTypetokenRequest
*/
func (a *ProgramTransfersAPIService) PutProgramtransfersTypesTypetoken(ctx context.Context, typeToken string) ApiPutProgramtransfersTypesTypetokenRequest {
	return ApiPutProgramtransfersTypesTypetokenRequest{
		ApiService: a,
		ctx: ctx,
		typeToken: typeToken,
	}
}

// Execute executes the request
//  @return ProgramTransferTypeResponse
func (a *ProgramTransfersAPIService) PutProgramtransfersTypesTypetokenExecute(r ApiPutProgramtransfersTypesTypetokenRequest) (*ProgramTransferTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProgramTransferTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramTransfersAPIService.PutProgramtransfersTypesTypetoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/programtransfers/types/{type_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"type_token"+"}", url.PathEscape(parameterValueToString(r.typeToken, "typeToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.programTransferTypeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
