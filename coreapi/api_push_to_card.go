/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PushToCardAPIService PushToCardAPI service
type PushToCardAPIService service

type ApiGetPushtocardsDisburseRequest struct {
	ctx context.Context
	ApiService *PushToCardAPIService
	count *int32
	fields *string
	startIndex *int32
	sortBy *string
}

// Number of push-to-card disbursements to retrieve
func (r ApiGetPushtocardsDisburseRequest) Count(count int32) ApiGetPushtocardsDisburseRequest {
	r.count = &count
	return r
}

// Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
func (r ApiGetPushtocardsDisburseRequest) Fields(fields string) ApiGetPushtocardsDisburseRequest {
	r.fields = &fields
	return r
}

// Start index
func (r ApiGetPushtocardsDisburseRequest) StartIndex(startIndex int32) ApiGetPushtocardsDisburseRequest {
	r.startIndex = &startIndex
	return r
}

// Sort order
func (r ApiGetPushtocardsDisburseRequest) SortBy(sortBy string) ApiGetPushtocardsDisburseRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetPushtocardsDisburseRequest) Execute() (*PushToCardDisburseListResponse, *http.Response, error) {
	return r.ApiService.GetPushtocardsDisburseExecute(r)
}

/*
GetPushtocardsDisburse Lists all push-to-card disbursements

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPushtocardsDisburseRequest
*/
func (a *PushToCardAPIService) GetPushtocardsDisburse(ctx context.Context) ApiGetPushtocardsDisburseRequest {
	return ApiGetPushtocardsDisburseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PushToCardDisburseListResponse
func (a *PushToCardAPIService) GetPushtocardsDisburseExecute(r ApiGetPushtocardsDisburseRequest) (*PushToCardDisburseListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PushToCardDisburseListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PushToCardAPIService.GetPushtocardsDisburse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pushtocards/disburse"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPushtocardsDisburseTokenRequest struct {
	ctx context.Context
	ApiService *PushToCardAPIService
	token string
	fields *string
}

// Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
func (r ApiGetPushtocardsDisburseTokenRequest) Fields(fields string) ApiGetPushtocardsDisburseTokenRequest {
	r.fields = &fields
	return r
}

func (r ApiGetPushtocardsDisburseTokenRequest) Execute() (*PushToCardDisbursementResponse, *http.Response, error) {
	return r.ApiService.GetPushtocardsDisburseTokenExecute(r)
}

/*
GetPushtocardsDisburseToken Returns a specific push-to-card disbursement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Push-to-card disbursement token
 @return ApiGetPushtocardsDisburseTokenRequest
*/
func (a *PushToCardAPIService) GetPushtocardsDisburseToken(ctx context.Context, token string) ApiGetPushtocardsDisburseTokenRequest {
	return ApiGetPushtocardsDisburseTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return PushToCardDisbursementResponse
func (a *PushToCardAPIService) GetPushtocardsDisburseTokenExecute(r ApiGetPushtocardsDisburseTokenRequest) (*PushToCardDisbursementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PushToCardDisbursementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PushToCardAPIService.GetPushtocardsDisburseToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pushtocards/disburse/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPushtocardsPaymentcardRequest struct {
	ctx context.Context
	ApiService *PushToCardAPIService
	userToken *string
	count *int32
	fields *string
	startIndex *int32
	sortBy *string
}

// User token
func (r ApiGetPushtocardsPaymentcardRequest) UserToken(userToken string) ApiGetPushtocardsPaymentcardRequest {
	r.userToken = &userToken
	return r
}

// Number of push-to-card payment cards to retrieve
func (r ApiGetPushtocardsPaymentcardRequest) Count(count int32) ApiGetPushtocardsPaymentcardRequest {
	r.count = &count
	return r
}

// Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
func (r ApiGetPushtocardsPaymentcardRequest) Fields(fields string) ApiGetPushtocardsPaymentcardRequest {
	r.fields = &fields
	return r
}

// Start index
func (r ApiGetPushtocardsPaymentcardRequest) StartIndex(startIndex int32) ApiGetPushtocardsPaymentcardRequest {
	r.startIndex = &startIndex
	return r
}

// Sort order
func (r ApiGetPushtocardsPaymentcardRequest) SortBy(sortBy string) ApiGetPushtocardsPaymentcardRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetPushtocardsPaymentcardRequest) Execute() (*PushToCardListResponse, *http.Response, error) {
	return r.ApiService.GetPushtocardsPaymentcardExecute(r)
}

/*
GetPushtocardsPaymentcard Returns all push-to-card payment card details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPushtocardsPaymentcardRequest
*/
func (a *PushToCardAPIService) GetPushtocardsPaymentcard(ctx context.Context) ApiGetPushtocardsPaymentcardRequest {
	return ApiGetPushtocardsPaymentcardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PushToCardListResponse
func (a *PushToCardAPIService) GetPushtocardsPaymentcardExecute(r ApiGetPushtocardsPaymentcardRequest) (*PushToCardListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PushToCardListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PushToCardAPIService.GetPushtocardsPaymentcard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pushtocards/paymentcard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userToken == nil {
		return localVarReturnValue, nil, reportError("userToken is required and must be specified")
	}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "user_token", r.userToken, "")
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPushtocardsPaymentcardTokenRequest struct {
	ctx context.Context
	ApiService *PushToCardAPIService
	token string
	fields *string
}

// Comma-delimited list of fields to return (e.g. field_1,field_2,..). Leave blank to return all fields.
func (r ApiGetPushtocardsPaymentcardTokenRequest) Fields(fields string) ApiGetPushtocardsPaymentcardTokenRequest {
	r.fields = &fields
	return r
}

func (r ApiGetPushtocardsPaymentcardTokenRequest) Execute() (*PushToCardResponse, *http.Response, error) {
	return r.ApiService.GetPushtocardsPaymentcardTokenExecute(r)
}

/*
GetPushtocardsPaymentcardToken Returns a specific paymentcard object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Push-to-card token
 @return ApiGetPushtocardsPaymentcardTokenRequest
*/
func (a *PushToCardAPIService) GetPushtocardsPaymentcardToken(ctx context.Context, token string) ApiGetPushtocardsPaymentcardTokenRequest {
	return ApiGetPushtocardsPaymentcardTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return PushToCardResponse
func (a *PushToCardAPIService) GetPushtocardsPaymentcardTokenExecute(r ApiGetPushtocardsPaymentcardTokenRequest) (*PushToCardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PushToCardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PushToCardAPIService.GetPushtocardsPaymentcardToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pushtocards/paymentcard/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostPushtocardsDisburseRequest struct {
	ctx context.Context
	ApiService *PushToCardAPIService
	pushToCardDisburseRequest *PushToCardDisburseRequest
}

func (r ApiPostPushtocardsDisburseRequest) PushToCardDisburseRequest(pushToCardDisburseRequest PushToCardDisburseRequest) ApiPostPushtocardsDisburseRequest {
	r.pushToCardDisburseRequest = &pushToCardDisburseRequest
	return r
}

func (r ApiPostPushtocardsDisburseRequest) Execute() (*PushToCardDisbursementResponse, *http.Response, error) {
	return r.ApiService.PostPushtocardsDisburseExecute(r)
}

/*
PostPushtocardsDisburse Initiates a push-to-card money disbursement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostPushtocardsDisburseRequest
*/
func (a *PushToCardAPIService) PostPushtocardsDisburse(ctx context.Context) ApiPostPushtocardsDisburseRequest {
	return ApiPostPushtocardsDisburseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PushToCardDisbursementResponse
func (a *PushToCardAPIService) PostPushtocardsDisburseExecute(r ApiPostPushtocardsDisburseRequest) (*PushToCardDisbursementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PushToCardDisbursementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PushToCardAPIService.PostPushtocardsDisburse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pushtocards/disburse"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.pushToCardDisburseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostPushtocardsPaymentcardRequest struct {
	ctx context.Context
	ApiService *PushToCardAPIService
	pushToCardRequest *PushToCardRequest
}

func (r ApiPostPushtocardsPaymentcardRequest) PushToCardRequest(pushToCardRequest PushToCardRequest) ApiPostPushtocardsPaymentcardRequest {
	r.pushToCardRequest = &pushToCardRequest
	return r
}

func (r ApiPostPushtocardsPaymentcardRequest) Execute() (*PushToCardResponse, *http.Response, error) {
	return r.ApiService.PostPushtocardsPaymentcardExecute(r)
}

/*
PostPushtocardsPaymentcard Adds an external card to which funds will be pushed

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostPushtocardsPaymentcardRequest
*/
func (a *PushToCardAPIService) PostPushtocardsPaymentcard(ctx context.Context) ApiPostPushtocardsPaymentcardRequest {
	return ApiPostPushtocardsPaymentcardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PushToCardResponse
func (a *PushToCardAPIService) PostPushtocardsPaymentcardExecute(r ApiPostPushtocardsPaymentcardRequest) (*PushToCardResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PushToCardResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PushToCardAPIService.PostPushtocardsPaymentcard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pushtocards/paymentcard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.pushToCardRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
