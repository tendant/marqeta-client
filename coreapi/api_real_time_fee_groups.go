/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RealTimeFeeGroupsAPIService RealTimeFeeGroupsAPI service
type RealTimeFeeGroupsAPIService service

type ApiGetRealtimefeegroupsRequest struct {
	ctx context.Context
	ApiService *RealTimeFeeGroupsAPIService
	count *int32
	startIndex *int32
	fields *string
	sortBy *string
}

// Number of real-time fee groups to retrieve.
func (r ApiGetRealtimefeegroupsRequest) Count(count int32) ApiGetRealtimefeegroupsRequest {
	r.count = &count
	return r
}

// The sort order index of the first resource in the returned array.
func (r ApiGetRealtimefeegroupsRequest) StartIndex(startIndex int32) ApiGetRealtimefeegroupsRequest {
	r.startIndex = &startIndex
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on).  Leave blank to return all fields.
func (r ApiGetRealtimefeegroupsRequest) Fields(fields string) ApiGetRealtimefeegroupsRequest {
	r.fields = &fields
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetRealtimefeegroupsRequest) SortBy(sortBy string) ApiGetRealtimefeegroupsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetRealtimefeegroupsRequest) Execute() (*RealTimeFeeGroupListResponse, *http.Response, error) {
	return r.ApiService.GetRealtimefeegroupsExecute(r)
}

/*
GetRealtimefeegroups List real-time fee groups

Use this endpoint to list existing real-time fee groups.

This endpoint supports <</core-api/field-filtering, field filtering>> and <</core-api/sorting-and-pagination, pagination>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRealtimefeegroupsRequest
*/
func (a *RealTimeFeeGroupsAPIService) GetRealtimefeegroups(ctx context.Context) ApiGetRealtimefeegroupsRequest {
	return ApiGetRealtimefeegroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RealTimeFeeGroupListResponse
func (a *RealTimeFeeGroupsAPIService) GetRealtimefeegroupsExecute(r ApiGetRealtimefeegroupsRequest) (*RealTimeFeeGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RealTimeFeeGroupListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeFeeGroupsAPIService.GetRealtimefeegroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/realtimefeegroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRealtimefeegroupsTokenRequest struct {
	ctx context.Context
	ApiService *RealTimeFeeGroupsAPIService
	token string
}

func (r ApiGetRealtimefeegroupsTokenRequest) Execute() (*RealTimeFeeGroup, *http.Response, error) {
	return r.ApiService.GetRealtimefeegroupsTokenExecute(r)
}

/*
GetRealtimefeegroupsToken Retrieve real-time fee group

Use this endpoint to retrieve a specific real-time fee group.
Include the real-time fee group `token` path parameter to specify the real-time fee group to return.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the real-time fee group.
 @return ApiGetRealtimefeegroupsTokenRequest
*/
func (a *RealTimeFeeGroupsAPIService) GetRealtimefeegroupsToken(ctx context.Context, token string) ApiGetRealtimefeegroupsTokenRequest {
	return ApiGetRealtimefeegroupsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RealTimeFeeGroup
func (a *RealTimeFeeGroupsAPIService) GetRealtimefeegroupsTokenExecute(r ApiGetRealtimefeegroupsTokenRequest) (*RealTimeFeeGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RealTimeFeeGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeFeeGroupsAPIService.GetRealtimefeegroupsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/realtimefeegroups/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRealtimefeegroupsRequest struct {
	ctx context.Context
	ApiService *RealTimeFeeGroupsAPIService
	realTimeFeeGroupCreateRequest *RealTimeFeeGroupCreateRequest
}

func (r ApiPostRealtimefeegroupsRequest) RealTimeFeeGroupCreateRequest(realTimeFeeGroupCreateRequest RealTimeFeeGroupCreateRequest) ApiPostRealtimefeegroupsRequest {
	r.realTimeFeeGroupCreateRequest = &realTimeFeeGroupCreateRequest
	return r
}

func (r ApiPostRealtimefeegroupsRequest) Execute() (*RealTimeFeeGroup, *http.Response, error) {
	return r.ApiService.PostRealtimefeegroupsExecute(r)
}

/*
PostRealtimefeegroups Create real-time fee group

Use this endpoint to create a real-time fee group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostRealtimefeegroupsRequest
*/
func (a *RealTimeFeeGroupsAPIService) PostRealtimefeegroups(ctx context.Context) ApiPostRealtimefeegroupsRequest {
	return ApiPostRealtimefeegroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RealTimeFeeGroup
func (a *RealTimeFeeGroupsAPIService) PostRealtimefeegroupsExecute(r ApiPostRealtimefeegroupsRequest) (*RealTimeFeeGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RealTimeFeeGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeFeeGroupsAPIService.PostRealtimefeegroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/realtimefeegroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.realTimeFeeGroupCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutRealtimefeegroupsTokenRequest struct {
	ctx context.Context
	ApiService *RealTimeFeeGroupsAPIService
	token string
	realTimeFeeGroupRequest *RealTimeFeeGroupRequest
}

func (r ApiPutRealtimefeegroupsTokenRequest) RealTimeFeeGroupRequest(realTimeFeeGroupRequest RealTimeFeeGroupRequest) ApiPutRealtimefeegroupsTokenRequest {
	r.realTimeFeeGroupRequest = &realTimeFeeGroupRequest
	return r
}

func (r ApiPutRealtimefeegroupsTokenRequest) Execute() (*RealTimeFeeGroup, *http.Response, error) {
	return r.ApiService.PutRealtimefeegroupsTokenExecute(r)
}

/*
PutRealtimefeegroupsToken Update real-time fee group

Use this endpoint to update a real-time fee group.
Include the real-time fee group `token` path parameter to specify the real-time fee group to update.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the real-time fee group.
 @return ApiPutRealtimefeegroupsTokenRequest
*/
func (a *RealTimeFeeGroupsAPIService) PutRealtimefeegroupsToken(ctx context.Context, token string) ApiPutRealtimefeegroupsTokenRequest {
	return ApiPutRealtimefeegroupsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RealTimeFeeGroup
func (a *RealTimeFeeGroupsAPIService) PutRealtimefeegroupsTokenExecute(r ApiPutRealtimefeegroupsTokenRequest) (*RealTimeFeeGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RealTimeFeeGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RealTimeFeeGroupsAPIService.PutRealtimefeegroupsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/realtimefeegroups/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.realTimeFeeGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
