/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SimulationsDirectDepositsAPIService SimulationsDirectDepositsAPI service
type SimulationsDirectDepositsAPIService service

type ApiDirectDepositsCreditEventRequest struct {
	ctx context.Context
	ApiService *SimulationsDirectDepositsAPIService
	directDepositSimulationRequest *DirectDepositSimulationRequest
}

func (r ApiDirectDepositsCreditEventRequest) DirectDepositSimulationRequest(directDepositSimulationRequest DirectDepositSimulationRequest) ApiDirectDepositsCreditEventRequest {
	r.directDepositSimulationRequest = &directDepositSimulationRequest
	return r
}

func (r ApiDirectDepositsCreditEventRequest) Execute() (*DirectDepositSimulationResponse, *http.Response, error) {
	return r.ApiService.DirectDepositsCreditEventExecute(r)
}

/*
DirectDepositsCreditEvent Simulate credit

Use this endpoint to simulate crediting funds to a deposit account.
Simulate a direct deposit of funds to a user account by including the deposit account number of the account to be credited.
You can find the account number in the `account_number` field of the response when you create a new deposit account.
Alternatively, you can retrieve it by sending a `GET` request to the `/depositaccounts/user/{user_token}` endpoint.
For more information, see <</core-api/direct-deposits, Direct Deposit>>.
See the full request body structure at <</core-api/simulations-direct-deposits#SimulationRequestBody, Request body>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDirectDepositsCreditEventRequest
*/
func (a *SimulationsDirectDepositsAPIService) DirectDepositsCreditEvent(ctx context.Context) ApiDirectDepositsCreditEventRequest {
	return ApiDirectDepositsCreditEventRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DirectDepositSimulationResponse
func (a *SimulationsDirectDepositsAPIService) DirectDepositsCreditEventExecute(r ApiDirectDepositsCreditEventRequest) (*DirectDepositSimulationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositSimulationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SimulationsDirectDepositsAPIService.DirectDepositsCreditEvent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/simulations/directdeposits/credit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.directDepositSimulationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDirectDepositsDebitEventRequest struct {
	ctx context.Context
	ApiService *SimulationsDirectDepositsAPIService
	directDepositSimulationRequest *DirectDepositSimulationRequest
}

func (r ApiDirectDepositsDebitEventRequest) DirectDepositSimulationRequest(directDepositSimulationRequest DirectDepositSimulationRequest) ApiDirectDepositsDebitEventRequest {
	r.directDepositSimulationRequest = &directDepositSimulationRequest
	return r
}

func (r ApiDirectDepositsDebitEventRequest) Execute() (*DirectDepositSimulationResponse, *http.Response, error) {
	return r.ApiService.DirectDepositsDebitEventExecute(r)
}

/*
DirectDepositsDebitEvent Simulate debit

Use this endpoint to simulate debiting funds from a deposit account.
Simulate a direct deposit of funds to a user account by including the deposit account number of the account to be debited.
You can find the account number in the `account_number` field of the response when you create a new deposit account.
Alternatively, you can retrieve it by sending a `GET` request to the `/depositaccounts/user/{user_token}` endpoint.
For more information, see <</core-api/direct-deposits, Direct Deposit>>.
See the full request body structure at <</core-api/simulations-direct-deposits#SimulationRequestBody, Request body>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDirectDepositsDebitEventRequest
*/
func (a *SimulationsDirectDepositsAPIService) DirectDepositsDebitEvent(ctx context.Context) ApiDirectDepositsDebitEventRequest {
	return ApiDirectDepositsDebitEventRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DirectDepositSimulationResponse
func (a *SimulationsDirectDepositsAPIService) DirectDepositsDebitEventExecute(r ApiDirectDepositsDebitEventRequest) (*DirectDepositSimulationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositSimulationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SimulationsDirectDepositsAPIService.DirectDepositsDebitEvent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/simulations/directdeposits/debit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.directDepositSimulationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
