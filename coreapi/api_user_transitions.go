/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UserTransitionsAPIService UserTransitionsAPI service
type UserTransitionsAPIService service

type ApiGetUsertransitionsTokenRequest struct {
	ctx context.Context
	ApiService *UserTransitionsAPIService
	token string
	fields *string
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetUsertransitionsTokenRequest) Fields(fields string) ApiGetUsertransitionsTokenRequest {
	r.fields = &fields
	return r
}

func (r ApiGetUsertransitionsTokenRequest) Execute() (*UserTransitionResponse, *http.Response, error) {
	return r.ApiService.GetUsertransitionsTokenExecute(r)
}

/*
GetUsertransitionsToken Retrieve user transition

Retrieve a user transition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the user transition you want to retrieve.
 @return ApiGetUsertransitionsTokenRequest
*/
func (a *UserTransitionsAPIService) GetUsertransitionsToken(ctx context.Context, token string) ApiGetUsertransitionsTokenRequest {
	return ApiGetUsertransitionsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return UserTransitionResponse
func (a *UserTransitionsAPIService) GetUsertransitionsTokenExecute(r ApiGetUsertransitionsTokenRequest) (*UserTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserTransitionsAPIService.GetUsertransitionsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usertransitions/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsertransitionsUserUsertokenRequest struct {
	ctx context.Context
	ApiService *UserTransitionsAPIService
	userToken string
	count *int32
	startIndex *int32
	fields *string
	sortBy *string
}

// Number of user transitions to retrieve.
func (r ApiGetUsertransitionsUserUsertokenRequest) Count(count int32) ApiGetUsertransitionsUserUsertokenRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r ApiGetUsertransitionsUserUsertokenRequest) StartIndex(startIndex int32) ApiGetUsertransitionsUserUsertokenRequest {
	r.startIndex = &startIndex
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r ApiGetUsertransitionsUserUsertokenRequest) Fields(fields string) ApiGetUsertransitionsUserUsertokenRequest {
	r.fields = &fields
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r ApiGetUsertransitionsUserUsertokenRequest) SortBy(sortBy string) ApiGetUsertransitionsUserUsertokenRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiGetUsertransitionsUserUsertokenRequest) Execute() (*UserTransitionListResponse, *http.Response, error) {
	return r.ApiService.GetUsertransitionsUserUsertokenExecute(r)
}

/*
GetUsertransitionsUserUsertoken List transitions for user

List all transitions for a given user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userToken Unique identifier of the user resource.
 @return ApiGetUsertransitionsUserUsertokenRequest
*/
func (a *UserTransitionsAPIService) GetUsertransitionsUserUsertoken(ctx context.Context, userToken string) ApiGetUsertransitionsUserUsertokenRequest {
	return ApiGetUsertransitionsUserUsertokenRequest{
		ApiService: a,
		ctx: ctx,
		userToken: userToken,
	}
}

// Execute executes the request
//  @return UserTransitionListResponse
func (a *UserTransitionsAPIService) GetUsertransitionsUserUsertokenExecute(r ApiGetUsertransitionsUserUsertokenRequest) (*UserTransitionListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserTransitionListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserTransitionsAPIService.GetUsertransitionsUserUsertoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usertransitions/user/{user_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_token"+"}", url.PathEscape(parameterValueToString(r.userToken, "userToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-id"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUsertransitionsRequest struct {
	ctx context.Context
	ApiService *UserTransitionsAPIService
	userTransitionRequest *UserTransitionRequest
}

func (r ApiPostUsertransitionsRequest) UserTransitionRequest(userTransitionRequest UserTransitionRequest) ApiPostUsertransitionsRequest {
	r.userTransitionRequest = &userTransitionRequest
	return r
}

func (r ApiPostUsertransitionsRequest) Execute() (*UserTransitionResponse, *http.Response, error) {
	return r.ApiService.PostUsertransitionsExecute(r)
}

/*
PostUsertransitions Create user transition

This endpoint enables you to change a user's status, depending on your role and the previous status change.
By changing a user's status, you can control the user's capabilities and the setting of the `user.active` field.
Do not set the value of the `user.active` field directly.

[cols="2,4a,4a"]
|===
| user.status Field | Description | User Limitations

| `UNVERIFIED`
| Initial status of a new user belonging to an account holder group where KYC is always required.

*Allowable transitions:*  +
`ACTIVE`, `CLOSED`
| Cannot load funds or activate cards.

*user.active Field:*  +
`false`

| `LIMITED`
| Initial status of a new user belonging to an account holder group where KYC is conditionally required.

*Allowable transitions:*  +
`ACTIVE`, `SUSPENDED`, `CLOSED`
| Restricted by rules in `accountholdergroups.pre_kyc_controls`.

*user.active Field:*  +
`true`

| `ACTIVE`
| Status of a user who has passed KYC, or initial status of a new user belonging to an account holder group where KYC is never required.

*Allowable transitions:*  +
`SUSPENDED`, `CLOSED`, `UNVERIFIED`
| None.

*user.active Field:*  +
`true`

| `SUSPENDED`
| The user is temporarily inactive.

Transitioning a suspended user to the `ACTIVE` status is restricted, based on your role and the details of the previous status change.

*Allowable transitions:*  +
`ACTIVE`, `LIMITED`, `UNVERIFIED`, `CLOSED`
| Cannot load funds or activate cards.

*user.active Field:*  +
`false`

| `CLOSED`
| The user is permanently inactive.

In general, the `CLOSED` status should be terminal.
For exceptional cases, you can transition a user to other statuses, depending on your role and the details of the previous status change.
Contact your Marqeta representative for more information.

*Allowable transitions:*  +
`ACTIVE`, `LIMITED`, `UNVERIFIED`, `SUSPENDED`
| Cannot load funds or activate cards.

*user.active Field:*  +
`false`

|===

[NOTE]
The Marqeta platform transitions a user's status in response to certain events.
For example, a user in the `UNVERIFIED` status is transitioned to `ACTIVE` when the user passes KYC verification.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostUsertransitionsRequest
*/
func (a *UserTransitionsAPIService) PostUsertransitions(ctx context.Context) ApiPostUsertransitionsRequest {
	return ApiPostUsertransitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserTransitionResponse
func (a *UserTransitionsAPIService) PostUsertransitionsExecute(r ApiPostUsertransitionsRequest) (*UserTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserTransitionsAPIService.PostUsertransitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usertransitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userTransitionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
