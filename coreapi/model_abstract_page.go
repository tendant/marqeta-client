/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the AbstractPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractPage{}

// AbstractPage Return paginated entities.
type AbstractPage struct {
	// Number of resources returned.
	Count int32 `json:"count"`
	// Sort order index of the last resource in the returned array.
	EndIndex int64 `json:"end_index"`
	// A value of `true` indicates that more unreturned resources exist.
	IsMore bool `json:"is_more"`
	// Sort order index of the first resource in the returned array.
	StartIndex int64 `json:"start_index"`
}

// NewAbstractPage instantiates a new AbstractPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractPage(count int32, endIndex int64, isMore bool, startIndex int64) *AbstractPage {
	this := AbstractPage{}
	this.Count = count
	this.EndIndex = endIndex
	this.IsMore = isMore
	this.StartIndex = startIndex
	return &this
}

// NewAbstractPageWithDefaults instantiates a new AbstractPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractPageWithDefaults() *AbstractPage {
	this := AbstractPage{}
	return &this
}

// GetCount returns the Count field value
func (o *AbstractPage) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *AbstractPage) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *AbstractPage) SetCount(v int32) {
	o.Count = v
}

// GetEndIndex returns the EndIndex field value
func (o *AbstractPage) GetEndIndex() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EndIndex
}

// GetEndIndexOk returns a tuple with the EndIndex field value
// and a boolean to check if the value has been set.
func (o *AbstractPage) GetEndIndexOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndIndex, true
}

// SetEndIndex sets field value
func (o *AbstractPage) SetEndIndex(v int64) {
	o.EndIndex = v
}

// GetIsMore returns the IsMore field value
func (o *AbstractPage) GetIsMore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMore
}

// GetIsMoreOk returns a tuple with the IsMore field value
// and a boolean to check if the value has been set.
func (o *AbstractPage) GetIsMoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMore, true
}

// SetIsMore sets field value
func (o *AbstractPage) SetIsMore(v bool) {
	o.IsMore = v
}

// GetStartIndex returns the StartIndex field value
func (o *AbstractPage) GetStartIndex() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartIndex
}

// GetStartIndexOk returns a tuple with the StartIndex field value
// and a boolean to check if the value has been set.
func (o *AbstractPage) GetStartIndexOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartIndex, true
}

// SetStartIndex sets field value
func (o *AbstractPage) SetStartIndex(v int64) {
	o.StartIndex = v
}

func (o AbstractPage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["end_index"] = o.EndIndex
	toSerialize["is_more"] = o.IsMore
	toSerialize["start_index"] = o.StartIndex
	return toSerialize, nil
}

type NullableAbstractPage struct {
	value *AbstractPage
	isSet bool
}

func (v NullableAbstractPage) Get() *AbstractPage {
	return v.value
}

func (v *NullableAbstractPage) Set(val *AbstractPage) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractPage) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractPage(val *AbstractPage) *NullableAbstractPage {
	return &NullableAbstractPage{value: val, isSet: true}
}

func (v NullableAbstractPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


