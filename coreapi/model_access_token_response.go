/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"time"
)

// checks if the AccessTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessTokenResponse{}

// AccessTokenResponse Contains a cardholder's login access information.
type AccessTokenResponse struct {
	AccesstokenId *string `json:"accesstoken_id,omitempty"`
	Application *Application `json:"application,omitempty"`
	// Date and time when the access token expires.
	Expires time.Time `json:"expires"`
	// Array of master roles.
	MasterRoles []string `json:"master_roles,omitempty"`
	// Indicates whether the access token is a single-use token.
	OneTime *bool `json:"one_time,omitempty"`
	// Unique identifier of the access token.
	Token *string `json:"token,omitempty"`
	// Specifies the type of access token.
	TokenType *string `json:"token_type,omitempty"`
	// Unique identifier of the user resource.
	UserToken *string `json:"user_token,omitempty"`
}

// NewAccessTokenResponse instantiates a new AccessTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessTokenResponse(expires time.Time) *AccessTokenResponse {
	this := AccessTokenResponse{}
	this.Expires = expires
	return &this
}

// NewAccessTokenResponseWithDefaults instantiates a new AccessTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessTokenResponseWithDefaults() *AccessTokenResponse {
	this := AccessTokenResponse{}
	return &this
}

// GetAccesstokenId returns the AccesstokenId field value if set, zero value otherwise.
func (o *AccessTokenResponse) GetAccesstokenId() string {
	if o == nil || IsNil(o.AccesstokenId) {
		var ret string
		return ret
	}
	return *o.AccesstokenId
}

// GetAccesstokenIdOk returns a tuple with the AccesstokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetAccesstokenIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccesstokenId) {
		return nil, false
	}
	return o.AccesstokenId, true
}

// HasAccesstokenId returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasAccesstokenId() bool {
	if o != nil && !IsNil(o.AccesstokenId) {
		return true
	}

	return false
}

// SetAccesstokenId gets a reference to the given string and assigns it to the AccesstokenId field.
func (o *AccessTokenResponse) SetAccesstokenId(v string) {
	o.AccesstokenId = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *AccessTokenResponse) GetApplication() Application {
	if o == nil || IsNil(o.Application) {
		var ret Application
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetApplicationOk() (*Application, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given Application and assigns it to the Application field.
func (o *AccessTokenResponse) SetApplication(v Application) {
	o.Application = &v
}

// GetExpires returns the Expires field value
func (o *AccessTokenResponse) GetExpires() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetExpiresOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expires, true
}

// SetExpires sets field value
func (o *AccessTokenResponse) SetExpires(v time.Time) {
	o.Expires = v
}

// GetMasterRoles returns the MasterRoles field value if set, zero value otherwise.
func (o *AccessTokenResponse) GetMasterRoles() []string {
	if o == nil || IsNil(o.MasterRoles) {
		var ret []string
		return ret
	}
	return o.MasterRoles
}

// GetMasterRolesOk returns a tuple with the MasterRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetMasterRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.MasterRoles) {
		return nil, false
	}
	return o.MasterRoles, true
}

// HasMasterRoles returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasMasterRoles() bool {
	if o != nil && !IsNil(o.MasterRoles) {
		return true
	}

	return false
}

// SetMasterRoles gets a reference to the given []string and assigns it to the MasterRoles field.
func (o *AccessTokenResponse) SetMasterRoles(v []string) {
	o.MasterRoles = v
}

// GetOneTime returns the OneTime field value if set, zero value otherwise.
func (o *AccessTokenResponse) GetOneTime() bool {
	if o == nil || IsNil(o.OneTime) {
		var ret bool
		return ret
	}
	return *o.OneTime
}

// GetOneTimeOk returns a tuple with the OneTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetOneTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.OneTime) {
		return nil, false
	}
	return o.OneTime, true
}

// HasOneTime returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasOneTime() bool {
	if o != nil && !IsNil(o.OneTime) {
		return true
	}

	return false
}

// SetOneTime gets a reference to the given bool and assigns it to the OneTime field.
func (o *AccessTokenResponse) SetOneTime(v bool) {
	o.OneTime = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AccessTokenResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *AccessTokenResponse) SetToken(v string) {
	o.Token = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *AccessTokenResponse) GetTokenType() string {
	if o == nil || IsNil(o.TokenType) {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TokenType) {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasTokenType() bool {
	if o != nil && !IsNil(o.TokenType) {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *AccessTokenResponse) SetTokenType(v string) {
	o.TokenType = &v
}

// GetUserToken returns the UserToken field value if set, zero value otherwise.
func (o *AccessTokenResponse) GetUserToken() string {
	if o == nil || IsNil(o.UserToken) {
		var ret string
		return ret
	}
	return *o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetUserTokenOk() (*string, bool) {
	if o == nil || IsNil(o.UserToken) {
		return nil, false
	}
	return o.UserToken, true
}

// HasUserToken returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasUserToken() bool {
	if o != nil && !IsNil(o.UserToken) {
		return true
	}

	return false
}

// SetUserToken gets a reference to the given string and assigns it to the UserToken field.
func (o *AccessTokenResponse) SetUserToken(v string) {
	o.UserToken = &v
}

func (o AccessTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccesstokenId) {
		toSerialize["accesstoken_id"] = o.AccesstokenId
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	toSerialize["expires"] = o.Expires
	if !IsNil(o.MasterRoles) {
		toSerialize["master_roles"] = o.MasterRoles
	}
	if !IsNil(o.OneTime) {
		toSerialize["one_time"] = o.OneTime
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.TokenType) {
		toSerialize["token_type"] = o.TokenType
	}
	if !IsNil(o.UserToken) {
		toSerialize["user_token"] = o.UserToken
	}
	return toSerialize, nil
}

type NullableAccessTokenResponse struct {
	value *AccessTokenResponse
	isSet bool
}

func (v NullableAccessTokenResponse) Get() *AccessTokenResponse {
	return v.value
}

func (v *NullableAccessTokenResponse) Set(val *AccessTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessTokenResponse(val *AccessTokenResponse) *NullableAccessTokenResponse {
	return &NullableAccessTokenResponse{value: val, isSet: true}
}

func (v NullableAccessTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


