/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// AccountAndDocumentAssetType Type of document.
type AccountAndDocumentAssetType string

// List of AccountAndDocumentAssetType
const (
	ACCOUNTANDDOCUMENTASSETTYPE_TERMS_SCHEDULE AccountAndDocumentAssetType = "TERMS_SCHEDULE"
	ACCOUNTANDDOCUMENTASSETTYPE_ACCOUNT_STATEMENT AccountAndDocumentAssetType = "ACCOUNT_STATEMENT"
	ACCOUNTANDDOCUMENTASSETTYPE_SUMMARY_OF_CREDIT_TERMS AccountAndDocumentAssetType = "SUMMARY_OF_CREDIT_TERMS"
	ACCOUNTANDDOCUMENTASSETTYPE_REWARDS_DISCLOSURE AccountAndDocumentAssetType = "REWARDS_DISCLOSURE"
	ACCOUNTANDDOCUMENTASSETTYPE_PRIVACY_POLICY AccountAndDocumentAssetType = "PRIVACY_POLICY"
	ACCOUNTANDDOCUMENTASSETTYPE_E_DISCLOSURE AccountAndDocumentAssetType = "E_DISCLOSURE"
	ACCOUNTANDDOCUMENTASSETTYPE_BENEFITS_DISCLOSURE AccountAndDocumentAssetType = "BENEFITS_DISCLOSURE"
	ACCOUNTANDDOCUMENTASSETTYPE_CARD_MEMBER_AGREEMENT AccountAndDocumentAssetType = "CARD_MEMBER_AGREEMENT"
)

// All allowed values of AccountAndDocumentAssetType enum
var AllowedAccountAndDocumentAssetTypeEnumValues = []AccountAndDocumentAssetType{
	"TERMS_SCHEDULE",
	"ACCOUNT_STATEMENT",
	"SUMMARY_OF_CREDIT_TERMS",
	"REWARDS_DISCLOSURE",
	"PRIVACY_POLICY",
	"E_DISCLOSURE",
	"BENEFITS_DISCLOSURE",
	"CARD_MEMBER_AGREEMENT",
}

func (v *AccountAndDocumentAssetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountAndDocumentAssetType(value)
	for _, existing := range AllowedAccountAndDocumentAssetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountAndDocumentAssetType", value)
}

// NewAccountAndDocumentAssetTypeFromValue returns a pointer to a valid AccountAndDocumentAssetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountAndDocumentAssetTypeFromValue(v string) (*AccountAndDocumentAssetType, error) {
	ev := AccountAndDocumentAssetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountAndDocumentAssetType: valid values are %v", v, AllowedAccountAndDocumentAssetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountAndDocumentAssetType) IsValid() bool {
	for _, existing := range AllowedAccountAndDocumentAssetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountAndDocumentAssetType value
func (v AccountAndDocumentAssetType) Ptr() *AccountAndDocumentAssetType {
	return &v
}

type NullableAccountAndDocumentAssetType struct {
	value *AccountAndDocumentAssetType
	isSet bool
}

func (v NullableAccountAndDocumentAssetType) Get() *AccountAndDocumentAssetType {
	return v.value
}

func (v *NullableAccountAndDocumentAssetType) Set(val *AccountAndDocumentAssetType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountAndDocumentAssetType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountAndDocumentAssetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountAndDocumentAssetType(val *AccountAndDocumentAssetType) *NullableAccountAndDocumentAssetType {
	return &NullableAccountAndDocumentAssetType{value: val, isSet: true}
}

func (v NullableAccountAndDocumentAssetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountAndDocumentAssetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

