/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// AccountAprType Type of APR.  * `GO_TO` - Default APR rate that is applicable when any promotional periods expire. * `PROMOTIONAL` - A temporary rate that is applicable for a specified period of time.
type AccountAprType string

// List of AccountAprType
const (
	ACCOUNTAPRTYPE_GO_TO AccountAprType = "GO_TO"
	ACCOUNTAPRTYPE_PROMOTIONAL AccountAprType = "PROMOTIONAL"
)

// All allowed values of AccountAprType enum
var AllowedAccountAprTypeEnumValues = []AccountAprType{
	"GO_TO",
	"PROMOTIONAL",
}

func (v *AccountAprType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountAprType(value)
	for _, existing := range AllowedAccountAprTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountAprType", value)
}

// NewAccountAprTypeFromValue returns a pointer to a valid AccountAprType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountAprTypeFromValue(v string) (*AccountAprType, error) {
	ev := AccountAprType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountAprType: valid values are %v", v, AllowedAccountAprTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountAprType) IsValid() bool {
	for _, existing := range AllowedAccountAprTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountAprType value
func (v AccountAprType) Ptr() *AccountAprType {
	return &v
}

type NullableAccountAprType struct {
	value *AccountAprType
	isSet bool
}

func (v NullableAccountAprType) Get() *AccountAprType {
	return v.value
}

func (v *NullableAccountAprType) Set(val *AccountAprType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountAprType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountAprType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountAprType(val *AccountAprType) *NullableAccountAprType {
	return &NullableAccountAprType{value: val, isSet: true}
}

func (v NullableAccountAprType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountAprType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

