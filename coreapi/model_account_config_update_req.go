/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the AccountConfigUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountConfigUpdateReq{}

// AccountConfigUpdateReq Contains information relevant for updating configurations for electronic disclosures, fees, payment holds, and minimum payment.
type AccountConfigUpdateReq struct {
	// A value of `true` indicates that the account holder consents to receiving disclosures and statements electronically.
	EDisclosureActive *bool `json:"e_disclosure_active,omitempty"`
	// Contains one or more fees associated with the credit account.
	Fees []ConfigFeeScheduleReq `json:"fees,omitempty"`
	MinPayment *AccountConfigMinPayment `json:"min_payment,omitempty"`
	PaymentHolds *AccountConfigPaymentHolds `json:"payment_holds,omitempty"`
}

// NewAccountConfigUpdateReq instantiates a new AccountConfigUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountConfigUpdateReq() *AccountConfigUpdateReq {
	this := AccountConfigUpdateReq{}
	var eDisclosureActive bool = false
	this.EDisclosureActive = &eDisclosureActive
	return &this
}

// NewAccountConfigUpdateReqWithDefaults instantiates a new AccountConfigUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountConfigUpdateReqWithDefaults() *AccountConfigUpdateReq {
	this := AccountConfigUpdateReq{}
	var eDisclosureActive bool = false
	this.EDisclosureActive = &eDisclosureActive
	return &this
}

// GetEDisclosureActive returns the EDisclosureActive field value if set, zero value otherwise.
func (o *AccountConfigUpdateReq) GetEDisclosureActive() bool {
	if o == nil || IsNil(o.EDisclosureActive) {
		var ret bool
		return ret
	}
	return *o.EDisclosureActive
}

// GetEDisclosureActiveOk returns a tuple with the EDisclosureActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountConfigUpdateReq) GetEDisclosureActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.EDisclosureActive) {
		return nil, false
	}
	return o.EDisclosureActive, true
}

// HasEDisclosureActive returns a boolean if a field has been set.
func (o *AccountConfigUpdateReq) HasEDisclosureActive() bool {
	if o != nil && !IsNil(o.EDisclosureActive) {
		return true
	}

	return false
}

// SetEDisclosureActive gets a reference to the given bool and assigns it to the EDisclosureActive field.
func (o *AccountConfigUpdateReq) SetEDisclosureActive(v bool) {
	o.EDisclosureActive = &v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *AccountConfigUpdateReq) GetFees() []ConfigFeeScheduleReq {
	if o == nil || IsNil(o.Fees) {
		var ret []ConfigFeeScheduleReq
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountConfigUpdateReq) GetFeesOk() ([]ConfigFeeScheduleReq, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *AccountConfigUpdateReq) HasFees() bool {
	if o != nil && !IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given []ConfigFeeScheduleReq and assigns it to the Fees field.
func (o *AccountConfigUpdateReq) SetFees(v []ConfigFeeScheduleReq) {
	o.Fees = v
}

// GetMinPayment returns the MinPayment field value if set, zero value otherwise.
func (o *AccountConfigUpdateReq) GetMinPayment() AccountConfigMinPayment {
	if o == nil || IsNil(o.MinPayment) {
		var ret AccountConfigMinPayment
		return ret
	}
	return *o.MinPayment
}

// GetMinPaymentOk returns a tuple with the MinPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountConfigUpdateReq) GetMinPaymentOk() (*AccountConfigMinPayment, bool) {
	if o == nil || IsNil(o.MinPayment) {
		return nil, false
	}
	return o.MinPayment, true
}

// HasMinPayment returns a boolean if a field has been set.
func (o *AccountConfigUpdateReq) HasMinPayment() bool {
	if o != nil && !IsNil(o.MinPayment) {
		return true
	}

	return false
}

// SetMinPayment gets a reference to the given AccountConfigMinPayment and assigns it to the MinPayment field.
func (o *AccountConfigUpdateReq) SetMinPayment(v AccountConfigMinPayment) {
	o.MinPayment = &v
}

// GetPaymentHolds returns the PaymentHolds field value if set, zero value otherwise.
func (o *AccountConfigUpdateReq) GetPaymentHolds() AccountConfigPaymentHolds {
	if o == nil || IsNil(o.PaymentHolds) {
		var ret AccountConfigPaymentHolds
		return ret
	}
	return *o.PaymentHolds
}

// GetPaymentHoldsOk returns a tuple with the PaymentHolds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountConfigUpdateReq) GetPaymentHoldsOk() (*AccountConfigPaymentHolds, bool) {
	if o == nil || IsNil(o.PaymentHolds) {
		return nil, false
	}
	return o.PaymentHolds, true
}

// HasPaymentHolds returns a boolean if a field has been set.
func (o *AccountConfigUpdateReq) HasPaymentHolds() bool {
	if o != nil && !IsNil(o.PaymentHolds) {
		return true
	}

	return false
}

// SetPaymentHolds gets a reference to the given AccountConfigPaymentHolds and assigns it to the PaymentHolds field.
func (o *AccountConfigUpdateReq) SetPaymentHolds(v AccountConfigPaymentHolds) {
	o.PaymentHolds = &v
}

func (o AccountConfigUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountConfigUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EDisclosureActive) {
		toSerialize["e_disclosure_active"] = o.EDisclosureActive
	}
	if !IsNil(o.Fees) {
		toSerialize["fees"] = o.Fees
	}
	if !IsNil(o.MinPayment) {
		toSerialize["min_payment"] = o.MinPayment
	}
	if !IsNil(o.PaymentHolds) {
		toSerialize["payment_holds"] = o.PaymentHolds
	}
	return toSerialize, nil
}

type NullableAccountConfigUpdateReq struct {
	value *AccountConfigUpdateReq
	isSet bool
}

func (v NullableAccountConfigUpdateReq) Get() *AccountConfigUpdateReq {
	return v.value
}

func (v *NullableAccountConfigUpdateReq) Set(val *AccountConfigUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountConfigUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountConfigUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountConfigUpdateReq(val *AccountConfigUpdateReq) *NullableAccountConfigUpdateReq {
	return &NullableAccountConfigUpdateReq{value: val, isSet: true}
}

func (v NullableAccountConfigUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountConfigUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


