/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the AccountFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountFee{}

// AccountFee Contains fee configurations on a credit account.
type AccountFee struct {
	Method Method `json:"method"`
	Type FeeType `json:"type"`
	// Value of the fee, either a flat fee amount or percentage value.
	Value *float32 `json:"value,omitempty"`
}

// NewAccountFee instantiates a new AccountFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountFee(method Method, type_ FeeType) *AccountFee {
	this := AccountFee{}
	this.Method = method
	this.Type = type_
	return &this
}

// NewAccountFeeWithDefaults instantiates a new AccountFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountFeeWithDefaults() *AccountFee {
	this := AccountFee{}
	return &this
}

// GetMethod returns the Method field value
func (o *AccountFee) GetMethod() Method {
	if o == nil {
		var ret Method
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *AccountFee) GetMethodOk() (*Method, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *AccountFee) SetMethod(v Method) {
	o.Method = v
}

// GetType returns the Type field value
func (o *AccountFee) GetType() FeeType {
	if o == nil {
		var ret FeeType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AccountFee) GetTypeOk() (*FeeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AccountFee) SetType(v FeeType) {
	o.Type = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AccountFee) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountFee) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AccountFee) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *AccountFee) SetValue(v float32) {
	o.Value = &v
}

func (o AccountFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["method"] = o.Method
	toSerialize["type"] = o.Type
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableAccountFee struct {
	value *AccountFee
	isSet bool
}

func (v NullableAccountFee) Get() *AccountFee {
	return v.value
}

func (v *NullableAccountFee) Set(val *AccountFee) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountFee) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountFee(val *AccountFee) *NullableAccountFee {
	return &NullableAccountFee{value: val, isSet: true}
}

func (v NullableAccountFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


