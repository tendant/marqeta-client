/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the AccountFunding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountFunding{}

// AccountFunding struct for AccountFunding
type AccountFunding struct {
	FundingSource *string `json:"funding_source,omitempty"`
	ReceiverAccountType *string `json:"receiver_account_type,omitempty"`
	ReceiverName *string `json:"receiver_name,omitempty"`
	ScreeningScore *string `json:"screening_score,omitempty"`
	TransactionPurpose *string `json:"transaction_purpose,omitempty"`
	TransactionType *string `json:"transaction_type,omitempty"`
}

// NewAccountFunding instantiates a new AccountFunding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountFunding() *AccountFunding {
	this := AccountFunding{}
	return &this
}

// NewAccountFundingWithDefaults instantiates a new AccountFunding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountFundingWithDefaults() *AccountFunding {
	this := AccountFunding{}
	return &this
}

// GetFundingSource returns the FundingSource field value if set, zero value otherwise.
func (o *AccountFunding) GetFundingSource() string {
	if o == nil || IsNil(o.FundingSource) {
		var ret string
		return ret
	}
	return *o.FundingSource
}

// GetFundingSourceOk returns a tuple with the FundingSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountFunding) GetFundingSourceOk() (*string, bool) {
	if o == nil || IsNil(o.FundingSource) {
		return nil, false
	}
	return o.FundingSource, true
}

// HasFundingSource returns a boolean if a field has been set.
func (o *AccountFunding) HasFundingSource() bool {
	if o != nil && !IsNil(o.FundingSource) {
		return true
	}

	return false
}

// SetFundingSource gets a reference to the given string and assigns it to the FundingSource field.
func (o *AccountFunding) SetFundingSource(v string) {
	o.FundingSource = &v
}

// GetReceiverAccountType returns the ReceiverAccountType field value if set, zero value otherwise.
func (o *AccountFunding) GetReceiverAccountType() string {
	if o == nil || IsNil(o.ReceiverAccountType) {
		var ret string
		return ret
	}
	return *o.ReceiverAccountType
}

// GetReceiverAccountTypeOk returns a tuple with the ReceiverAccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountFunding) GetReceiverAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiverAccountType) {
		return nil, false
	}
	return o.ReceiverAccountType, true
}

// HasReceiverAccountType returns a boolean if a field has been set.
func (o *AccountFunding) HasReceiverAccountType() bool {
	if o != nil && !IsNil(o.ReceiverAccountType) {
		return true
	}

	return false
}

// SetReceiverAccountType gets a reference to the given string and assigns it to the ReceiverAccountType field.
func (o *AccountFunding) SetReceiverAccountType(v string) {
	o.ReceiverAccountType = &v
}

// GetReceiverName returns the ReceiverName field value if set, zero value otherwise.
func (o *AccountFunding) GetReceiverName() string {
	if o == nil || IsNil(o.ReceiverName) {
		var ret string
		return ret
	}
	return *o.ReceiverName
}

// GetReceiverNameOk returns a tuple with the ReceiverName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountFunding) GetReceiverNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiverName) {
		return nil, false
	}
	return o.ReceiverName, true
}

// HasReceiverName returns a boolean if a field has been set.
func (o *AccountFunding) HasReceiverName() bool {
	if o != nil && !IsNil(o.ReceiverName) {
		return true
	}

	return false
}

// SetReceiverName gets a reference to the given string and assigns it to the ReceiverName field.
func (o *AccountFunding) SetReceiverName(v string) {
	o.ReceiverName = &v
}

// GetScreeningScore returns the ScreeningScore field value if set, zero value otherwise.
func (o *AccountFunding) GetScreeningScore() string {
	if o == nil || IsNil(o.ScreeningScore) {
		var ret string
		return ret
	}
	return *o.ScreeningScore
}

// GetScreeningScoreOk returns a tuple with the ScreeningScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountFunding) GetScreeningScoreOk() (*string, bool) {
	if o == nil || IsNil(o.ScreeningScore) {
		return nil, false
	}
	return o.ScreeningScore, true
}

// HasScreeningScore returns a boolean if a field has been set.
func (o *AccountFunding) HasScreeningScore() bool {
	if o != nil && !IsNil(o.ScreeningScore) {
		return true
	}

	return false
}

// SetScreeningScore gets a reference to the given string and assigns it to the ScreeningScore field.
func (o *AccountFunding) SetScreeningScore(v string) {
	o.ScreeningScore = &v
}

// GetTransactionPurpose returns the TransactionPurpose field value if set, zero value otherwise.
func (o *AccountFunding) GetTransactionPurpose() string {
	if o == nil || IsNil(o.TransactionPurpose) {
		var ret string
		return ret
	}
	return *o.TransactionPurpose
}

// GetTransactionPurposeOk returns a tuple with the TransactionPurpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountFunding) GetTransactionPurposeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionPurpose) {
		return nil, false
	}
	return o.TransactionPurpose, true
}

// HasTransactionPurpose returns a boolean if a field has been set.
func (o *AccountFunding) HasTransactionPurpose() bool {
	if o != nil && !IsNil(o.TransactionPurpose) {
		return true
	}

	return false
}

// SetTransactionPurpose gets a reference to the given string and assigns it to the TransactionPurpose field.
func (o *AccountFunding) SetTransactionPurpose(v string) {
	o.TransactionPurpose = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *AccountFunding) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType) {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountFunding) GetTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *AccountFunding) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *AccountFunding) SetTransactionType(v string) {
	o.TransactionType = &v
}

func (o AccountFunding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountFunding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FundingSource) {
		toSerialize["funding_source"] = o.FundingSource
	}
	if !IsNil(o.ReceiverAccountType) {
		toSerialize["receiver_account_type"] = o.ReceiverAccountType
	}
	if !IsNil(o.ReceiverName) {
		toSerialize["receiver_name"] = o.ReceiverName
	}
	if !IsNil(o.ScreeningScore) {
		toSerialize["screening_score"] = o.ScreeningScore
	}
	if !IsNil(o.TransactionPurpose) {
		toSerialize["transaction_purpose"] = o.TransactionPurpose
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transaction_type"] = o.TransactionType
	}
	return toSerialize, nil
}

type NullableAccountFunding struct {
	value *AccountFunding
	isSet bool
}

func (v NullableAccountFunding) Get() *AccountFunding {
	return v.value
}

func (v *NullableAccountFunding) Set(val *AccountFunding) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountFunding) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountFunding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountFunding(val *AccountFunding) *NullableAccountFunding {
	return &NullableAccountFunding{value: val, isSet: true}
}

func (v NullableAccountFunding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountFunding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


