/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// AccountProductFeeType Type of fee.
type AccountProductFeeType string

// List of AccountProductFeeType
const (
	ACCOUNTPRODUCTFEETYPE_LATE_PAYMENT_FEE AccountProductFeeType = "LATE_PAYMENT_FEE"
	ACCOUNTPRODUCTFEETYPE_RETURNED_PAYMENT_FEE AccountProductFeeType = "RETURNED_PAYMENT_FEE"
	ACCOUNTPRODUCTFEETYPE_MONTHLY_FEE AccountProductFeeType = "MONTHLY_FEE"
	ACCOUNTPRODUCTFEETYPE_ANNUAL_FEE AccountProductFeeType = "ANNUAL_FEE"
)

// All allowed values of AccountProductFeeType enum
var AllowedAccountProductFeeTypeEnumValues = []AccountProductFeeType{
	"LATE_PAYMENT_FEE",
	"RETURNED_PAYMENT_FEE",
	"MONTHLY_FEE",
	"ANNUAL_FEE",
}

func (v *AccountProductFeeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountProductFeeType(value)
	for _, existing := range AllowedAccountProductFeeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountProductFeeType", value)
}

// NewAccountProductFeeTypeFromValue returns a pointer to a valid AccountProductFeeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountProductFeeTypeFromValue(v string) (*AccountProductFeeType, error) {
	ev := AccountProductFeeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountProductFeeType: valid values are %v", v, AllowedAccountProductFeeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountProductFeeType) IsValid() bool {
	for _, existing := range AllowedAccountProductFeeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountProductFeeType value
func (v AccountProductFeeType) Ptr() *AccountProductFeeType {
	return &v
}

type NullableAccountProductFeeType struct {
	value *AccountProductFeeType
	isSet bool
}

func (v NullableAccountProductFeeType) Get() *AccountProductFeeType {
	return v.value
}

func (v *NullableAccountProductFeeType) Set(val *AccountProductFeeType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountProductFeeType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountProductFeeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountProductFeeType(val *AccountProductFeeType) *NullableAccountProductFeeType {
	return &NullableAccountProductFeeType{value: val, isSet: true}
}

func (v NullableAccountProductFeeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountProductFeeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

