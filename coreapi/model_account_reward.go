/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the AccountReward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountReward{}

// AccountReward TODO Add description here
type AccountReward struct {
	Method Method `json:"method"`
	Type RewardType `json:"type"`
	// Value of the reward, either a flat reward amount or percentage value.
	Value *float32 `json:"value,omitempty"`
}

// NewAccountReward instantiates a new AccountReward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountReward(method Method, type_ RewardType) *AccountReward {
	this := AccountReward{}
	this.Method = method
	this.Type = type_
	return &this
}

// NewAccountRewardWithDefaults instantiates a new AccountReward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountRewardWithDefaults() *AccountReward {
	this := AccountReward{}
	return &this
}

// GetMethod returns the Method field value
func (o *AccountReward) GetMethod() Method {
	if o == nil {
		var ret Method
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *AccountReward) GetMethodOk() (*Method, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *AccountReward) SetMethod(v Method) {
	o.Method = v
}

// GetType returns the Type field value
func (o *AccountReward) GetType() RewardType {
	if o == nil {
		var ret RewardType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AccountReward) GetTypeOk() (*RewardType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AccountReward) SetType(v RewardType) {
	o.Type = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AccountReward) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountReward) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AccountReward) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *AccountReward) SetValue(v float32) {
	o.Value = &v
}

func (o AccountReward) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountReward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["method"] = o.Method
	toSerialize["type"] = o.Type
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableAccountReward struct {
	value *AccountReward
	isSet bool
}

func (v NullableAccountReward) Get() *AccountReward {
	return v.value
}

func (v *NullableAccountReward) Set(val *AccountReward) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountReward) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountReward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountReward(val *AccountReward) *NullableAccountReward {
	return &NullableAccountReward{value: val, isSet: true}
}

func (v NullableAccountReward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountReward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


