/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the AccountUsageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountUsageResponse{}

// AccountUsageResponse Contains information on how a credit account is used and what types of balances are permitted on the account.
type AccountUsageResponse struct {
	// Contains one or more APRs associated with the type of balance on the credit account
	Aprs []AprScheduleResponse `json:"aprs"`
	// Contains one or more fees associated with the usage type.
	Fees []AccountFee `json:"fees,omitempty"`
	Type BalanceType `json:"type"`
}

// NewAccountUsageResponse instantiates a new AccountUsageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountUsageResponse(aprs []AprScheduleResponse, type_ BalanceType) *AccountUsageResponse {
	this := AccountUsageResponse{}
	this.Aprs = aprs
	this.Type = type_
	return &this
}

// NewAccountUsageResponseWithDefaults instantiates a new AccountUsageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountUsageResponseWithDefaults() *AccountUsageResponse {
	this := AccountUsageResponse{}
	return &this
}

// GetAprs returns the Aprs field value
func (o *AccountUsageResponse) GetAprs() []AprScheduleResponse {
	if o == nil {
		var ret []AprScheduleResponse
		return ret
	}

	return o.Aprs
}

// GetAprsOk returns a tuple with the Aprs field value
// and a boolean to check if the value has been set.
func (o *AccountUsageResponse) GetAprsOk() ([]AprScheduleResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Aprs, true
}

// SetAprs sets field value
func (o *AccountUsageResponse) SetAprs(v []AprScheduleResponse) {
	o.Aprs = v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *AccountUsageResponse) GetFees() []AccountFee {
	if o == nil || IsNil(o.Fees) {
		var ret []AccountFee
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUsageResponse) GetFeesOk() ([]AccountFee, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *AccountUsageResponse) HasFees() bool {
	if o != nil && !IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given []AccountFee and assigns it to the Fees field.
func (o *AccountUsageResponse) SetFees(v []AccountFee) {
	o.Fees = v
}

// GetType returns the Type field value
func (o *AccountUsageResponse) GetType() BalanceType {
	if o == nil {
		var ret BalanceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AccountUsageResponse) GetTypeOk() (*BalanceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AccountUsageResponse) SetType(v BalanceType) {
	o.Type = v
}

func (o AccountUsageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountUsageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aprs"] = o.Aprs
	if !IsNil(o.Fees) {
		toSerialize["fees"] = o.Fees
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableAccountUsageResponse struct {
	value *AccountUsageResponse
	isSet bool
}

func (v NullableAccountUsageResponse) Get() *AccountUsageResponse {
	return v.value
}

func (v *NullableAccountUsageResponse) Set(val *AccountUsageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountUsageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountUsageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountUsageResponse(val *AccountUsageResponse) *NullableAccountUsageResponse {
	return &NullableAccountUsageResponse{value: val, isSet: true}
}

func (v NullableAccountUsageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountUsageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


