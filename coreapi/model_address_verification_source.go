/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the AddressVerificationSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressVerificationSource{}

// AddressVerificationSource Contains address verification data consisting of address data entered by the cardholder, address data held by the Marqeta platform, and an assertion by the Marqeta platform as to whether the two sets of data match.
type AddressVerificationSource struct {
	OnFile *AvsInformation `json:"on_file,omitempty"`
	Response *Response `json:"response,omitempty"`
}

// NewAddressVerificationSource instantiates a new AddressVerificationSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressVerificationSource() *AddressVerificationSource {
	this := AddressVerificationSource{}
	return &this
}

// NewAddressVerificationSourceWithDefaults instantiates a new AddressVerificationSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressVerificationSourceWithDefaults() *AddressVerificationSource {
	this := AddressVerificationSource{}
	return &this
}

// GetOnFile returns the OnFile field value if set, zero value otherwise.
func (o *AddressVerificationSource) GetOnFile() AvsInformation {
	if o == nil || IsNil(o.OnFile) {
		var ret AvsInformation
		return ret
	}
	return *o.OnFile
}

// GetOnFileOk returns a tuple with the OnFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressVerificationSource) GetOnFileOk() (*AvsInformation, bool) {
	if o == nil || IsNil(o.OnFile) {
		return nil, false
	}
	return o.OnFile, true
}

// HasOnFile returns a boolean if a field has been set.
func (o *AddressVerificationSource) HasOnFile() bool {
	if o != nil && !IsNil(o.OnFile) {
		return true
	}

	return false
}

// SetOnFile gets a reference to the given AvsInformation and assigns it to the OnFile field.
func (o *AddressVerificationSource) SetOnFile(v AvsInformation) {
	o.OnFile = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *AddressVerificationSource) GetResponse() Response {
	if o == nil || IsNil(o.Response) {
		var ret Response
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressVerificationSource) GetResponseOk() (*Response, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *AddressVerificationSource) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given Response and assigns it to the Response field.
func (o *AddressVerificationSource) SetResponse(v Response) {
	o.Response = &v
}

func (o AddressVerificationSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressVerificationSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OnFile) {
		toSerialize["on_file"] = o.OnFile
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	return toSerialize, nil
}

type NullableAddressVerificationSource struct {
	value *AddressVerificationSource
	isSet bool
}

func (v NullableAddressVerificationSource) Get() *AddressVerificationSource {
	return v.value
}

func (v *NullableAddressVerificationSource) Set(val *AddressVerificationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressVerificationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressVerificationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressVerificationSource(val *AddressVerificationSource) *NullableAddressVerificationSource {
	return &NullableAddressVerificationSource{value: val, isSet: true}
}

func (v NullableAddressVerificationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressVerificationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


