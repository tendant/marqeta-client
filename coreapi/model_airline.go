/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"time"
)

// checks if the Airline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Airline{}

// Airline Contains information about airline-related transactions.
type Airline struct {
	// The date and time of departure.
	DepartDate *time.Time `json:"depart_date,omitempty"`
	// The city where the flight originates.
	OriginationCity *string `json:"origination_city,omitempty"`
	// The name of the passenger.
	PassengerName *string `json:"passenger_name,omitempty"`
}

// NewAirline instantiates a new Airline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirline() *Airline {
	this := Airline{}
	return &this
}

// NewAirlineWithDefaults instantiates a new Airline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirlineWithDefaults() *Airline {
	this := Airline{}
	return &this
}

// GetDepartDate returns the DepartDate field value if set, zero value otherwise.
func (o *Airline) GetDepartDate() time.Time {
	if o == nil || IsNil(o.DepartDate) {
		var ret time.Time
		return ret
	}
	return *o.DepartDate
}

// GetDepartDateOk returns a tuple with the DepartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Airline) GetDepartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DepartDate) {
		return nil, false
	}
	return o.DepartDate, true
}

// HasDepartDate returns a boolean if a field has been set.
func (o *Airline) HasDepartDate() bool {
	if o != nil && !IsNil(o.DepartDate) {
		return true
	}

	return false
}

// SetDepartDate gets a reference to the given time.Time and assigns it to the DepartDate field.
func (o *Airline) SetDepartDate(v time.Time) {
	o.DepartDate = &v
}

// GetOriginationCity returns the OriginationCity field value if set, zero value otherwise.
func (o *Airline) GetOriginationCity() string {
	if o == nil || IsNil(o.OriginationCity) {
		var ret string
		return ret
	}
	return *o.OriginationCity
}

// GetOriginationCityOk returns a tuple with the OriginationCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Airline) GetOriginationCityOk() (*string, bool) {
	if o == nil || IsNil(o.OriginationCity) {
		return nil, false
	}
	return o.OriginationCity, true
}

// HasOriginationCity returns a boolean if a field has been set.
func (o *Airline) HasOriginationCity() bool {
	if o != nil && !IsNil(o.OriginationCity) {
		return true
	}

	return false
}

// SetOriginationCity gets a reference to the given string and assigns it to the OriginationCity field.
func (o *Airline) SetOriginationCity(v string) {
	o.OriginationCity = &v
}

// GetPassengerName returns the PassengerName field value if set, zero value otherwise.
func (o *Airline) GetPassengerName() string {
	if o == nil || IsNil(o.PassengerName) {
		var ret string
		return ret
	}
	return *o.PassengerName
}

// GetPassengerNameOk returns a tuple with the PassengerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Airline) GetPassengerNameOk() (*string, bool) {
	if o == nil || IsNil(o.PassengerName) {
		return nil, false
	}
	return o.PassengerName, true
}

// HasPassengerName returns a boolean if a field has been set.
func (o *Airline) HasPassengerName() bool {
	if o != nil && !IsNil(o.PassengerName) {
		return true
	}

	return false
}

// SetPassengerName gets a reference to the given string and assigns it to the PassengerName field.
func (o *Airline) SetPassengerName(v string) {
	o.PassengerName = &v
}

func (o Airline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Airline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepartDate) {
		toSerialize["depart_date"] = o.DepartDate
	}
	if !IsNil(o.OriginationCity) {
		toSerialize["origination_city"] = o.OriginationCity
	}
	if !IsNil(o.PassengerName) {
		toSerialize["passenger_name"] = o.PassengerName
	}
	return toSerialize, nil
}

type NullableAirline struct {
	value *Airline
	isSet bool
}

func (v NullableAirline) Get() *Airline {
	return v.value
}

func (v *NullableAirline) Set(val *Airline) {
	v.value = val
	v.isSet = true
}

func (v NullableAirline) IsSet() bool {
	return v.isSet
}

func (v *NullableAirline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirline(val *Airline) *NullableAirline {
	return &NullableAirline{value: val, isSet: true}
}

func (v NullableAirline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


