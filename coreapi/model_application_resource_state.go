/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// ApplicationResourceState State of the application.  If manually <</core-api/credit-applications#transitionApplication, transitioning an application state>>:  * `application_state` is the state to which you want to transition the application status; must be `ACCEPTED` or `REJECTED`. * `original_status` returns the state of the application before it was manually transitioned. * `status` returns the state to which the application was transitioned.
type ApplicationResourceState string

// List of ApplicationResourceState
const (
	APPLICATIONRESOURCESTATE_CREATED ApplicationResourceState = "CREATED"
	APPLICATIONRESOURCESTATE_DECISIONING ApplicationResourceState = "DECISIONING"
	APPLICATIONRESOURCESTATE_MANUAL_REVIEW ApplicationResourceState = "MANUAL_REVIEW"
	APPLICATIONRESOURCESTATE_EXPIRED ApplicationResourceState = "EXPIRED"
	APPLICATIONRESOURCESTATE_APPROVED ApplicationResourceState = "APPROVED"
	APPLICATIONRESOURCESTATE_REJECTED ApplicationResourceState = "REJECTED"
	APPLICATIONRESOURCESTATE_ACCEPTED ApplicationResourceState = "ACCEPTED"
	APPLICATIONRESOURCESTATE_DECLINED ApplicationResourceState = "DECLINED"
	APPLICATIONRESOURCESTATE_ERROR ApplicationResourceState = "ERROR"
)

// All allowed values of ApplicationResourceState enum
var AllowedApplicationResourceStateEnumValues = []ApplicationResourceState{
	"CREATED",
	"DECISIONING",
	"MANUAL_REVIEW",
	"EXPIRED",
	"APPROVED",
	"REJECTED",
	"ACCEPTED",
	"DECLINED",
	"ERROR",
}

func (v *ApplicationResourceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationResourceState(value)
	for _, existing := range AllowedApplicationResourceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationResourceState", value)
}

// NewApplicationResourceStateFromValue returns a pointer to a valid ApplicationResourceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationResourceStateFromValue(v string) (*ApplicationResourceState, error) {
	ev := ApplicationResourceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationResourceState: valid values are %v", v, AllowedApplicationResourceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationResourceState) IsValid() bool {
	for _, existing := range AllowedApplicationResourceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplicationResourceState value
func (v ApplicationResourceState) Ptr() *ApplicationResourceState {
	return &v
}

type NullableApplicationResourceState struct {
	value *ApplicationResourceState
	isSet bool
}

func (v NullableApplicationResourceState) Get() *ApplicationResourceState {
	return v.value
}

func (v *NullableApplicationResourceState) Set(val *ApplicationResourceState) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationResourceState) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationResourceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationResourceState(val *ApplicationResourceState) *NullableApplicationResourceState {
	return &NullableApplicationResourceState{value: val, isSet: true}
}

func (v NullableApplicationResourceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationResourceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

