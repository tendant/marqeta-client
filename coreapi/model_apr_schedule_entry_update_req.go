/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the AprScheduleEntryUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AprScheduleEntryUpdateReq{}

// AprScheduleEntryUpdateReq struct for AprScheduleEntryUpdateReq
type AprScheduleEntryUpdateReq struct {
	// Whether the APR can be ignored for the current billing cycle and applied on the next.
	ApplyNextCycle *bool `json:"apply_next_cycle,omitempty"`
	// Date and time when the APR goes into effect, in UTC.  If you do not include a date-time value, the system uses the date and time when the API request was received.  *NOTE:* When passing multiple `schedule` objects, this field is required in all objects but the first. If you do not include `effective_date` in the first `schedule`, the system uses the date and time when the API request was received.
	EffectiveDate *time.Time `json:"effective_date,omitempty"`
	// The number of percentage points added to the prime rate, used to calculate a variable value.  Used for variable values only.
	Margin *float32 `json:"margin,omitempty"`
	// Indicates whether the APR value is fixed or variable.
	Type *string `json:"type,omitempty"`
	// Percentage value of the APR.  If the APR type is `FIXED`, this is the value of the fixed rate. If the APR type is `VARIABLE`, the value is calculated by adding the margin to the prime rate that was stored on Marqeta's credit platform when your credit program was created.  When backdating an APR, this value cannot be greater than the value of the effective APR on the backdated date.
	Value float32 `json:"value"`
}

// NewAprScheduleEntryUpdateReq instantiates a new AprScheduleEntryUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAprScheduleEntryUpdateReq(value float32) *AprScheduleEntryUpdateReq {
	this := AprScheduleEntryUpdateReq{}
	var applyNextCycle bool = false
	this.ApplyNextCycle = &applyNextCycle
	var type_ string = "FIXED"
	this.Type = &type_
	this.Value = value
	return &this
}

// NewAprScheduleEntryUpdateReqWithDefaults instantiates a new AprScheduleEntryUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAprScheduleEntryUpdateReqWithDefaults() *AprScheduleEntryUpdateReq {
	this := AprScheduleEntryUpdateReq{}
	var applyNextCycle bool = false
	this.ApplyNextCycle = &applyNextCycle
	var type_ string = "FIXED"
	this.Type = &type_
	return &this
}

// GetApplyNextCycle returns the ApplyNextCycle field value if set, zero value otherwise.
func (o *AprScheduleEntryUpdateReq) GetApplyNextCycle() bool {
	if o == nil || IsNil(o.ApplyNextCycle) {
		var ret bool
		return ret
	}
	return *o.ApplyNextCycle
}

// GetApplyNextCycleOk returns a tuple with the ApplyNextCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AprScheduleEntryUpdateReq) GetApplyNextCycleOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyNextCycle) {
		return nil, false
	}
	return o.ApplyNextCycle, true
}

// HasApplyNextCycle returns a boolean if a field has been set.
func (o *AprScheduleEntryUpdateReq) HasApplyNextCycle() bool {
	if o != nil && !IsNil(o.ApplyNextCycle) {
		return true
	}

	return false
}

// SetApplyNextCycle gets a reference to the given bool and assigns it to the ApplyNextCycle field.
func (o *AprScheduleEntryUpdateReq) SetApplyNextCycle(v bool) {
	o.ApplyNextCycle = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *AprScheduleEntryUpdateReq) GetEffectiveDate() time.Time {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AprScheduleEntryUpdateReq) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *AprScheduleEntryUpdateReq) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *AprScheduleEntryUpdateReq) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetMargin returns the Margin field value if set, zero value otherwise.
func (o *AprScheduleEntryUpdateReq) GetMargin() float32 {
	if o == nil || IsNil(o.Margin) {
		var ret float32
		return ret
	}
	return *o.Margin
}

// GetMarginOk returns a tuple with the Margin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AprScheduleEntryUpdateReq) GetMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.Margin) {
		return nil, false
	}
	return o.Margin, true
}

// HasMargin returns a boolean if a field has been set.
func (o *AprScheduleEntryUpdateReq) HasMargin() bool {
	if o != nil && !IsNil(o.Margin) {
		return true
	}

	return false
}

// SetMargin gets a reference to the given float32 and assigns it to the Margin field.
func (o *AprScheduleEntryUpdateReq) SetMargin(v float32) {
	o.Margin = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AprScheduleEntryUpdateReq) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AprScheduleEntryUpdateReq) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AprScheduleEntryUpdateReq) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AprScheduleEntryUpdateReq) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value
func (o *AprScheduleEntryUpdateReq) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AprScheduleEntryUpdateReq) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AprScheduleEntryUpdateReq) SetValue(v float32) {
	o.Value = v
}

func (o AprScheduleEntryUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AprScheduleEntryUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplyNextCycle) {
		toSerialize["apply_next_cycle"] = o.ApplyNextCycle
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effective_date"] = o.EffectiveDate
	}
	if !IsNil(o.Margin) {
		toSerialize["margin"] = o.Margin
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableAprScheduleEntryUpdateReq struct {
	value *AprScheduleEntryUpdateReq
	isSet bool
}

func (v NullableAprScheduleEntryUpdateReq) Get() *AprScheduleEntryUpdateReq {
	return v.value
}

func (v *NullableAprScheduleEntryUpdateReq) Set(val *AprScheduleEntryUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableAprScheduleEntryUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableAprScheduleEntryUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAprScheduleEntryUpdateReq(val *AprScheduleEntryUpdateReq) *NullableAprScheduleEntryUpdateReq {
	return &NullableAprScheduleEntryUpdateReq{value: val, isSet: true}
}

func (v NullableAprScheduleEntryUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAprScheduleEntryUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


