/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the AtcInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AtcInformation{}

// AtcInformation struct for AtcInformation
type AtcInformation struct {
	AtcDiscrepancyIndicator *string `json:"atc_discrepancy_indicator,omitempty"`
	AtcDiscrepancyValue *float32 `json:"atc_discrepancy_value,omitempty"`
	AtcValue *float32 `json:"atc_value,omitempty"`
}

// NewAtcInformation instantiates a new AtcInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAtcInformation() *AtcInformation {
	this := AtcInformation{}
	return &this
}

// NewAtcInformationWithDefaults instantiates a new AtcInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAtcInformationWithDefaults() *AtcInformation {
	this := AtcInformation{}
	return &this
}

// GetAtcDiscrepancyIndicator returns the AtcDiscrepancyIndicator field value if set, zero value otherwise.
func (o *AtcInformation) GetAtcDiscrepancyIndicator() string {
	if o == nil || IsNil(o.AtcDiscrepancyIndicator) {
		var ret string
		return ret
	}
	return *o.AtcDiscrepancyIndicator
}

// GetAtcDiscrepancyIndicatorOk returns a tuple with the AtcDiscrepancyIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcInformation) GetAtcDiscrepancyIndicatorOk() (*string, bool) {
	if o == nil || IsNil(o.AtcDiscrepancyIndicator) {
		return nil, false
	}
	return o.AtcDiscrepancyIndicator, true
}

// HasAtcDiscrepancyIndicator returns a boolean if a field has been set.
func (o *AtcInformation) HasAtcDiscrepancyIndicator() bool {
	if o != nil && !IsNil(o.AtcDiscrepancyIndicator) {
		return true
	}

	return false
}

// SetAtcDiscrepancyIndicator gets a reference to the given string and assigns it to the AtcDiscrepancyIndicator field.
func (o *AtcInformation) SetAtcDiscrepancyIndicator(v string) {
	o.AtcDiscrepancyIndicator = &v
}

// GetAtcDiscrepancyValue returns the AtcDiscrepancyValue field value if set, zero value otherwise.
func (o *AtcInformation) GetAtcDiscrepancyValue() float32 {
	if o == nil || IsNil(o.AtcDiscrepancyValue) {
		var ret float32
		return ret
	}
	return *o.AtcDiscrepancyValue
}

// GetAtcDiscrepancyValueOk returns a tuple with the AtcDiscrepancyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcInformation) GetAtcDiscrepancyValueOk() (*float32, bool) {
	if o == nil || IsNil(o.AtcDiscrepancyValue) {
		return nil, false
	}
	return o.AtcDiscrepancyValue, true
}

// HasAtcDiscrepancyValue returns a boolean if a field has been set.
func (o *AtcInformation) HasAtcDiscrepancyValue() bool {
	if o != nil && !IsNil(o.AtcDiscrepancyValue) {
		return true
	}

	return false
}

// SetAtcDiscrepancyValue gets a reference to the given float32 and assigns it to the AtcDiscrepancyValue field.
func (o *AtcInformation) SetAtcDiscrepancyValue(v float32) {
	o.AtcDiscrepancyValue = &v
}

// GetAtcValue returns the AtcValue field value if set, zero value otherwise.
func (o *AtcInformation) GetAtcValue() float32 {
	if o == nil || IsNil(o.AtcValue) {
		var ret float32
		return ret
	}
	return *o.AtcValue
}

// GetAtcValueOk returns a tuple with the AtcValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtcInformation) GetAtcValueOk() (*float32, bool) {
	if o == nil || IsNil(o.AtcValue) {
		return nil, false
	}
	return o.AtcValue, true
}

// HasAtcValue returns a boolean if a field has been set.
func (o *AtcInformation) HasAtcValue() bool {
	if o != nil && !IsNil(o.AtcValue) {
		return true
	}

	return false
}

// SetAtcValue gets a reference to the given float32 and assigns it to the AtcValue field.
func (o *AtcInformation) SetAtcValue(v float32) {
	o.AtcValue = &v
}

func (o AtcInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AtcInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AtcDiscrepancyIndicator) {
		toSerialize["atc_discrepancy_indicator"] = o.AtcDiscrepancyIndicator
	}
	if !IsNil(o.AtcDiscrepancyValue) {
		toSerialize["atc_discrepancy_value"] = o.AtcDiscrepancyValue
	}
	if !IsNil(o.AtcValue) {
		toSerialize["atc_value"] = o.AtcValue
	}
	return toSerialize, nil
}

type NullableAtcInformation struct {
	value *AtcInformation
	isSet bool
}

func (v NullableAtcInformation) Get() *AtcInformation {
	return v.value
}

func (v *NullableAtcInformation) Set(val *AtcInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAtcInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAtcInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtcInformation(val *AtcInformation) *NullableAtcInformation {
	return &NullableAtcInformation{value: val, isSet: true}
}

func (v NullableAtcInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtcInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


