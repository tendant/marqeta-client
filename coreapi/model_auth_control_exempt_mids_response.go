/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"time"
)

// checks if the AuthControlExemptMidsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthControlExemptMidsResponse{}

// AuthControlExemptMidsResponse struct for AuthControlExemptMidsResponse
type AuthControlExemptMidsResponse struct {
	// Indicates whether the merchant identifier authorization control exception is active.  This field is returned if it exists in the resource.
	Active *bool `json:"active,omitempty"`
	Association *SpendControlAssociation `json:"association,omitempty"`
	// Date and time when the resource was created, in UTC.  This field is returned if it exists in the resource.
	Created *time.Time `json:"created,omitempty"`
	// Date and time when the exception ends, in UTC.  This field is returned if it exists in the resource.
	EndTime *time.Time `json:"end_time,omitempty"`
	// Date and time when the resource was last updated, in UTC.  This field is returned if it exists in the resource.
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	// Unique identifier of the merchant group to be exempted.  This field is returned if it exists in the resource.
	MerchantGroupToken *string `json:"merchant_group_token,omitempty"`
	// Merchant to be exempted.  This field is returned if it exists in the resource.
	Mid *string `json:"mid,omitempty"`
	// Name of the merchant identifier authorization control exemption.
	Name string `json:"name"`
	// Date and time when the exception starts, in UTC.  This field is returned if it exists in the resource.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Unique identifier of the merchant identifier authorization control exemption.  This field is always returned.
	Token *string `json:"token,omitempty"`
}

// NewAuthControlExemptMidsResponse instantiates a new AuthControlExemptMidsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthControlExemptMidsResponse(name string) *AuthControlExemptMidsResponse {
	this := AuthControlExemptMidsResponse{}
	var active bool = false
	this.Active = &active
	this.Name = name
	return &this
}

// NewAuthControlExemptMidsResponseWithDefaults instantiates a new AuthControlExemptMidsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthControlExemptMidsResponseWithDefaults() *AuthControlExemptMidsResponse {
	this := AuthControlExemptMidsResponse{}
	var active bool = false
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *AuthControlExemptMidsResponse) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *AuthControlExemptMidsResponse) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *AuthControlExemptMidsResponse) SetActive(v bool) {
	o.Active = &v
}

// GetAssociation returns the Association field value if set, zero value otherwise.
func (o *AuthControlExemptMidsResponse) GetAssociation() SpendControlAssociation {
	if o == nil || IsNil(o.Association) {
		var ret SpendControlAssociation
		return ret
	}
	return *o.Association
}

// GetAssociationOk returns a tuple with the Association field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetAssociationOk() (*SpendControlAssociation, bool) {
	if o == nil || IsNil(o.Association) {
		return nil, false
	}
	return o.Association, true
}

// HasAssociation returns a boolean if a field has been set.
func (o *AuthControlExemptMidsResponse) HasAssociation() bool {
	if o != nil && !IsNil(o.Association) {
		return true
	}

	return false
}

// SetAssociation gets a reference to the given SpendControlAssociation and assigns it to the Association field.
func (o *AuthControlExemptMidsResponse) SetAssociation(v SpendControlAssociation) {
	o.Association = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *AuthControlExemptMidsResponse) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *AuthControlExemptMidsResponse) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *AuthControlExemptMidsResponse) SetCreated(v time.Time) {
	o.Created = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *AuthControlExemptMidsResponse) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *AuthControlExemptMidsResponse) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *AuthControlExemptMidsResponse) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *AuthControlExemptMidsResponse) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *AuthControlExemptMidsResponse) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *AuthControlExemptMidsResponse) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetMerchantGroupToken returns the MerchantGroupToken field value if set, zero value otherwise.
func (o *AuthControlExemptMidsResponse) GetMerchantGroupToken() string {
	if o == nil || IsNil(o.MerchantGroupToken) {
		var ret string
		return ret
	}
	return *o.MerchantGroupToken
}

// GetMerchantGroupTokenOk returns a tuple with the MerchantGroupToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetMerchantGroupTokenOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantGroupToken) {
		return nil, false
	}
	return o.MerchantGroupToken, true
}

// HasMerchantGroupToken returns a boolean if a field has been set.
func (o *AuthControlExemptMidsResponse) HasMerchantGroupToken() bool {
	if o != nil && !IsNil(o.MerchantGroupToken) {
		return true
	}

	return false
}

// SetMerchantGroupToken gets a reference to the given string and assigns it to the MerchantGroupToken field.
func (o *AuthControlExemptMidsResponse) SetMerchantGroupToken(v string) {
	o.MerchantGroupToken = &v
}

// GetMid returns the Mid field value if set, zero value otherwise.
func (o *AuthControlExemptMidsResponse) GetMid() string {
	if o == nil || IsNil(o.Mid) {
		var ret string
		return ret
	}
	return *o.Mid
}

// GetMidOk returns a tuple with the Mid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetMidOk() (*string, bool) {
	if o == nil || IsNil(o.Mid) {
		return nil, false
	}
	return o.Mid, true
}

// HasMid returns a boolean if a field has been set.
func (o *AuthControlExemptMidsResponse) HasMid() bool {
	if o != nil && !IsNil(o.Mid) {
		return true
	}

	return false
}

// SetMid gets a reference to the given string and assigns it to the Mid field.
func (o *AuthControlExemptMidsResponse) SetMid(v string) {
	o.Mid = &v
}

// GetName returns the Name field value
func (o *AuthControlExemptMidsResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthControlExemptMidsResponse) SetName(v string) {
	o.Name = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *AuthControlExemptMidsResponse) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *AuthControlExemptMidsResponse) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *AuthControlExemptMidsResponse) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AuthControlExemptMidsResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlExemptMidsResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AuthControlExemptMidsResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *AuthControlExemptMidsResponse) SetToken(v string) {
	o.Token = &v
}

func (o AuthControlExemptMidsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthControlExemptMidsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Association) {
		toSerialize["association"] = o.Association
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.MerchantGroupToken) {
		toSerialize["merchant_group_token"] = o.MerchantGroupToken
	}
	if !IsNil(o.Mid) {
		toSerialize["mid"] = o.Mid
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableAuthControlExemptMidsResponse struct {
	value *AuthControlExemptMidsResponse
	isSet bool
}

func (v NullableAuthControlExemptMidsResponse) Get() *AuthControlExemptMidsResponse {
	return v.value
}

func (v *NullableAuthControlExemptMidsResponse) Set(val *AuthControlExemptMidsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthControlExemptMidsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthControlExemptMidsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthControlExemptMidsResponse(val *AuthControlExemptMidsResponse) *NullableAuthControlExemptMidsResponse {
	return &NullableAuthControlExemptMidsResponse{value: val, isSet: true}
}

func (v NullableAuthControlExemptMidsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthControlExemptMidsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


