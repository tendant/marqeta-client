/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the AuthControlMerchantScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthControlMerchantScope{}

// AuthControlMerchantScope Defines the group of merchants to which the authorization control applies. This object is required if the `association` object is not included in your request. Your request can include both the `merchant_scope` and `association` objects.  If you include this object in your request, you must populate one or more of its fields. If no fields are populated, the authorization control applies to all merchants.
type AuthControlMerchantScope struct {
	// Merchant Category Code (MCC). Identifies the type of goods or services provided by the merchant.  Enter a value to control access to a particular type of product or service.  See <</developer-guides/controlling-spending, Controlling Spending>> for links to more information about merchant category codes.
	Mcc *string `json:"mcc,omitempty"`
	// Token identifying a group of MCCs.  Enter a value to control access to a group of product or service types.
	MccGroup *string `json:"mcc_group,omitempty"`
	// Unique identifier of a merchant group.  Enter a value to control access to a group of merchants.
	MerchantGroupToken *string `json:"merchant_group_token,omitempty"`
	// Merchant identifier (MID). Identifies a specific merchant.  Enter a value to control access to a particular merchant.
	Mid *string `json:"mid,omitempty"`
}

// NewAuthControlMerchantScope instantiates a new AuthControlMerchantScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthControlMerchantScope() *AuthControlMerchantScope {
	this := AuthControlMerchantScope{}
	return &this
}

// NewAuthControlMerchantScopeWithDefaults instantiates a new AuthControlMerchantScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthControlMerchantScopeWithDefaults() *AuthControlMerchantScope {
	this := AuthControlMerchantScope{}
	return &this
}

// GetMcc returns the Mcc field value if set, zero value otherwise.
func (o *AuthControlMerchantScope) GetMcc() string {
	if o == nil || IsNil(o.Mcc) {
		var ret string
		return ret
	}
	return *o.Mcc
}

// GetMccOk returns a tuple with the Mcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlMerchantScope) GetMccOk() (*string, bool) {
	if o == nil || IsNil(o.Mcc) {
		return nil, false
	}
	return o.Mcc, true
}

// HasMcc returns a boolean if a field has been set.
func (o *AuthControlMerchantScope) HasMcc() bool {
	if o != nil && !IsNil(o.Mcc) {
		return true
	}

	return false
}

// SetMcc gets a reference to the given string and assigns it to the Mcc field.
func (o *AuthControlMerchantScope) SetMcc(v string) {
	o.Mcc = &v
}

// GetMccGroup returns the MccGroup field value if set, zero value otherwise.
func (o *AuthControlMerchantScope) GetMccGroup() string {
	if o == nil || IsNil(o.MccGroup) {
		var ret string
		return ret
	}
	return *o.MccGroup
}

// GetMccGroupOk returns a tuple with the MccGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlMerchantScope) GetMccGroupOk() (*string, bool) {
	if o == nil || IsNil(o.MccGroup) {
		return nil, false
	}
	return o.MccGroup, true
}

// HasMccGroup returns a boolean if a field has been set.
func (o *AuthControlMerchantScope) HasMccGroup() bool {
	if o != nil && !IsNil(o.MccGroup) {
		return true
	}

	return false
}

// SetMccGroup gets a reference to the given string and assigns it to the MccGroup field.
func (o *AuthControlMerchantScope) SetMccGroup(v string) {
	o.MccGroup = &v
}

// GetMerchantGroupToken returns the MerchantGroupToken field value if set, zero value otherwise.
func (o *AuthControlMerchantScope) GetMerchantGroupToken() string {
	if o == nil || IsNil(o.MerchantGroupToken) {
		var ret string
		return ret
	}
	return *o.MerchantGroupToken
}

// GetMerchantGroupTokenOk returns a tuple with the MerchantGroupToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlMerchantScope) GetMerchantGroupTokenOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantGroupToken) {
		return nil, false
	}
	return o.MerchantGroupToken, true
}

// HasMerchantGroupToken returns a boolean if a field has been set.
func (o *AuthControlMerchantScope) HasMerchantGroupToken() bool {
	if o != nil && !IsNil(o.MerchantGroupToken) {
		return true
	}

	return false
}

// SetMerchantGroupToken gets a reference to the given string and assigns it to the MerchantGroupToken field.
func (o *AuthControlMerchantScope) SetMerchantGroupToken(v string) {
	o.MerchantGroupToken = &v
}

// GetMid returns the Mid field value if set, zero value otherwise.
func (o *AuthControlMerchantScope) GetMid() string {
	if o == nil || IsNil(o.Mid) {
		var ret string
		return ret
	}
	return *o.Mid
}

// GetMidOk returns a tuple with the Mid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlMerchantScope) GetMidOk() (*string, bool) {
	if o == nil || IsNil(o.Mid) {
		return nil, false
	}
	return o.Mid, true
}

// HasMid returns a boolean if a field has been set.
func (o *AuthControlMerchantScope) HasMid() bool {
	if o != nil && !IsNil(o.Mid) {
		return true
	}

	return false
}

// SetMid gets a reference to the given string and assigns it to the Mid field.
func (o *AuthControlMerchantScope) SetMid(v string) {
	o.Mid = &v
}

func (o AuthControlMerchantScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthControlMerchantScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mcc) {
		toSerialize["mcc"] = o.Mcc
	}
	if !IsNil(o.MccGroup) {
		toSerialize["mcc_group"] = o.MccGroup
	}
	if !IsNil(o.MerchantGroupToken) {
		toSerialize["merchant_group_token"] = o.MerchantGroupToken
	}
	if !IsNil(o.Mid) {
		toSerialize["mid"] = o.Mid
	}
	return toSerialize, nil
}

type NullableAuthControlMerchantScope struct {
	value *AuthControlMerchantScope
	isSet bool
}

func (v NullableAuthControlMerchantScope) Get() *AuthControlMerchantScope {
	return v.value
}

func (v *NullableAuthControlMerchantScope) Set(val *AuthControlMerchantScope) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthControlMerchantScope) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthControlMerchantScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthControlMerchantScope(val *AuthControlMerchantScope) *NullableAuthControlMerchantScope {
	return &NullableAuthControlMerchantScope{value: val, isSet: true}
}

func (v NullableAuthControlMerchantScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthControlMerchantScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


