/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the AuthControlRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthControlRequest{}

// AuthControlRequest struct for AuthControlRequest
type AuthControlRequest struct {
	// Indicates whether the authorization control is active.
	Active *bool `json:"active,omitempty"`
	Association *SpendControlAssociation `json:"association,omitempty"`
	// Date and time when the exception ends, in UTC.
	EndTime *time.Time `json:"end_time,omitempty"`
	MerchantScope *AuthControlMerchantScope `json:"merchant_scope,omitempty"`
	// Name of the authorization control.
	Name string `json:"name"`
	// Date and time when the exception goes into effect, in UTC.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Unique identifier of the authorization control.  If you do not include a token, the system will generate one automatically. This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
	Token *string `json:"token,omitempty"`
}

// NewAuthControlRequest instantiates a new AuthControlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthControlRequest(name string) *AuthControlRequest {
	this := AuthControlRequest{}
	var active bool = true
	this.Active = &active
	this.Name = name
	return &this
}

// NewAuthControlRequestWithDefaults instantiates a new AuthControlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthControlRequestWithDefaults() *AuthControlRequest {
	this := AuthControlRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *AuthControlRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *AuthControlRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *AuthControlRequest) SetActive(v bool) {
	o.Active = &v
}

// GetAssociation returns the Association field value if set, zero value otherwise.
func (o *AuthControlRequest) GetAssociation() SpendControlAssociation {
	if o == nil || IsNil(o.Association) {
		var ret SpendControlAssociation
		return ret
	}
	return *o.Association
}

// GetAssociationOk returns a tuple with the Association field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlRequest) GetAssociationOk() (*SpendControlAssociation, bool) {
	if o == nil || IsNil(o.Association) {
		return nil, false
	}
	return o.Association, true
}

// HasAssociation returns a boolean if a field has been set.
func (o *AuthControlRequest) HasAssociation() bool {
	if o != nil && !IsNil(o.Association) {
		return true
	}

	return false
}

// SetAssociation gets a reference to the given SpendControlAssociation and assigns it to the Association field.
func (o *AuthControlRequest) SetAssociation(v SpendControlAssociation) {
	o.Association = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *AuthControlRequest) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlRequest) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *AuthControlRequest) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *AuthControlRequest) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetMerchantScope returns the MerchantScope field value if set, zero value otherwise.
func (o *AuthControlRequest) GetMerchantScope() AuthControlMerchantScope {
	if o == nil || IsNil(o.MerchantScope) {
		var ret AuthControlMerchantScope
		return ret
	}
	return *o.MerchantScope
}

// GetMerchantScopeOk returns a tuple with the MerchantScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlRequest) GetMerchantScopeOk() (*AuthControlMerchantScope, bool) {
	if o == nil || IsNil(o.MerchantScope) {
		return nil, false
	}
	return o.MerchantScope, true
}

// HasMerchantScope returns a boolean if a field has been set.
func (o *AuthControlRequest) HasMerchantScope() bool {
	if o != nil && !IsNil(o.MerchantScope) {
		return true
	}

	return false
}

// SetMerchantScope gets a reference to the given AuthControlMerchantScope and assigns it to the MerchantScope field.
func (o *AuthControlRequest) SetMerchantScope(v AuthControlMerchantScope) {
	o.MerchantScope = &v
}

// GetName returns the Name field value
func (o *AuthControlRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthControlRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthControlRequest) SetName(v string) {
	o.Name = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *AuthControlRequest) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlRequest) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *AuthControlRequest) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *AuthControlRequest) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AuthControlRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthControlRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AuthControlRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *AuthControlRequest) SetToken(v string) {
	o.Token = &v
}

func (o AuthControlRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthControlRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Association) {
		toSerialize["association"] = o.Association
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.MerchantScope) {
		toSerialize["merchant_scope"] = o.MerchantScope
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableAuthControlRequest struct {
	value *AuthControlRequest
	isSet bool
}

func (v NullableAuthControlRequest) Get() *AuthControlRequest {
	return v.value
}

func (v *NullableAuthControlRequest) Set(val *AuthControlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthControlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthControlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthControlRequest(val *AuthControlRequest) *NullableAuthControlRequest {
	return &NullableAuthControlRequest{value: val, isSet: true}
}

func (v NullableAuthControlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthControlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


