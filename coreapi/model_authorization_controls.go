/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the AuthorizationControls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationControls{}

// AuthorizationControls Controls the expiration of authorizations and automatic increases to the authorization amount for MCCs specified in this group.  By default, these authorization controls apply program-wide, meaning that they apply to every card in your program. You can, however, exempt cards associated with any particular card product by setting that card product's `allow_mcc_group_authorization_controls` field to `false`.
type AuthorizationControls struct {
	// Specifies the number of days after which an authorization associated with this group expires.
	HoldExpirationDays *int32 `json:"hold_expiration_days,omitempty"`
	HoldIncrease *HoldIncrease `json:"hold_increase,omitempty"`
}

// NewAuthorizationControls instantiates a new AuthorizationControls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationControls() *AuthorizationControls {
	this := AuthorizationControls{}
	var holdExpirationDays int32 = 7
	this.HoldExpirationDays = &holdExpirationDays
	return &this
}

// NewAuthorizationControlsWithDefaults instantiates a new AuthorizationControls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationControlsWithDefaults() *AuthorizationControls {
	this := AuthorizationControls{}
	var holdExpirationDays int32 = 7
	this.HoldExpirationDays = &holdExpirationDays
	return &this
}

// GetHoldExpirationDays returns the HoldExpirationDays field value if set, zero value otherwise.
func (o *AuthorizationControls) GetHoldExpirationDays() int32 {
	if o == nil || IsNil(o.HoldExpirationDays) {
		var ret int32
		return ret
	}
	return *o.HoldExpirationDays
}

// GetHoldExpirationDaysOk returns a tuple with the HoldExpirationDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationControls) GetHoldExpirationDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.HoldExpirationDays) {
		return nil, false
	}
	return o.HoldExpirationDays, true
}

// HasHoldExpirationDays returns a boolean if a field has been set.
func (o *AuthorizationControls) HasHoldExpirationDays() bool {
	if o != nil && !IsNil(o.HoldExpirationDays) {
		return true
	}

	return false
}

// SetHoldExpirationDays gets a reference to the given int32 and assigns it to the HoldExpirationDays field.
func (o *AuthorizationControls) SetHoldExpirationDays(v int32) {
	o.HoldExpirationDays = &v
}

// GetHoldIncrease returns the HoldIncrease field value if set, zero value otherwise.
func (o *AuthorizationControls) GetHoldIncrease() HoldIncrease {
	if o == nil || IsNil(o.HoldIncrease) {
		var ret HoldIncrease
		return ret
	}
	return *o.HoldIncrease
}

// GetHoldIncreaseOk returns a tuple with the HoldIncrease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizationControls) GetHoldIncreaseOk() (*HoldIncrease, bool) {
	if o == nil || IsNil(o.HoldIncrease) {
		return nil, false
	}
	return o.HoldIncrease, true
}

// HasHoldIncrease returns a boolean if a field has been set.
func (o *AuthorizationControls) HasHoldIncrease() bool {
	if o != nil && !IsNil(o.HoldIncrease) {
		return true
	}

	return false
}

// SetHoldIncrease gets a reference to the given HoldIncrease and assigns it to the HoldIncrease field.
func (o *AuthorizationControls) SetHoldIncrease(v HoldIncrease) {
	o.HoldIncrease = &v
}

func (o AuthorizationControls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationControls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HoldExpirationDays) {
		toSerialize["hold_expiration_days"] = o.HoldExpirationDays
	}
	if !IsNil(o.HoldIncrease) {
		toSerialize["hold_increase"] = o.HoldIncrease
	}
	return toSerialize, nil
}

type NullableAuthorizationControls struct {
	value *AuthorizationControls
	isSet bool
}

func (v NullableAuthorizationControls) Get() *AuthorizationControls {
	return v.value
}

func (v *NullableAuthorizationControls) Set(val *AuthorizationControls) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationControls) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationControls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationControls(val *AuthorizationControls) *NullableAuthorizationControls {
	return &NullableAuthorizationControls{value: val, isSet: true}
}

func (v NullableAuthorizationControls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationControls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


