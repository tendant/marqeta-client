/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the AvsControls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvsControls{}

// AvsControls struct for AvsControls
type AvsControls struct {
	AuthMessages *AvsControlOptions `json:"auth_messages,omitempty"`
	AvMessages *AvsControlOptions `json:"av_messages,omitempty"`
}

// NewAvsControls instantiates a new AvsControls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvsControls() *AvsControls {
	this := AvsControls{}
	return &this
}

// NewAvsControlsWithDefaults instantiates a new AvsControls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvsControlsWithDefaults() *AvsControls {
	this := AvsControls{}
	return &this
}

// GetAuthMessages returns the AuthMessages field value if set, zero value otherwise.
func (o *AvsControls) GetAuthMessages() AvsControlOptions {
	if o == nil || IsNil(o.AuthMessages) {
		var ret AvsControlOptions
		return ret
	}
	return *o.AuthMessages
}

// GetAuthMessagesOk returns a tuple with the AuthMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvsControls) GetAuthMessagesOk() (*AvsControlOptions, bool) {
	if o == nil || IsNil(o.AuthMessages) {
		return nil, false
	}
	return o.AuthMessages, true
}

// HasAuthMessages returns a boolean if a field has been set.
func (o *AvsControls) HasAuthMessages() bool {
	if o != nil && !IsNil(o.AuthMessages) {
		return true
	}

	return false
}

// SetAuthMessages gets a reference to the given AvsControlOptions and assigns it to the AuthMessages field.
func (o *AvsControls) SetAuthMessages(v AvsControlOptions) {
	o.AuthMessages = &v
}

// GetAvMessages returns the AvMessages field value if set, zero value otherwise.
func (o *AvsControls) GetAvMessages() AvsControlOptions {
	if o == nil || IsNil(o.AvMessages) {
		var ret AvsControlOptions
		return ret
	}
	return *o.AvMessages
}

// GetAvMessagesOk returns a tuple with the AvMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvsControls) GetAvMessagesOk() (*AvsControlOptions, bool) {
	if o == nil || IsNil(o.AvMessages) {
		return nil, false
	}
	return o.AvMessages, true
}

// HasAvMessages returns a boolean if a field has been set.
func (o *AvsControls) HasAvMessages() bool {
	if o != nil && !IsNil(o.AvMessages) {
		return true
	}

	return false
}

// SetAvMessages gets a reference to the given AvsControlOptions and assigns it to the AvMessages field.
func (o *AvsControls) SetAvMessages(v AvsControlOptions) {
	o.AvMessages = &v
}

func (o AvsControls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvsControls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthMessages) {
		toSerialize["auth_messages"] = o.AuthMessages
	}
	if !IsNil(o.AvMessages) {
		toSerialize["av_messages"] = o.AvMessages
	}
	return toSerialize, nil
}

type NullableAvsControls struct {
	value *AvsControls
	isSet bool
}

func (v NullableAvsControls) Get() *AvsControls {
	return v.value
}

func (v *NullableAvsControls) Set(val *AvsControls) {
	v.value = val
	v.isSet = true
}

func (v NullableAvsControls) IsSet() bool {
	return v.isSet
}

func (v *NullableAvsControls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvsControls(val *AvsControls) *NullableAvsControls {
	return &NullableAvsControls{value: val, isSet: true}
}

func (v NullableAvsControls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvsControls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


