/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the BankTransferTransitionRequestModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BankTransferTransitionRequestModel{}

// BankTransferTransitionRequestModel struct for BankTransferTransitionRequestModel
type BankTransferTransitionRequestModel struct {
	Amount *float32 `json:"amount,omitempty"`
	// Token of the ACH transfer you want to transition.
	BankTransferToken string `json:"bank_transfer_token"`
	// Field required in older versions of the API, but no longer used.
	BatchNumber *string `json:"batch_number,omitempty"`
	// Mechanism by which the transaction was initiated.
	Channel string `json:"channel"`
	EffectiveDate *time.Time `json:"effective_date,omitempty"`
	// Not currently used.
	ProgramReserveToken *string `json:"program_reserve_token,omitempty"`
	// Description of why the ACH transfer status was updated.
	Reason *string `json:"reason,omitempty"`
	// Standardized ACH return code for a returned transaction, generally sent by the RDFI.  Transactions can be returned for any of the reasons listed in the <</developer-guides/ach-origination#_nacha_ach_return_codes, NACHA ACH return codes table>> of the ACH Origination Guide.
	ReturnCode *string `json:"return_code,omitempty"`
	ReversalAfter45Days *bool `json:"reversal_after_45_days,omitempty"`
	// New state of the ACH transfer.  *NOTE:* In production environments, the only value to which you are allowed to transition an ACH transfer is `CANCELLED`.
	Status string `json:"status"`
	// Unique identifier of the bank transfer transition request.
	Token *string `json:"token,omitempty"`
}

// NewBankTransferTransitionRequestModel instantiates a new BankTransferTransitionRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankTransferTransitionRequestModel(bankTransferToken string, channel string, status string) *BankTransferTransitionRequestModel {
	this := BankTransferTransitionRequestModel{}
	this.BankTransferToken = bankTransferToken
	this.Channel = channel
	this.Status = status
	return &this
}

// NewBankTransferTransitionRequestModelWithDefaults instantiates a new BankTransferTransitionRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankTransferTransitionRequestModelWithDefaults() *BankTransferTransitionRequestModel {
	this := BankTransferTransitionRequestModel{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BankTransferTransitionRequestModel) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BankTransferTransitionRequestModel) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *BankTransferTransitionRequestModel) SetAmount(v float32) {
	o.Amount = &v
}

// GetBankTransferToken returns the BankTransferToken field value
func (o *BankTransferTransitionRequestModel) GetBankTransferToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BankTransferToken
}

// GetBankTransferTokenOk returns a tuple with the BankTransferToken field value
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetBankTransferTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BankTransferToken, true
}

// SetBankTransferToken sets field value
func (o *BankTransferTransitionRequestModel) SetBankTransferToken(v string) {
	o.BankTransferToken = v
}

// GetBatchNumber returns the BatchNumber field value if set, zero value otherwise.
func (o *BankTransferTransitionRequestModel) GetBatchNumber() string {
	if o == nil || IsNil(o.BatchNumber) {
		var ret string
		return ret
	}
	return *o.BatchNumber
}

// GetBatchNumberOk returns a tuple with the BatchNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetBatchNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BatchNumber) {
		return nil, false
	}
	return o.BatchNumber, true
}

// HasBatchNumber returns a boolean if a field has been set.
func (o *BankTransferTransitionRequestModel) HasBatchNumber() bool {
	if o != nil && !IsNil(o.BatchNumber) {
		return true
	}

	return false
}

// SetBatchNumber gets a reference to the given string and assigns it to the BatchNumber field.
func (o *BankTransferTransitionRequestModel) SetBatchNumber(v string) {
	o.BatchNumber = &v
}

// GetChannel returns the Channel field value
func (o *BankTransferTransitionRequestModel) GetChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *BankTransferTransitionRequestModel) SetChannel(v string) {
	o.Channel = v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *BankTransferTransitionRequestModel) GetEffectiveDate() time.Time {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *BankTransferTransitionRequestModel) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *BankTransferTransitionRequestModel) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetProgramReserveToken returns the ProgramReserveToken field value if set, zero value otherwise.
func (o *BankTransferTransitionRequestModel) GetProgramReserveToken() string {
	if o == nil || IsNil(o.ProgramReserveToken) {
		var ret string
		return ret
	}
	return *o.ProgramReserveToken
}

// GetProgramReserveTokenOk returns a tuple with the ProgramReserveToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetProgramReserveTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ProgramReserveToken) {
		return nil, false
	}
	return o.ProgramReserveToken, true
}

// HasProgramReserveToken returns a boolean if a field has been set.
func (o *BankTransferTransitionRequestModel) HasProgramReserveToken() bool {
	if o != nil && !IsNil(o.ProgramReserveToken) {
		return true
	}

	return false
}

// SetProgramReserveToken gets a reference to the given string and assigns it to the ProgramReserveToken field.
func (o *BankTransferTransitionRequestModel) SetProgramReserveToken(v string) {
	o.ProgramReserveToken = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *BankTransferTransitionRequestModel) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *BankTransferTransitionRequestModel) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *BankTransferTransitionRequestModel) SetReason(v string) {
	o.Reason = &v
}

// GetReturnCode returns the ReturnCode field value if set, zero value otherwise.
func (o *BankTransferTransitionRequestModel) GetReturnCode() string {
	if o == nil || IsNil(o.ReturnCode) {
		var ret string
		return ret
	}
	return *o.ReturnCode
}

// GetReturnCodeOk returns a tuple with the ReturnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetReturnCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnCode) {
		return nil, false
	}
	return o.ReturnCode, true
}

// HasReturnCode returns a boolean if a field has been set.
func (o *BankTransferTransitionRequestModel) HasReturnCode() bool {
	if o != nil && !IsNil(o.ReturnCode) {
		return true
	}

	return false
}

// SetReturnCode gets a reference to the given string and assigns it to the ReturnCode field.
func (o *BankTransferTransitionRequestModel) SetReturnCode(v string) {
	o.ReturnCode = &v
}

// GetReversalAfter45Days returns the ReversalAfter45Days field value if set, zero value otherwise.
func (o *BankTransferTransitionRequestModel) GetReversalAfter45Days() bool {
	if o == nil || IsNil(o.ReversalAfter45Days) {
		var ret bool
		return ret
	}
	return *o.ReversalAfter45Days
}

// GetReversalAfter45DaysOk returns a tuple with the ReversalAfter45Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetReversalAfter45DaysOk() (*bool, bool) {
	if o == nil || IsNil(o.ReversalAfter45Days) {
		return nil, false
	}
	return o.ReversalAfter45Days, true
}

// HasReversalAfter45Days returns a boolean if a field has been set.
func (o *BankTransferTransitionRequestModel) HasReversalAfter45Days() bool {
	if o != nil && !IsNil(o.ReversalAfter45Days) {
		return true
	}

	return false
}

// SetReversalAfter45Days gets a reference to the given bool and assigns it to the ReversalAfter45Days field.
func (o *BankTransferTransitionRequestModel) SetReversalAfter45Days(v bool) {
	o.ReversalAfter45Days = &v
}

// GetStatus returns the Status field value
func (o *BankTransferTransitionRequestModel) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BankTransferTransitionRequestModel) SetStatus(v string) {
	o.Status = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *BankTransferTransitionRequestModel) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankTransferTransitionRequestModel) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *BankTransferTransitionRequestModel) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *BankTransferTransitionRequestModel) SetToken(v string) {
	o.Token = &v
}

func (o BankTransferTransitionRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankTransferTransitionRequestModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	toSerialize["bank_transfer_token"] = o.BankTransferToken
	if !IsNil(o.BatchNumber) {
		toSerialize["batch_number"] = o.BatchNumber
	}
	toSerialize["channel"] = o.Channel
	if !IsNil(o.EffectiveDate) {
		toSerialize["effective_date"] = o.EffectiveDate
	}
	if !IsNil(o.ProgramReserveToken) {
		toSerialize["program_reserve_token"] = o.ProgramReserveToken
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.ReturnCode) {
		toSerialize["return_code"] = o.ReturnCode
	}
	if !IsNil(o.ReversalAfter45Days) {
		toSerialize["reversal_after_45_days"] = o.ReversalAfter45Days
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableBankTransferTransitionRequestModel struct {
	value *BankTransferTransitionRequestModel
	isSet bool
}

func (v NullableBankTransferTransitionRequestModel) Get() *BankTransferTransitionRequestModel {
	return v.value
}

func (v *NullableBankTransferTransitionRequestModel) Set(val *BankTransferTransitionRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBankTransferTransitionRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBankTransferTransitionRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankTransferTransitionRequestModel(val *BankTransferTransitionRequestModel) *NullableBankTransferTransitionRequestModel {
	return &NullableBankTransferTransitionRequestModel{value: val, isSet: true}
}

func (v NullableBankTransferTransitionRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankTransferTransitionRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


