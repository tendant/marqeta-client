/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the BillingAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingAddress{}

// BillingAddress struct for BillingAddress
type BillingAddress struct {
	Address *string `json:"address,omitempty"`
	CompressedZip *string `json:"compressed_zip,omitempty"`
	FirstName *string `json:"first_name,omitempty"`
	LastName *string `json:"last_name,omitempty"`
	Zip *string `json:"zip,omitempty"`
}

// NewBillingAddress instantiates a new BillingAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingAddress() *BillingAddress {
	this := BillingAddress{}
	return &this
}

// NewBillingAddressWithDefaults instantiates a new BillingAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingAddressWithDefaults() *BillingAddress {
	this := BillingAddress{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *BillingAddress) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddress) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *BillingAddress) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *BillingAddress) SetAddress(v string) {
	o.Address = &v
}

// GetCompressedZip returns the CompressedZip field value if set, zero value otherwise.
func (o *BillingAddress) GetCompressedZip() string {
	if o == nil || IsNil(o.CompressedZip) {
		var ret string
		return ret
	}
	return *o.CompressedZip
}

// GetCompressedZipOk returns a tuple with the CompressedZip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddress) GetCompressedZipOk() (*string, bool) {
	if o == nil || IsNil(o.CompressedZip) {
		return nil, false
	}
	return o.CompressedZip, true
}

// HasCompressedZip returns a boolean if a field has been set.
func (o *BillingAddress) HasCompressedZip() bool {
	if o != nil && !IsNil(o.CompressedZip) {
		return true
	}

	return false
}

// SetCompressedZip gets a reference to the given string and assigns it to the CompressedZip field.
func (o *BillingAddress) SetCompressedZip(v string) {
	o.CompressedZip = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *BillingAddress) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddress) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *BillingAddress) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *BillingAddress) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *BillingAddress) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddress) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *BillingAddress) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *BillingAddress) SetLastName(v string) {
	o.LastName = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *BillingAddress) GetZip() string {
	if o == nil || IsNil(o.Zip) {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingAddress) GetZipOk() (*string, bool) {
	if o == nil || IsNil(o.Zip) {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *BillingAddress) HasZip() bool {
	if o != nil && !IsNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *BillingAddress) SetZip(v string) {
	o.Zip = &v
}

func (o BillingAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.CompressedZip) {
		toSerialize["compressed_zip"] = o.CompressedZip
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.Zip) {
		toSerialize["zip"] = o.Zip
	}
	return toSerialize, nil
}

type NullableBillingAddress struct {
	value *BillingAddress
	isSet bool
}

func (v NullableBillingAddress) Get() *BillingAddress {
	return v.value
}

func (v *NullableBillingAddress) Set(val *BillingAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingAddress(val *BillingAddress) *NullableBillingAddress {
	return &NullableBillingAddress{value: val, isSet: true}
}

func (v NullableBillingAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


