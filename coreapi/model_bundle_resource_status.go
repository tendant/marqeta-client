/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// BundleResourceStatus Status of the bundle.  * `DRAFT` - The bundle is in the process of being created. * `PENDING_APPROVAL` - The bundle has been created and is awaiting approval. * `SENT_FOR_REVISION` - The bundle has been returned for revision. * `ACTIVE` - The bundle is active. * `REJECTED` - The bundle has been rejected; this status cannot be changed. * `ARCHIVED` - The previously active bundle has been archived. * `APPROVED` - The bundle has been approved (after having been sent for approval).
type BundleResourceStatus string

// List of BundleResourceStatus
const (
	BUNDLERESOURCESTATUS_DRAFT BundleResourceStatus = "DRAFT"
	BUNDLERESOURCESTATUS_PENDING_APPROVAL BundleResourceStatus = "PENDING_APPROVAL"
	BUNDLERESOURCESTATUS_SENT_FOR_REVISION BundleResourceStatus = "SENT_FOR_REVISION"
	BUNDLERESOURCESTATUS_ACTIVE BundleResourceStatus = "ACTIVE"
	BUNDLERESOURCESTATUS_REJECTED BundleResourceStatus = "REJECTED"
	BUNDLERESOURCESTATUS_ARCHIVED BundleResourceStatus = "ARCHIVED"
	BUNDLERESOURCESTATUS_APPROVED BundleResourceStatus = "APPROVED"
)

// All allowed values of BundleResourceStatus enum
var AllowedBundleResourceStatusEnumValues = []BundleResourceStatus{
	"DRAFT",
	"PENDING_APPROVAL",
	"SENT_FOR_REVISION",
	"ACTIVE",
	"REJECTED",
	"ARCHIVED",
	"APPROVED",
}

func (v *BundleResourceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BundleResourceStatus(value)
	for _, existing := range AllowedBundleResourceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BundleResourceStatus", value)
}

// NewBundleResourceStatusFromValue returns a pointer to a valid BundleResourceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBundleResourceStatusFromValue(v string) (*BundleResourceStatus, error) {
	ev := BundleResourceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BundleResourceStatus: valid values are %v", v, AllowedBundleResourceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BundleResourceStatus) IsValid() bool {
	for _, existing := range AllowedBundleResourceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BundleResourceStatus value
func (v BundleResourceStatus) Ptr() *BundleResourceStatus {
	return &v
}

type NullableBundleResourceStatus struct {
	value *BundleResourceStatus
	isSet bool
}

func (v NullableBundleResourceStatus) Get() *BundleResourceStatus {
	return v.value
}

func (v *NullableBundleResourceStatus) Set(val *BundleResourceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBundleResourceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBundleResourceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBundleResourceStatus(val *BundleResourceStatus) *NullableBundleResourceStatus {
	return &NullableBundleResourceStatus{value: val, isSet: true}
}

func (v NullableBundleResourceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBundleResourceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

