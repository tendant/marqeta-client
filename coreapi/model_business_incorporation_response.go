/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the BusinessIncorporationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessIncorporationResponse{}

// BusinessIncorporationResponse Contains information about the organizational structure of the business.
type BusinessIncorporationResponse struct {
	AddressRegisteredUnder *AddressResponseModel `json:"address_registered_under,omitempty"`
	// Organizational structure of the business (corporation or sole proprietorship, for example).  This field is returned if it exists in the resource.
	IncorporationType *string `json:"incorporation_type,omitempty"`
	// A value of `true` indicates that the business is publicly held.  This field is returned if it exists in the resource.
	IsPublic *bool `json:"is_public,omitempty"`
	// Name under which the business is registered.  This field is returned if it exists in the resource.
	NameRegisteredUnder *string `json:"name_registered_under,omitempty"`
	// State where the business is incorporated.  This field is returned if it exists in the resource.
	StateOfIncorporation *string `json:"state_of_incorporation,omitempty"`
	// Stock symbol associated with the business.  This field is returned if it exists in the resource.
	StockSymbol *string `json:"stock_symbol,omitempty"`
}

// NewBusinessIncorporationResponse instantiates a new BusinessIncorporationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessIncorporationResponse() *BusinessIncorporationResponse {
	this := BusinessIncorporationResponse{}
	var isPublic bool = false
	this.IsPublic = &isPublic
	return &this
}

// NewBusinessIncorporationResponseWithDefaults instantiates a new BusinessIncorporationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessIncorporationResponseWithDefaults() *BusinessIncorporationResponse {
	this := BusinessIncorporationResponse{}
	var isPublic bool = false
	this.IsPublic = &isPublic
	return &this
}

// GetAddressRegisteredUnder returns the AddressRegisteredUnder field value if set, zero value otherwise.
func (o *BusinessIncorporationResponse) GetAddressRegisteredUnder() AddressResponseModel {
	if o == nil || IsNil(o.AddressRegisteredUnder) {
		var ret AddressResponseModel
		return ret
	}
	return *o.AddressRegisteredUnder
}

// GetAddressRegisteredUnderOk returns a tuple with the AddressRegisteredUnder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessIncorporationResponse) GetAddressRegisteredUnderOk() (*AddressResponseModel, bool) {
	if o == nil || IsNil(o.AddressRegisteredUnder) {
		return nil, false
	}
	return o.AddressRegisteredUnder, true
}

// HasAddressRegisteredUnder returns a boolean if a field has been set.
func (o *BusinessIncorporationResponse) HasAddressRegisteredUnder() bool {
	if o != nil && !IsNil(o.AddressRegisteredUnder) {
		return true
	}

	return false
}

// SetAddressRegisteredUnder gets a reference to the given AddressResponseModel and assigns it to the AddressRegisteredUnder field.
func (o *BusinessIncorporationResponse) SetAddressRegisteredUnder(v AddressResponseModel) {
	o.AddressRegisteredUnder = &v
}

// GetIncorporationType returns the IncorporationType field value if set, zero value otherwise.
func (o *BusinessIncorporationResponse) GetIncorporationType() string {
	if o == nil || IsNil(o.IncorporationType) {
		var ret string
		return ret
	}
	return *o.IncorporationType
}

// GetIncorporationTypeOk returns a tuple with the IncorporationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessIncorporationResponse) GetIncorporationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IncorporationType) {
		return nil, false
	}
	return o.IncorporationType, true
}

// HasIncorporationType returns a boolean if a field has been set.
func (o *BusinessIncorporationResponse) HasIncorporationType() bool {
	if o != nil && !IsNil(o.IncorporationType) {
		return true
	}

	return false
}

// SetIncorporationType gets a reference to the given string and assigns it to the IncorporationType field.
func (o *BusinessIncorporationResponse) SetIncorporationType(v string) {
	o.IncorporationType = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *BusinessIncorporationResponse) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessIncorporationResponse) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *BusinessIncorporationResponse) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *BusinessIncorporationResponse) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetNameRegisteredUnder returns the NameRegisteredUnder field value if set, zero value otherwise.
func (o *BusinessIncorporationResponse) GetNameRegisteredUnder() string {
	if o == nil || IsNil(o.NameRegisteredUnder) {
		var ret string
		return ret
	}
	return *o.NameRegisteredUnder
}

// GetNameRegisteredUnderOk returns a tuple with the NameRegisteredUnder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessIncorporationResponse) GetNameRegisteredUnderOk() (*string, bool) {
	if o == nil || IsNil(o.NameRegisteredUnder) {
		return nil, false
	}
	return o.NameRegisteredUnder, true
}

// HasNameRegisteredUnder returns a boolean if a field has been set.
func (o *BusinessIncorporationResponse) HasNameRegisteredUnder() bool {
	if o != nil && !IsNil(o.NameRegisteredUnder) {
		return true
	}

	return false
}

// SetNameRegisteredUnder gets a reference to the given string and assigns it to the NameRegisteredUnder field.
func (o *BusinessIncorporationResponse) SetNameRegisteredUnder(v string) {
	o.NameRegisteredUnder = &v
}

// GetStateOfIncorporation returns the StateOfIncorporation field value if set, zero value otherwise.
func (o *BusinessIncorporationResponse) GetStateOfIncorporation() string {
	if o == nil || IsNil(o.StateOfIncorporation) {
		var ret string
		return ret
	}
	return *o.StateOfIncorporation
}

// GetStateOfIncorporationOk returns a tuple with the StateOfIncorporation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessIncorporationResponse) GetStateOfIncorporationOk() (*string, bool) {
	if o == nil || IsNil(o.StateOfIncorporation) {
		return nil, false
	}
	return o.StateOfIncorporation, true
}

// HasStateOfIncorporation returns a boolean if a field has been set.
func (o *BusinessIncorporationResponse) HasStateOfIncorporation() bool {
	if o != nil && !IsNil(o.StateOfIncorporation) {
		return true
	}

	return false
}

// SetStateOfIncorporation gets a reference to the given string and assigns it to the StateOfIncorporation field.
func (o *BusinessIncorporationResponse) SetStateOfIncorporation(v string) {
	o.StateOfIncorporation = &v
}

// GetStockSymbol returns the StockSymbol field value if set, zero value otherwise.
func (o *BusinessIncorporationResponse) GetStockSymbol() string {
	if o == nil || IsNil(o.StockSymbol) {
		var ret string
		return ret
	}
	return *o.StockSymbol
}

// GetStockSymbolOk returns a tuple with the StockSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessIncorporationResponse) GetStockSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.StockSymbol) {
		return nil, false
	}
	return o.StockSymbol, true
}

// HasStockSymbol returns a boolean if a field has been set.
func (o *BusinessIncorporationResponse) HasStockSymbol() bool {
	if o != nil && !IsNil(o.StockSymbol) {
		return true
	}

	return false
}

// SetStockSymbol gets a reference to the given string and assigns it to the StockSymbol field.
func (o *BusinessIncorporationResponse) SetStockSymbol(v string) {
	o.StockSymbol = &v
}

func (o BusinessIncorporationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessIncorporationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressRegisteredUnder) {
		toSerialize["address_registered_under"] = o.AddressRegisteredUnder
	}
	if !IsNil(o.IncorporationType) {
		toSerialize["incorporation_type"] = o.IncorporationType
	}
	if !IsNil(o.IsPublic) {
		toSerialize["is_public"] = o.IsPublic
	}
	if !IsNil(o.NameRegisteredUnder) {
		toSerialize["name_registered_under"] = o.NameRegisteredUnder
	}
	if !IsNil(o.StateOfIncorporation) {
		toSerialize["state_of_incorporation"] = o.StateOfIncorporation
	}
	if !IsNil(o.StockSymbol) {
		toSerialize["stock_symbol"] = o.StockSymbol
	}
	return toSerialize, nil
}

type NullableBusinessIncorporationResponse struct {
	value *BusinessIncorporationResponse
	isSet bool
}

func (v NullableBusinessIncorporationResponse) Get() *BusinessIncorporationResponse {
	return v.value
}

func (v *NullableBusinessIncorporationResponse) Set(val *BusinessIncorporationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessIncorporationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessIncorporationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessIncorporationResponse(val *BusinessIncorporationResponse) *NullableBusinessIncorporationResponse {
	return &NullableBusinessIncorporationResponse{value: val, isSet: true}
}

func (v NullableBusinessIncorporationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessIncorporationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


