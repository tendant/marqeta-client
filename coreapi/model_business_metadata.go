/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the BusinessMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessMetadata{}

// BusinessMetadata Contains customer-provided information about the business that funded the transaction.
type BusinessMetadata struct {
	// Associates customer-provided metadata with the business.
	Metadata *map[string]string `json:"metadata,omitempty"`
}

// NewBusinessMetadata instantiates a new BusinessMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessMetadata() *BusinessMetadata {
	this := BusinessMetadata{}
	return &this
}

// NewBusinessMetadataWithDefaults instantiates a new BusinessMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessMetadataWithDefaults() *BusinessMetadata {
	this := BusinessMetadata{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *BusinessMetadata) GetMetadata() map[string]string {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMetadata) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *BusinessMetadata) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *BusinessMetadata) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

func (o BusinessMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableBusinessMetadata struct {
	value *BusinessMetadata
	isSet bool
}

func (v NullableBusinessMetadata) Get() *BusinessMetadata {
	return v.value
}

func (v *NullableBusinessMetadata) Set(val *BusinessMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessMetadata(val *BusinessMetadata) *NullableBusinessMetadata {
	return &NullableBusinessMetadata{value: val, isSet: true}
}

func (v NullableBusinessMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


