/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the BusinessTransitionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessTransitionRequest{}

// BusinessTransitionRequest struct for BusinessTransitionRequest
type BusinessTransitionRequest struct {
	// Unique identifier of the business whose status you want to transition.
	BusinessToken string `json:"business_token"`
	// Mechanism by which the transaction was initiated.
	Channel string `json:"channel"`
	// Unique hashed value that identifies subsequent submissions of the business transition request.
	IdempotentHash *string `json:"idempotentHash,omitempty"`
	// Additional information about the status change.
	Reason *string `json:"reason,omitempty"`
	// Identifies the standardized reason for the transition:  *00:* Object activated for the first time.  *01:* Requested by you.  *02:* Inactivity over time.  *03:* This address cannot accept mail or the addressee is unknown.  *04:* Negative account balance.  *05:* Account under review.  *06:* Suspicious activity was identified.  *07:* Activity outside the program parameters was identified.  *08:* Confirmed fraud was identified.  *09:* Matched with an Office of Foreign Assets Control list.  *10:* Card was reported lost.  *11:* Card information was cloned.  *12:* Account or card information was compromised.  *13:* Temporary status change while on hold/leave.  *14:* Initiated by Marqeta.  *15:* Initiated by issuer.  *16:* Card expired.  *17:* Failed KYC.  *18:* Changed to `ACTIVE` because information was properly validated.  *19:* Changed to `ACTIVE` because account activity was properly validated.  *20:* Change occurred prior to the normalization of reason codes.  *21:* Initiated by a third party, often a digital wallet provider.  *22:* PIN retry limit reached.  *23:* Card was reported stolen.  *24:* Address issue.  *25:* Name issue.  *26:* SSN issue.  *27:* DOB issue.  *28:* Email issue.  *29:* Phone issue.  *30:* Account/fulfillment mismatch.  *31:* Other reason.
	ReasonCode string `json:"reason_code"`
	// Specifies the new status of the business.
	Status string `json:"status"`
	// Unique identifier of the business transition.  If you do not include a token, the system generates one automatically. This token is referenced in other API calls, so we recommend that you define a simple string that is easy to remember. This value cannot be updated.
	Token *string `json:"token,omitempty"`
}

// NewBusinessTransitionRequest instantiates a new BusinessTransitionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessTransitionRequest(businessToken string, channel string, reasonCode string, status string) *BusinessTransitionRequest {
	this := BusinessTransitionRequest{}
	this.BusinessToken = businessToken
	this.Channel = channel
	this.ReasonCode = reasonCode
	this.Status = status
	return &this
}

// NewBusinessTransitionRequestWithDefaults instantiates a new BusinessTransitionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessTransitionRequestWithDefaults() *BusinessTransitionRequest {
	this := BusinessTransitionRequest{}
	return &this
}

// GetBusinessToken returns the BusinessToken field value
func (o *BusinessTransitionRequest) GetBusinessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BusinessToken
}

// GetBusinessTokenOk returns a tuple with the BusinessToken field value
// and a boolean to check if the value has been set.
func (o *BusinessTransitionRequest) GetBusinessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BusinessToken, true
}

// SetBusinessToken sets field value
func (o *BusinessTransitionRequest) SetBusinessToken(v string) {
	o.BusinessToken = v
}

// GetChannel returns the Channel field value
func (o *BusinessTransitionRequest) GetChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *BusinessTransitionRequest) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *BusinessTransitionRequest) SetChannel(v string) {
	o.Channel = v
}

// GetIdempotentHash returns the IdempotentHash field value if set, zero value otherwise.
func (o *BusinessTransitionRequest) GetIdempotentHash() string {
	if o == nil || IsNil(o.IdempotentHash) {
		var ret string
		return ret
	}
	return *o.IdempotentHash
}

// GetIdempotentHashOk returns a tuple with the IdempotentHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessTransitionRequest) GetIdempotentHashOk() (*string, bool) {
	if o == nil || IsNil(o.IdempotentHash) {
		return nil, false
	}
	return o.IdempotentHash, true
}

// HasIdempotentHash returns a boolean if a field has been set.
func (o *BusinessTransitionRequest) HasIdempotentHash() bool {
	if o != nil && !IsNil(o.IdempotentHash) {
		return true
	}

	return false
}

// SetIdempotentHash gets a reference to the given string and assigns it to the IdempotentHash field.
func (o *BusinessTransitionRequest) SetIdempotentHash(v string) {
	o.IdempotentHash = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *BusinessTransitionRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessTransitionRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *BusinessTransitionRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *BusinessTransitionRequest) SetReason(v string) {
	o.Reason = &v
}

// GetReasonCode returns the ReasonCode field value
func (o *BusinessTransitionRequest) GetReasonCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value
// and a boolean to check if the value has been set.
func (o *BusinessTransitionRequest) GetReasonCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReasonCode, true
}

// SetReasonCode sets field value
func (o *BusinessTransitionRequest) SetReasonCode(v string) {
	o.ReasonCode = v
}

// GetStatus returns the Status field value
func (o *BusinessTransitionRequest) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BusinessTransitionRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BusinessTransitionRequest) SetStatus(v string) {
	o.Status = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *BusinessTransitionRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessTransitionRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *BusinessTransitionRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *BusinessTransitionRequest) SetToken(v string) {
	o.Token = &v
}

func (o BusinessTransitionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessTransitionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["business_token"] = o.BusinessToken
	toSerialize["channel"] = o.Channel
	if !IsNil(o.IdempotentHash) {
		toSerialize["idempotentHash"] = o.IdempotentHash
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	toSerialize["reason_code"] = o.ReasonCode
	toSerialize["status"] = o.Status
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableBusinessTransitionRequest struct {
	value *BusinessTransitionRequest
	isSet bool
}

func (v NullableBusinessTransitionRequest) Get() *BusinessTransitionRequest {
	return v.value
}

func (v *NullableBusinessTransitionRequest) Set(val *BusinessTransitionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessTransitionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessTransitionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessTransitionRequest(val *BusinessTransitionRequest) *NullableBusinessTransitionRequest {
	return &NullableBusinessTransitionRequest{value: val, isSet: true}
}

func (v NullableBusinessTransitionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessTransitionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


