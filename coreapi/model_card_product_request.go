/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the CardProductRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardProductRequest{}

// CardProductRequest struct for CardProductRequest
type CardProductRequest struct {
	// Indicates whether the card product is active.  *NOTE:* This field has no effect on the ability to create cards from this card product. Use the `config.fulfillment.allow_card_creation` field to allow/disallow card creation.
	Active *bool `json:"active,omitempty"`
	Config *CardProductConfig `json:"config,omitempty"`
	// End date of the range over which the card product can be active.
	EndDate *string `json:"end_date,omitempty"`
	// Name of the card product. Marqeta recommends that you use a unique string.
	Name string `json:"name"`
	// Date when the card product becomes active. If the start date has passed and the card is set to `active = false`, then the card will not be activated.
	StartDate string `json:"start_date"`
	// Unique identifier of the card product.  If you do not include a token, the system will generate one automatically. This token is required in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
	Token *string `json:"token,omitempty"`
}

// NewCardProductRequest instantiates a new CardProductRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardProductRequest(name string, startDate string) *CardProductRequest {
	this := CardProductRequest{}
	var active bool = false
	this.Active = &active
	this.Name = name
	this.StartDate = startDate
	return &this
}

// NewCardProductRequestWithDefaults instantiates a new CardProductRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardProductRequestWithDefaults() *CardProductRequest {
	this := CardProductRequest{}
	var active bool = false
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CardProductRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardProductRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CardProductRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CardProductRequest) SetActive(v bool) {
	o.Active = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *CardProductRequest) GetConfig() CardProductConfig {
	if o == nil || IsNil(o.Config) {
		var ret CardProductConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardProductRequest) GetConfigOk() (*CardProductConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *CardProductRequest) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given CardProductConfig and assigns it to the Config field.
func (o *CardProductRequest) SetConfig(v CardProductConfig) {
	o.Config = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CardProductRequest) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardProductRequest) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CardProductRequest) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *CardProductRequest) SetEndDate(v string) {
	o.EndDate = &v
}

// GetName returns the Name field value
func (o *CardProductRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CardProductRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CardProductRequest) SetName(v string) {
	o.Name = v
}

// GetStartDate returns the StartDate field value
func (o *CardProductRequest) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *CardProductRequest) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *CardProductRequest) SetStartDate(v string) {
	o.StartDate = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *CardProductRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardProductRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *CardProductRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *CardProductRequest) SetToken(v string) {
	o.Token = &v
}

func (o CardProductRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardProductRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	toSerialize["name"] = o.Name
	toSerialize["start_date"] = o.StartDate
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableCardProductRequest struct {
	value *CardProductRequest
	isSet bool
}

func (v NullableCardProductRequest) Get() *CardProductRequest {
	return v.value
}

func (v *NullableCardProductRequest) Set(val *CardProductRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCardProductRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCardProductRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardProductRequest(val *CardProductRequest) *NullableCardProductRequest {
	return &NullableCardProductRequest{value: val, isSet: true}
}

func (v NullableCardProductRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardProductRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


