/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Config{}

// Config Allows for configuration options for this group, including control over the expiration of authorizations and automatic increases to the authorization amount.
type Config struct {
	AuthorizationControls *AuthorizationControls `json:"authorization_controls,omitempty"`
}

// NewConfig instantiates a new Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig() *Config {
	this := Config{}
	return &this
}

// NewConfigWithDefaults instantiates a new Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigWithDefaults() *Config {
	this := Config{}
	return &this
}

// GetAuthorizationControls returns the AuthorizationControls field value if set, zero value otherwise.
func (o *Config) GetAuthorizationControls() AuthorizationControls {
	if o == nil || IsNil(o.AuthorizationControls) {
		var ret AuthorizationControls
		return ret
	}
	return *o.AuthorizationControls
}

// GetAuthorizationControlsOk returns a tuple with the AuthorizationControls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetAuthorizationControlsOk() (*AuthorizationControls, bool) {
	if o == nil || IsNil(o.AuthorizationControls) {
		return nil, false
	}
	return o.AuthorizationControls, true
}

// HasAuthorizationControls returns a boolean if a field has been set.
func (o *Config) HasAuthorizationControls() bool {
	if o != nil && !IsNil(o.AuthorizationControls) {
		return true
	}

	return false
}

// SetAuthorizationControls gets a reference to the given AuthorizationControls and assigns it to the AuthorizationControls field.
func (o *Config) SetAuthorizationControls(v AuthorizationControls) {
	o.AuthorizationControls = &v
}

func (o Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorizationControls) {
		toSerialize["authorization_controls"] = o.AuthorizationControls
	}
	return toSerialize, nil
}

type NullableConfig struct {
	value *Config
	isSet bool
}

func (v NullableConfig) Get() *Config {
	return v.value
}

func (v *NullableConfig) Set(val *Config) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig(val *Config) *NullableConfig {
	return &NullableConfig{value: val, isSet: true}
}

func (v NullableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


