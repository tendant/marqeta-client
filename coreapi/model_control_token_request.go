/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the ControlTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlTokenRequest{}

// ControlTokenRequest struct for ControlTokenRequest
type ControlTokenRequest struct {
	// The unique identifier of the card for which you want to generate a control token.
	CardToken string `json:"card_token"`
	// Specifies the type of action completed by this request.  *WARNING:* Sending a request to this endpoint with a `REVEAL_PIN` control token requires PCI DSS compliance.  The lifespan of the control token depends on the token type:  * *SET_PIN:* 60 minutes * *REVEAL_PIN:* 5 minutes
	ControltokenType *string `json:"controltoken_type,omitempty"`
}

// NewControlTokenRequest instantiates a new ControlTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlTokenRequest(cardToken string) *ControlTokenRequest {
	this := ControlTokenRequest{}
	this.CardToken = cardToken
	return &this
}

// NewControlTokenRequestWithDefaults instantiates a new ControlTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlTokenRequestWithDefaults() *ControlTokenRequest {
	this := ControlTokenRequest{}
	return &this
}

// GetCardToken returns the CardToken field value
func (o *ControlTokenRequest) GetCardToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CardToken
}

// GetCardTokenOk returns a tuple with the CardToken field value
// and a boolean to check if the value has been set.
func (o *ControlTokenRequest) GetCardTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CardToken, true
}

// SetCardToken sets field value
func (o *ControlTokenRequest) SetCardToken(v string) {
	o.CardToken = v
}

// GetControltokenType returns the ControltokenType field value if set, zero value otherwise.
func (o *ControlTokenRequest) GetControltokenType() string {
	if o == nil || IsNil(o.ControltokenType) {
		var ret string
		return ret
	}
	return *o.ControltokenType
}

// GetControltokenTypeOk returns a tuple with the ControltokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlTokenRequest) GetControltokenTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ControltokenType) {
		return nil, false
	}
	return o.ControltokenType, true
}

// HasControltokenType returns a boolean if a field has been set.
func (o *ControlTokenRequest) HasControltokenType() bool {
	if o != nil && !IsNil(o.ControltokenType) {
		return true
	}

	return false
}

// SetControltokenType gets a reference to the given string and assigns it to the ControltokenType field.
func (o *ControlTokenRequest) SetControltokenType(v string) {
	o.ControltokenType = &v
}

func (o ControlTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["card_token"] = o.CardToken
	if !IsNil(o.ControltokenType) {
		toSerialize["controltoken_type"] = o.ControltokenType
	}
	return toSerialize, nil
}

type NullableControlTokenRequest struct {
	value *ControlTokenRequest
	isSet bool
}

func (v NullableControlTokenRequest) Get() *ControlTokenRequest {
	return v.value
}

func (v *NullableControlTokenRequest) Set(val *ControlTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableControlTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableControlTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlTokenRequest(val *ControlTokenRequest) *NullableControlTokenRequest {
	return &NullableControlTokenRequest{value: val, isSet: true}
}

func (v NullableControlTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


