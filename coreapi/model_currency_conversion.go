/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the CurrencyConversion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyConversion{}

// CurrencyConversion Contains information from the card network about currency conversion, including the original currency of the transaction, the amount of the transaction in the origination currency, and the conversion rate. Returned if the transaction involves currency conversion.
type CurrencyConversion struct {
	// Amount of the transaction in the currency in which it originated. Returned if the transaction involves currency conversion.
	OriginalAmount *float32 `json:"original_amount,omitempty"`
	// Conversion rate between the origination currency and the settlement currency. Returned when the transaction currency is different from the origination currency.
	ConversionRate *float32 `json:"conversion_rate,omitempty"`
	// The three-digit ISO 4217 currency code.
	OriginalCurrencyCode *string `json:"original_currency_code,omitempty"`
}

// NewCurrencyConversion instantiates a new CurrencyConversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyConversion() *CurrencyConversion {
	this := CurrencyConversion{}
	return &this
}

// NewCurrencyConversionWithDefaults instantiates a new CurrencyConversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyConversionWithDefaults() *CurrencyConversion {
	this := CurrencyConversion{}
	return &this
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *CurrencyConversion) GetOriginalAmount() float32 {
	if o == nil || IsNil(o.OriginalAmount) {
		var ret float32
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyConversion) GetOriginalAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalAmount) {
		return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *CurrencyConversion) HasOriginalAmount() bool {
	if o != nil && !IsNil(o.OriginalAmount) {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given float32 and assigns it to the OriginalAmount field.
func (o *CurrencyConversion) SetOriginalAmount(v float32) {
	o.OriginalAmount = &v
}

// GetConversionRate returns the ConversionRate field value if set, zero value otherwise.
func (o *CurrencyConversion) GetConversionRate() float32 {
	if o == nil || IsNil(o.ConversionRate) {
		var ret float32
		return ret
	}
	return *o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyConversion) GetConversionRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ConversionRate) {
		return nil, false
	}
	return o.ConversionRate, true
}

// HasConversionRate returns a boolean if a field has been set.
func (o *CurrencyConversion) HasConversionRate() bool {
	if o != nil && !IsNil(o.ConversionRate) {
		return true
	}

	return false
}

// SetConversionRate gets a reference to the given float32 and assigns it to the ConversionRate field.
func (o *CurrencyConversion) SetConversionRate(v float32) {
	o.ConversionRate = &v
}

// GetOriginalCurrencyCode returns the OriginalCurrencyCode field value if set, zero value otherwise.
func (o *CurrencyConversion) GetOriginalCurrencyCode() string {
	if o == nil || IsNil(o.OriginalCurrencyCode) {
		var ret string
		return ret
	}
	return *o.OriginalCurrencyCode
}

// GetOriginalCurrencyCodeOk returns a tuple with the OriginalCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyConversion) GetOriginalCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalCurrencyCode) {
		return nil, false
	}
	return o.OriginalCurrencyCode, true
}

// HasOriginalCurrencyCode returns a boolean if a field has been set.
func (o *CurrencyConversion) HasOriginalCurrencyCode() bool {
	if o != nil && !IsNil(o.OriginalCurrencyCode) {
		return true
	}

	return false
}

// SetOriginalCurrencyCode gets a reference to the given string and assigns it to the OriginalCurrencyCode field.
func (o *CurrencyConversion) SetOriginalCurrencyCode(v string) {
	o.OriginalCurrencyCode = &v
}

func (o CurrencyConversion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyConversion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginalAmount) {
		toSerialize["original_amount"] = o.OriginalAmount
	}
	if !IsNil(o.ConversionRate) {
		toSerialize["conversion_rate"] = o.ConversionRate
	}
	if !IsNil(o.OriginalCurrencyCode) {
		toSerialize["original_currency_code"] = o.OriginalCurrencyCode
	}
	return toSerialize, nil
}

type NullableCurrencyConversion struct {
	value *CurrencyConversion
	isSet bool
}

func (v NullableCurrencyConversion) Get() *CurrencyConversion {
	return v.value
}

func (v *NullableCurrencyConversion) Set(val *CurrencyConversion) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyConversion) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyConversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyConversion(val *CurrencyConversion) *NullableCurrencyConversion {
	return &NullableCurrencyConversion{value: val, isSet: true}
}

func (v NullableCurrencyConversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyConversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


