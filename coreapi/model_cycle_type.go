/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// CycleType Type of cycle.  * `BEGINNING_REVOLVING` - Account is beginning to revolve and just started carrying a balance from the previous month. * `REVOLVING` - Account is revolving and has been carrying a balance from month to month for more than one month. * `END_REVOLVING` - Account is no longer revolving and the previous month's balance is paid off. * `TRANSACTING` - Account is not revolving and the balance is paid off each month.
type CycleType string

// List of CycleType
const (
	CYCLETYPE_BEGINNING_REVOLVING CycleType = "BEGINNING_REVOLVING"
	CYCLETYPE_REVOLVING CycleType = "REVOLVING"
	CYCLETYPE_END_REVOLVING CycleType = "END_REVOLVING"
	CYCLETYPE_TRANSACTING CycleType = "TRANSACTING"
)

// All allowed values of CycleType enum
var AllowedCycleTypeEnumValues = []CycleType{
	"BEGINNING_REVOLVING",
	"REVOLVING",
	"END_REVOLVING",
	"TRANSACTING",
}

func (v *CycleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CycleType(value)
	for _, existing := range AllowedCycleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CycleType", value)
}

// NewCycleTypeFromValue returns a pointer to a valid CycleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCycleTypeFromValue(v string) (*CycleType, error) {
	ev := CycleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CycleType: valid values are %v", v, AllowedCycleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CycleType) IsValid() bool {
	for _, existing := range AllowedCycleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CycleType value
func (v CycleType) Ptr() *CycleType {
	return &v
}

type NullableCycleType struct {
	value *CycleType
	isSet bool
}

func (v NullableCycleType) Get() *CycleType {
	return v.value
}

func (v *NullableCycleType) Set(val *CycleType) {
	v.value = val
	v.isSet = true
}

func (v NullableCycleType) IsSet() bool {
	return v.isSet
}

func (v *NullableCycleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycleType(val *CycleType) *NullableCycleType {
	return &NullableCycleType{value: val, isSet: true}
}

func (v NullableCycleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

