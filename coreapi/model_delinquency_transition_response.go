/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the DelinquencyTransitionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelinquencyTransitionResponse{}

// DelinquencyTransitionResponse Contains details of the account's delinquency state transition.
type DelinquencyTransitionResponse struct {
	// Unique identifier of the credit account.
	AccountToken string `json:"account_token"`
	// Number of buckets for the account after the triggering event occurred.
	BucketCount *float32 `json:"bucket_count,omitempty"`
	// Date and time when the delinquency state transition was created on Marqeta's credit platform, in UTC.
	CreatedTime time.Time `json:"created_time"`
	// Current amount that is due after the triggering event occurred.  Equivalent to `current_due` for the account's most recent delinquency bucket. To retrieve delinquency buckets for an account, send a `GET` request to `/credit/accounts/{account_token}/delinquencystate`.
	CurrentDue *float32 `json:"current_due,omitempty"`
	// Date and time when the triggering event impacted the account, in UTC.
	ImpactTime time.Time `json:"impact_time"`
	// A value of `true` indicates that the system invalidated and rolled back the delinquency transition.  This is a temporary field that allows Marqeta to handle occasional cases of out-of-order processing. This can occur when two delinquency state transition webhooks are sent near-simultaneously.  For example, if a credit and a payment that bring an account current are made around the same time, two delinquency state transitions are sent very close together. In these cases, one of the transitions is rolled back and invalidated. For the transition that is rolled back, `is_rolled_back` is `true` and the transition should be ignored.  This field is temporary and to be deprecated when out-of-order processing is addressed in a future release.
	IsRolledBack bool `json:"is_rolled_back"`
	// The payment due date of the account's oldest delinquency bucket, in UTC.  Useful when used with the delinquency state transition's `created_time` to determine the total number of days a payment is past due.
	OldestPaymentDueDate *time.Time `json:"oldest_payment_due_date,omitempty"`
	OriginalStatus DelinquencyStatus `json:"original_status"`
	Status DelinquencyStatus `json:"status"`
	// Unique identifier of the delinquency state transition.
	Token string `json:"token"`
	// Total amount that is due after the triggering event occurred; the sum of `total_past_due` and `current_due`.  Equivalent to `total_due` for the account's most recent delinquency bucket. To retrieve delinquency buckets for an account, send a `GET` request to `/credit/accounts/{account_token}/delinquencystate`.
	TotalDue *float32 `json:"total_due,omitempty"`
	// Total amount that is past due after the triggering event occurred.  Equivalent to `past_due_carried_forward` for the account's most recent delinquency bucket. To retrieve delinquency buckets for an account, send a `GET` request to `/credit/accounts/{account_token}/delinquencystate`.
	TotalPastDue *float32 `json:"total_past_due,omitempty"`
	TransitionTriggerReason DelinquencyTransitionTriggerReason `json:"transition_trigger_reason"`
	// Date and time when the triggering event caused the account's delinquency state to transition, in UTC.  For <</core-api/credit-account-journal-entries, journal entries>>, equivalent to `request_time`. For <</core-api/credit-account-statements#listStatementJournalEntries, statement journal entries>>, equivalent to `impact_time`,
	TransitionTriggerTime time.Time `json:"transition_trigger_time"`
	// Date and time when the delinquency state transition was last updated on Marqeta's credit platform, in UTC.
	UpdatedTime *time.Time `json:"updated_time,omitempty"`
}

// NewDelinquencyTransitionResponse instantiates a new DelinquencyTransitionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelinquencyTransitionResponse(accountToken string, createdTime time.Time, impactTime time.Time, isRolledBack bool, originalStatus DelinquencyStatus, status DelinquencyStatus, token string, transitionTriggerReason DelinquencyTransitionTriggerReason, transitionTriggerTime time.Time) *DelinquencyTransitionResponse {
	this := DelinquencyTransitionResponse{}
	this.AccountToken = accountToken
	this.CreatedTime = createdTime
	this.ImpactTime = impactTime
	this.IsRolledBack = isRolledBack
	this.OriginalStatus = originalStatus
	this.Status = status
	this.Token = token
	this.TransitionTriggerReason = transitionTriggerReason
	this.TransitionTriggerTime = transitionTriggerTime
	return &this
}

// NewDelinquencyTransitionResponseWithDefaults instantiates a new DelinquencyTransitionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelinquencyTransitionResponseWithDefaults() *DelinquencyTransitionResponse {
	this := DelinquencyTransitionResponse{}
	return &this
}

// GetAccountToken returns the AccountToken field value
func (o *DelinquencyTransitionResponse) GetAccountToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountToken
}

// GetAccountTokenOk returns a tuple with the AccountToken field value
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetAccountTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountToken, true
}

// SetAccountToken sets field value
func (o *DelinquencyTransitionResponse) SetAccountToken(v string) {
	o.AccountToken = v
}

// GetBucketCount returns the BucketCount field value if set, zero value otherwise.
func (o *DelinquencyTransitionResponse) GetBucketCount() float32 {
	if o == nil || IsNil(o.BucketCount) {
		var ret float32
		return ret
	}
	return *o.BucketCount
}

// GetBucketCountOk returns a tuple with the BucketCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetBucketCountOk() (*float32, bool) {
	if o == nil || IsNil(o.BucketCount) {
		return nil, false
	}
	return o.BucketCount, true
}

// HasBucketCount returns a boolean if a field has been set.
func (o *DelinquencyTransitionResponse) HasBucketCount() bool {
	if o != nil && !IsNil(o.BucketCount) {
		return true
	}

	return false
}

// SetBucketCount gets a reference to the given float32 and assigns it to the BucketCount field.
func (o *DelinquencyTransitionResponse) SetBucketCount(v float32) {
	o.BucketCount = &v
}

// GetCreatedTime returns the CreatedTime field value
func (o *DelinquencyTransitionResponse) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *DelinquencyTransitionResponse) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetCurrentDue returns the CurrentDue field value if set, zero value otherwise.
func (o *DelinquencyTransitionResponse) GetCurrentDue() float32 {
	if o == nil || IsNil(o.CurrentDue) {
		var ret float32
		return ret
	}
	return *o.CurrentDue
}

// GetCurrentDueOk returns a tuple with the CurrentDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetCurrentDueOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentDue) {
		return nil, false
	}
	return o.CurrentDue, true
}

// HasCurrentDue returns a boolean if a field has been set.
func (o *DelinquencyTransitionResponse) HasCurrentDue() bool {
	if o != nil && !IsNil(o.CurrentDue) {
		return true
	}

	return false
}

// SetCurrentDue gets a reference to the given float32 and assigns it to the CurrentDue field.
func (o *DelinquencyTransitionResponse) SetCurrentDue(v float32) {
	o.CurrentDue = &v
}

// GetImpactTime returns the ImpactTime field value
func (o *DelinquencyTransitionResponse) GetImpactTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ImpactTime
}

// GetImpactTimeOk returns a tuple with the ImpactTime field value
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetImpactTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImpactTime, true
}

// SetImpactTime sets field value
func (o *DelinquencyTransitionResponse) SetImpactTime(v time.Time) {
	o.ImpactTime = v
}

// GetIsRolledBack returns the IsRolledBack field value
func (o *DelinquencyTransitionResponse) GetIsRolledBack() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRolledBack
}

// GetIsRolledBackOk returns a tuple with the IsRolledBack field value
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetIsRolledBackOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRolledBack, true
}

// SetIsRolledBack sets field value
func (o *DelinquencyTransitionResponse) SetIsRolledBack(v bool) {
	o.IsRolledBack = v
}

// GetOldestPaymentDueDate returns the OldestPaymentDueDate field value if set, zero value otherwise.
func (o *DelinquencyTransitionResponse) GetOldestPaymentDueDate() time.Time {
	if o == nil || IsNil(o.OldestPaymentDueDate) {
		var ret time.Time
		return ret
	}
	return *o.OldestPaymentDueDate
}

// GetOldestPaymentDueDateOk returns a tuple with the OldestPaymentDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetOldestPaymentDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OldestPaymentDueDate) {
		return nil, false
	}
	return o.OldestPaymentDueDate, true
}

// HasOldestPaymentDueDate returns a boolean if a field has been set.
func (o *DelinquencyTransitionResponse) HasOldestPaymentDueDate() bool {
	if o != nil && !IsNil(o.OldestPaymentDueDate) {
		return true
	}

	return false
}

// SetOldestPaymentDueDate gets a reference to the given time.Time and assigns it to the OldestPaymentDueDate field.
func (o *DelinquencyTransitionResponse) SetOldestPaymentDueDate(v time.Time) {
	o.OldestPaymentDueDate = &v
}

// GetOriginalStatus returns the OriginalStatus field value
func (o *DelinquencyTransitionResponse) GetOriginalStatus() DelinquencyStatus {
	if o == nil {
		var ret DelinquencyStatus
		return ret
	}

	return o.OriginalStatus
}

// GetOriginalStatusOk returns a tuple with the OriginalStatus field value
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetOriginalStatusOk() (*DelinquencyStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalStatus, true
}

// SetOriginalStatus sets field value
func (o *DelinquencyTransitionResponse) SetOriginalStatus(v DelinquencyStatus) {
	o.OriginalStatus = v
}

// GetStatus returns the Status field value
func (o *DelinquencyTransitionResponse) GetStatus() DelinquencyStatus {
	if o == nil {
		var ret DelinquencyStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetStatusOk() (*DelinquencyStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DelinquencyTransitionResponse) SetStatus(v DelinquencyStatus) {
	o.Status = v
}

// GetToken returns the Token field value
func (o *DelinquencyTransitionResponse) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *DelinquencyTransitionResponse) SetToken(v string) {
	o.Token = v
}

// GetTotalDue returns the TotalDue field value if set, zero value otherwise.
func (o *DelinquencyTransitionResponse) GetTotalDue() float32 {
	if o == nil || IsNil(o.TotalDue) {
		var ret float32
		return ret
	}
	return *o.TotalDue
}

// GetTotalDueOk returns a tuple with the TotalDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetTotalDueOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalDue) {
		return nil, false
	}
	return o.TotalDue, true
}

// HasTotalDue returns a boolean if a field has been set.
func (o *DelinquencyTransitionResponse) HasTotalDue() bool {
	if o != nil && !IsNil(o.TotalDue) {
		return true
	}

	return false
}

// SetTotalDue gets a reference to the given float32 and assigns it to the TotalDue field.
func (o *DelinquencyTransitionResponse) SetTotalDue(v float32) {
	o.TotalDue = &v
}

// GetTotalPastDue returns the TotalPastDue field value if set, zero value otherwise.
func (o *DelinquencyTransitionResponse) GetTotalPastDue() float32 {
	if o == nil || IsNil(o.TotalPastDue) {
		var ret float32
		return ret
	}
	return *o.TotalPastDue
}

// GetTotalPastDueOk returns a tuple with the TotalPastDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetTotalPastDueOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalPastDue) {
		return nil, false
	}
	return o.TotalPastDue, true
}

// HasTotalPastDue returns a boolean if a field has been set.
func (o *DelinquencyTransitionResponse) HasTotalPastDue() bool {
	if o != nil && !IsNil(o.TotalPastDue) {
		return true
	}

	return false
}

// SetTotalPastDue gets a reference to the given float32 and assigns it to the TotalPastDue field.
func (o *DelinquencyTransitionResponse) SetTotalPastDue(v float32) {
	o.TotalPastDue = &v
}

// GetTransitionTriggerReason returns the TransitionTriggerReason field value
func (o *DelinquencyTransitionResponse) GetTransitionTriggerReason() DelinquencyTransitionTriggerReason {
	if o == nil {
		var ret DelinquencyTransitionTriggerReason
		return ret
	}

	return o.TransitionTriggerReason
}

// GetTransitionTriggerReasonOk returns a tuple with the TransitionTriggerReason field value
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetTransitionTriggerReasonOk() (*DelinquencyTransitionTriggerReason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransitionTriggerReason, true
}

// SetTransitionTriggerReason sets field value
func (o *DelinquencyTransitionResponse) SetTransitionTriggerReason(v DelinquencyTransitionTriggerReason) {
	o.TransitionTriggerReason = v
}

// GetTransitionTriggerTime returns the TransitionTriggerTime field value
func (o *DelinquencyTransitionResponse) GetTransitionTriggerTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TransitionTriggerTime
}

// GetTransitionTriggerTimeOk returns a tuple with the TransitionTriggerTime field value
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetTransitionTriggerTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransitionTriggerTime, true
}

// SetTransitionTriggerTime sets field value
func (o *DelinquencyTransitionResponse) SetTransitionTriggerTime(v time.Time) {
	o.TransitionTriggerTime = v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *DelinquencyTransitionResponse) GetUpdatedTime() time.Time {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DelinquencyTransitionResponse) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *DelinquencyTransitionResponse) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given time.Time and assigns it to the UpdatedTime field.
func (o *DelinquencyTransitionResponse) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = &v
}

func (o DelinquencyTransitionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelinquencyTransitionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_token"] = o.AccountToken
	if !IsNil(o.BucketCount) {
		toSerialize["bucket_count"] = o.BucketCount
	}
	toSerialize["created_time"] = o.CreatedTime
	if !IsNil(o.CurrentDue) {
		toSerialize["current_due"] = o.CurrentDue
	}
	toSerialize["impact_time"] = o.ImpactTime
	toSerialize["is_rolled_back"] = o.IsRolledBack
	if !IsNil(o.OldestPaymentDueDate) {
		toSerialize["oldest_payment_due_date"] = o.OldestPaymentDueDate
	}
	toSerialize["original_status"] = o.OriginalStatus
	toSerialize["status"] = o.Status
	toSerialize["token"] = o.Token
	if !IsNil(o.TotalDue) {
		toSerialize["total_due"] = o.TotalDue
	}
	if !IsNil(o.TotalPastDue) {
		toSerialize["total_past_due"] = o.TotalPastDue
	}
	toSerialize["transition_trigger_reason"] = o.TransitionTriggerReason
	toSerialize["transition_trigger_time"] = o.TransitionTriggerTime
	if !IsNil(o.UpdatedTime) {
		toSerialize["updated_time"] = o.UpdatedTime
	}
	return toSerialize, nil
}

type NullableDelinquencyTransitionResponse struct {
	value *DelinquencyTransitionResponse
	isSet bool
}

func (v NullableDelinquencyTransitionResponse) Get() *DelinquencyTransitionResponse {
	return v.value
}

func (v *NullableDelinquencyTransitionResponse) Set(val *DelinquencyTransitionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDelinquencyTransitionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDelinquencyTransitionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelinquencyTransitionResponse(val *DelinquencyTransitionResponse) *NullableDelinquencyTransitionResponse {
	return &NullableDelinquencyTransitionResponse{value: val, isSet: true}
}

func (v NullableDelinquencyTransitionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelinquencyTransitionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


