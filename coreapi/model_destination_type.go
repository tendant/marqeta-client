/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// DestinationType Destination of the reward redemption.  * `INVESTMENT` - The redemption is paid into an investment account.  * `WALLET` - The redemption is paid into a digital wallet.  * `ACH` - The redemption is paid into an ACH account.  Required for external redemptions.
type DestinationType string

// List of DestinationType
const (
	DESTINATIONTYPE_INVESTMENT DestinationType = "INVESTMENT"
	DESTINATIONTYPE_WALLET DestinationType = "WALLET"
	DESTINATIONTYPE_ACH DestinationType = "ACH"
)

// All allowed values of DestinationType enum
var AllowedDestinationTypeEnumValues = []DestinationType{
	"INVESTMENT",
	"WALLET",
	"ACH",
}

func (v *DestinationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DestinationType(value)
	for _, existing := range AllowedDestinationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationType", value)
}

// NewDestinationTypeFromValue returns a pointer to a valid DestinationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDestinationTypeFromValue(v string) (*DestinationType, error) {
	ev := DestinationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DestinationType: valid values are %v", v, AllowedDestinationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DestinationType) IsValid() bool {
	for _, existing := range AllowedDestinationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DestinationType value
func (v DestinationType) Ptr() *DestinationType {
	return &v
}

type NullableDestinationType struct {
	value *DestinationType
	isSet bool
}

func (v NullableDestinationType) Get() *DestinationType {
	return v.value
}

func (v *NullableDestinationType) Set(val *DestinationType) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationType) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationType(val *DestinationType) *NullableDestinationType {
	return &NullableDestinationType{value: val, isSet: true}
}

func (v NullableDestinationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

