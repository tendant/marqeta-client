/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the DeviceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceData{}

// DeviceData Contains information on user's device fingerprint. Usually obtained through a component embedded in the application.  Required if application `type` is `PREQUALIFICATION`.
type DeviceData struct {
	// The data generated by the embedded component.
	Data *string `json:"data,omitempty"`
	// The provider of the embedded component.
	Provider *string `json:"provider,omitempty"`
}

// NewDeviceData instantiates a new DeviceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceData() *DeviceData {
	this := DeviceData{}
	return &this
}

// NewDeviceDataWithDefaults instantiates a new DeviceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDataWithDefaults() *DeviceData {
	this := DeviceData{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DeviceData) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceData) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DeviceData) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *DeviceData) SetData(v string) {
	o.Data = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *DeviceData) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceData) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *DeviceData) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *DeviceData) SetProvider(v string) {
	o.Provider = &v
}

func (o DeviceData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	return toSerialize, nil
}

type NullableDeviceData struct {
	value *DeviceData
	isSet bool
}

func (v NullableDeviceData) Get() *DeviceData {
	return v.value
}

func (v *NullableDeviceData) Set(val *DeviceData) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceData) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceData(val *DeviceData) *NullableDeviceData {
	return &NullableDeviceData{value: val, isSet: true}
}

func (v NullableDeviceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


