/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the DigitalWalletApplePayProvisionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DigitalWalletApplePayProvisionRequest{}

// DigitalWalletApplePayProvisionRequest struct for DigitalWalletApplePayProvisionRequest
type DigitalWalletApplePayProvisionRequest struct {
	// Unique identifier of the card resource to use for the provisioning request.
	CardToken string `json:"card_token"`
	// Base64-encoded leaf and sub-CA certificates provided by Apple.  The first element of the array should be the leaf certificate, followed by the sub-CA.
	Certificates []string `json:"certificates"`
	// Type of device into which the digital wallet token will be provisioned.
	DeviceType string `json:"device_type"`
	// One-time-use nonce provided by Apple for security purposes.
	Nonce string `json:"nonce"`
	// Apple-provided signature to the nonce.
	NonceSignature string `json:"nonce_signature"`
	// Version of the application making the provisioning request. Used for debugging and fraud prevention.
	ProvisioningAppVersion string `json:"provisioning_app_version"`
}

// NewDigitalWalletApplePayProvisionRequest instantiates a new DigitalWalletApplePayProvisionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigitalWalletApplePayProvisionRequest(cardToken string, certificates []string, deviceType string, nonce string, nonceSignature string, provisioningAppVersion string) *DigitalWalletApplePayProvisionRequest {
	this := DigitalWalletApplePayProvisionRequest{}
	this.CardToken = cardToken
	this.Certificates = certificates
	this.DeviceType = deviceType
	this.Nonce = nonce
	this.NonceSignature = nonceSignature
	this.ProvisioningAppVersion = provisioningAppVersion
	return &this
}

// NewDigitalWalletApplePayProvisionRequestWithDefaults instantiates a new DigitalWalletApplePayProvisionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigitalWalletApplePayProvisionRequestWithDefaults() *DigitalWalletApplePayProvisionRequest {
	this := DigitalWalletApplePayProvisionRequest{}
	return &this
}

// GetCardToken returns the CardToken field value
func (o *DigitalWalletApplePayProvisionRequest) GetCardToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CardToken
}

// GetCardTokenOk returns a tuple with the CardToken field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayProvisionRequest) GetCardTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CardToken, true
}

// SetCardToken sets field value
func (o *DigitalWalletApplePayProvisionRequest) SetCardToken(v string) {
	o.CardToken = v
}

// GetCertificates returns the Certificates field value
func (o *DigitalWalletApplePayProvisionRequest) GetCertificates() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayProvisionRequest) GetCertificatesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificates, true
}

// SetCertificates sets field value
func (o *DigitalWalletApplePayProvisionRequest) SetCertificates(v []string) {
	o.Certificates = v
}

// GetDeviceType returns the DeviceType field value
func (o *DigitalWalletApplePayProvisionRequest) GetDeviceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayProvisionRequest) GetDeviceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceType, true
}

// SetDeviceType sets field value
func (o *DigitalWalletApplePayProvisionRequest) SetDeviceType(v string) {
	o.DeviceType = v
}

// GetNonce returns the Nonce field value
func (o *DigitalWalletApplePayProvisionRequest) GetNonce() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayProvisionRequest) GetNonceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nonce, true
}

// SetNonce sets field value
func (o *DigitalWalletApplePayProvisionRequest) SetNonce(v string) {
	o.Nonce = v
}

// GetNonceSignature returns the NonceSignature field value
func (o *DigitalWalletApplePayProvisionRequest) GetNonceSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NonceSignature
}

// GetNonceSignatureOk returns a tuple with the NonceSignature field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayProvisionRequest) GetNonceSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NonceSignature, true
}

// SetNonceSignature sets field value
func (o *DigitalWalletApplePayProvisionRequest) SetNonceSignature(v string) {
	o.NonceSignature = v
}

// GetProvisioningAppVersion returns the ProvisioningAppVersion field value
func (o *DigitalWalletApplePayProvisionRequest) GetProvisioningAppVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProvisioningAppVersion
}

// GetProvisioningAppVersionOk returns a tuple with the ProvisioningAppVersion field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayProvisionRequest) GetProvisioningAppVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProvisioningAppVersion, true
}

// SetProvisioningAppVersion sets field value
func (o *DigitalWalletApplePayProvisionRequest) SetProvisioningAppVersion(v string) {
	o.ProvisioningAppVersion = v
}

func (o DigitalWalletApplePayProvisionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DigitalWalletApplePayProvisionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["card_token"] = o.CardToken
	toSerialize["certificates"] = o.Certificates
	toSerialize["device_type"] = o.DeviceType
	toSerialize["nonce"] = o.Nonce
	toSerialize["nonce_signature"] = o.NonceSignature
	toSerialize["provisioning_app_version"] = o.ProvisioningAppVersion
	return toSerialize, nil
}

type NullableDigitalWalletApplePayProvisionRequest struct {
	value *DigitalWalletApplePayProvisionRequest
	isSet bool
}

func (v NullableDigitalWalletApplePayProvisionRequest) Get() *DigitalWalletApplePayProvisionRequest {
	return v.value
}

func (v *NullableDigitalWalletApplePayProvisionRequest) Set(val *DigitalWalletApplePayProvisionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitalWalletApplePayProvisionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitalWalletApplePayProvisionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitalWalletApplePayProvisionRequest(val *DigitalWalletApplePayProvisionRequest) *NullableDigitalWalletApplePayProvisionRequest {
	return &NullableDigitalWalletApplePayProvisionRequest{value: val, isSet: true}
}

func (v NullableDigitalWalletApplePayProvisionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitalWalletApplePayProvisionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


