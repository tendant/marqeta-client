/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the DigitalWalletTokenTransitionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DigitalWalletTokenTransitionRequest{}

// DigitalWalletTokenTransitionRequest struct for DigitalWalletTokenTransitionRequest
type DigitalWalletTokenTransitionRequest struct {
	// Mechanism by which the transition was initiated.
	Channel *string `json:"channel,omitempty"`
	DigitalWalletToken DigitalWalletTokenHash `json:"digital_wallet_token"`
	// The reason for the transition.
	Reason *string `json:"reason,omitempty"`
	// Standard code describing the reason for the transition.  *NOTE:* This field is required if your program uses v2 of the `user_card_state_version`, which is a program-specific configuration value that is managed by Marqeta and cannot be accessed via the API. To learn more about the `user_card_state_version` program configuration, contact your Marqeta representative.  * *00:* Object activated for the first time * *01:* Requested by you * *02:* Inactivity over time * *03:* This address cannot accept mail or the addressee is unknown * *04:* Negative account balance * *05:* Account under review * *06:* Suspicious activity was identified * *07:* Activity outside the program parameters was identified * *08:* Confirmed fraud was identified * *09:* Matched with an Office of Foreign Assets Control list * *10:* Card was reported lost * *11:* Card information was cloned * *12:* Account or card information was compromised * *13:* Temporary status change while on hold/leave * *14:* Initiated by Marqeta * *15:* Initiated by issuer * *16:* Card expired * *17:* Failed KYC * *18:* Changed to `ACTIVE` because information was properly validated * *19:* Changed to `ACTIVE` because account activity was properly validated * *20:* Change occurred prior to the normalization of reason codes * *21:* Initiated by a third party, often a digital wallet provider * *22:* PIN retry limit reached * *23:* Card was reported stolen * *24:* Address issue * *25:* Name issue * *26:* SSN issue * *27:* DOB issue * *28:* Email issue * *29:* Phone issue * *30:* Account/fulfillment mismatch * *31:* Other reason
	ReasonCode *string `json:"reason_code,omitempty"`
	// Specifies the state to which the digital wallet token will transition.  The original state is `REQUESTED`. You cannot modify the state if its current value is either `REQUEST_DECLINED` or `TERMINATED`.
	State string `json:"state"`
	// The unique identifier of the digital wallet token transition (not the identifier of the digital wallet token itself).  If you do not include a value for the `token` field, the system will generate one automatically. This value is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
	Token *string `json:"token,omitempty"`
	// The unique identifier of the digital wallet token within the card network. The `token_reference_id` is unique at the card network level.
	TokenReferenceId *string `json:"token_reference_id,omitempty"`
}

// NewDigitalWalletTokenTransitionRequest instantiates a new DigitalWalletTokenTransitionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigitalWalletTokenTransitionRequest(digitalWalletToken DigitalWalletTokenHash, state string) *DigitalWalletTokenTransitionRequest {
	this := DigitalWalletTokenTransitionRequest{}
	this.DigitalWalletToken = digitalWalletToken
	this.State = state
	return &this
}

// NewDigitalWalletTokenTransitionRequestWithDefaults instantiates a new DigitalWalletTokenTransitionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigitalWalletTokenTransitionRequestWithDefaults() *DigitalWalletTokenTransitionRequest {
	this := DigitalWalletTokenTransitionRequest{}
	return &this
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *DigitalWalletTokenTransitionRequest) GetChannel() string {
	if o == nil || IsNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletTokenTransitionRequest) GetChannelOk() (*string, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *DigitalWalletTokenTransitionRequest) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *DigitalWalletTokenTransitionRequest) SetChannel(v string) {
	o.Channel = &v
}

// GetDigitalWalletToken returns the DigitalWalletToken field value
func (o *DigitalWalletTokenTransitionRequest) GetDigitalWalletToken() DigitalWalletTokenHash {
	if o == nil {
		var ret DigitalWalletTokenHash
		return ret
	}

	return o.DigitalWalletToken
}

// GetDigitalWalletTokenOk returns a tuple with the DigitalWalletToken field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletTokenTransitionRequest) GetDigitalWalletTokenOk() (*DigitalWalletTokenHash, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DigitalWalletToken, true
}

// SetDigitalWalletToken sets field value
func (o *DigitalWalletTokenTransitionRequest) SetDigitalWalletToken(v DigitalWalletTokenHash) {
	o.DigitalWalletToken = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *DigitalWalletTokenTransitionRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletTokenTransitionRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *DigitalWalletTokenTransitionRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *DigitalWalletTokenTransitionRequest) SetReason(v string) {
	o.Reason = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *DigitalWalletTokenTransitionRequest) GetReasonCode() string {
	if o == nil || IsNil(o.ReasonCode) {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletTokenTransitionRequest) GetReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *DigitalWalletTokenTransitionRequest) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *DigitalWalletTokenTransitionRequest) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetState returns the State field value
func (o *DigitalWalletTokenTransitionRequest) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletTokenTransitionRequest) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *DigitalWalletTokenTransitionRequest) SetState(v string) {
	o.State = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *DigitalWalletTokenTransitionRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletTokenTransitionRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *DigitalWalletTokenTransitionRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *DigitalWalletTokenTransitionRequest) SetToken(v string) {
	o.Token = &v
}

// GetTokenReferenceId returns the TokenReferenceId field value if set, zero value otherwise.
func (o *DigitalWalletTokenTransitionRequest) GetTokenReferenceId() string {
	if o == nil || IsNil(o.TokenReferenceId) {
		var ret string
		return ret
	}
	return *o.TokenReferenceId
}

// GetTokenReferenceIdOk returns a tuple with the TokenReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletTokenTransitionRequest) GetTokenReferenceIdOk() (*string, bool) {
	if o == nil || IsNil(o.TokenReferenceId) {
		return nil, false
	}
	return o.TokenReferenceId, true
}

// HasTokenReferenceId returns a boolean if a field has been set.
func (o *DigitalWalletTokenTransitionRequest) HasTokenReferenceId() bool {
	if o != nil && !IsNil(o.TokenReferenceId) {
		return true
	}

	return false
}

// SetTokenReferenceId gets a reference to the given string and assigns it to the TokenReferenceId field.
func (o *DigitalWalletTokenTransitionRequest) SetTokenReferenceId(v string) {
	o.TokenReferenceId = &v
}

func (o DigitalWalletTokenTransitionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DigitalWalletTokenTransitionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	toSerialize["digital_wallet_token"] = o.DigitalWalletToken
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reason_code"] = o.ReasonCode
	}
	toSerialize["state"] = o.State
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.TokenReferenceId) {
		toSerialize["token_reference_id"] = o.TokenReferenceId
	}
	return toSerialize, nil
}

type NullableDigitalWalletTokenTransitionRequest struct {
	value *DigitalWalletTokenTransitionRequest
	isSet bool
}

func (v NullableDigitalWalletTokenTransitionRequest) Get() *DigitalWalletTokenTransitionRequest {
	return v.value
}

func (v *NullableDigitalWalletTokenTransitionRequest) Set(val *DigitalWalletTokenTransitionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitalWalletTokenTransitionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitalWalletTokenTransitionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitalWalletTokenTransitionRequest(val *DigitalWalletTokenTransitionRequest) *NullableDigitalWalletTokenTransitionRequest {
	return &NullableDigitalWalletTokenTransitionRequest{value: val, isSet: true}
}

func (v NullableDigitalWalletTokenTransitionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitalWalletTokenTransitionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


