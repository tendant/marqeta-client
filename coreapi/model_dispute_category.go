/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"fmt"
)

// DisputeCategory Category to which the dispute belongs.
type DisputeCategory string

// List of DisputeCategory
const (
	DISPUTECATEGORY_FRAUD DisputeCategory = "FRAUD"
	DISPUTECATEGORY_AUTH DisputeCategory = "AUTH"
	DISPUTECATEGORY_PROCESSING_ERROR DisputeCategory = "PROCESSING_ERROR"
	DISPUTECATEGORY_CONSUMER_DISPUTE DisputeCategory = "CONSUMER_DISPUTE"
)

// All allowed values of DisputeCategory enum
var AllowedDisputeCategoryEnumValues = []DisputeCategory{
	"FRAUD",
	"AUTH",
	"PROCESSING_ERROR",
	"CONSUMER_DISPUTE",
}

func (v *DisputeCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DisputeCategory(value)
	for _, existing := range AllowedDisputeCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DisputeCategory", value)
}

// NewDisputeCategoryFromValue returns a pointer to a valid DisputeCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDisputeCategoryFromValue(v string) (*DisputeCategory, error) {
	ev := DisputeCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DisputeCategory: valid values are %v", v, AllowedDisputeCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DisputeCategory) IsValid() bool {
	for _, existing := range AllowedDisputeCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DisputeCategory value
func (v DisputeCategory) Ptr() *DisputeCategory {
	return &v
}

type NullableDisputeCategory struct {
	value *DisputeCategory
	isSet bool
}

func (v NullableDisputeCategory) Get() *DisputeCategory {
	return v.value
}

func (v *NullableDisputeCategory) Set(val *DisputeCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputeCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputeCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputeCategory(val *DisputeCategory) *NullableDisputeCategory {
	return &NullableDisputeCategory{value: val, isSet: true}
}

func (v NullableDisputeCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputeCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

