/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the DisputeCreateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisputeCreateReq{}

// DisputeCreateReq Information about a transaction dispute creation request.
type DisputeCreateReq struct {
	// Amount of the dispute. Max value is equal to the value of the original transaction.
	Amount float32 `json:"amount"`
	Category DisputeCategory `json:"category"`
	// Unique identifier of the journal entry (`authorization.clearing` type only) in dispute.
	LedgerEntryToken string `json:"ledger_entry_token"`
	// Additional information on the dispute (for example, a reason for the dispute).
	Notes *string `json:"notes,omitempty"`
	// Unique identifier of the dispute.
	Token *string `json:"token,omitempty"`
}

// NewDisputeCreateReq instantiates a new DisputeCreateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisputeCreateReq(amount float32, category DisputeCategory, ledgerEntryToken string) *DisputeCreateReq {
	this := DisputeCreateReq{}
	this.Amount = amount
	this.Category = category
	this.LedgerEntryToken = ledgerEntryToken
	return &this
}

// NewDisputeCreateReqWithDefaults instantiates a new DisputeCreateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisputeCreateReqWithDefaults() *DisputeCreateReq {
	this := DisputeCreateReq{}
	return &this
}

// GetAmount returns the Amount field value
func (o *DisputeCreateReq) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *DisputeCreateReq) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *DisputeCreateReq) SetAmount(v float32) {
	o.Amount = v
}

// GetCategory returns the Category field value
func (o *DisputeCreateReq) GetCategory() DisputeCategory {
	if o == nil {
		var ret DisputeCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *DisputeCreateReq) GetCategoryOk() (*DisputeCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *DisputeCreateReq) SetCategory(v DisputeCategory) {
	o.Category = v
}

// GetLedgerEntryToken returns the LedgerEntryToken field value
func (o *DisputeCreateReq) GetLedgerEntryToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LedgerEntryToken
}

// GetLedgerEntryTokenOk returns a tuple with the LedgerEntryToken field value
// and a boolean to check if the value has been set.
func (o *DisputeCreateReq) GetLedgerEntryTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LedgerEntryToken, true
}

// SetLedgerEntryToken sets field value
func (o *DisputeCreateReq) SetLedgerEntryToken(v string) {
	o.LedgerEntryToken = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *DisputeCreateReq) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeCreateReq) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *DisputeCreateReq) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *DisputeCreateReq) SetNotes(v string) {
	o.Notes = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *DisputeCreateReq) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeCreateReq) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *DisputeCreateReq) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *DisputeCreateReq) SetToken(v string) {
	o.Token = &v
}

func (o DisputeCreateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisputeCreateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["category"] = o.Category
	toSerialize["ledger_entry_token"] = o.LedgerEntryToken
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableDisputeCreateReq struct {
	value *DisputeCreateReq
	isSet bool
}

func (v NullableDisputeCreateReq) Get() *DisputeCreateReq {
	return v.value
}

func (v *NullableDisputeCreateReq) Set(val *DisputeCreateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputeCreateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputeCreateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputeCreateReq(val *DisputeCreateReq) *NullableDisputeCreateReq {
	return &NullableDisputeCreateReq{value: val, isSet: true}
}

func (v NullableDisputeCreateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputeCreateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


