/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the DisputeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisputeModel{}

// DisputeModel Contains information about a disputed transaction.
type DisputeModel struct {
	// The unique identifier of the dispute case.
	CaseManagementIdentifier *string `json:"case_management_identifier,omitempty"`
	// The reason for the dispute.
	Reason *string `json:"reason,omitempty"`
}

// NewDisputeModel instantiates a new DisputeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisputeModel() *DisputeModel {
	this := DisputeModel{}
	return &this
}

// NewDisputeModelWithDefaults instantiates a new DisputeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisputeModelWithDefaults() *DisputeModel {
	this := DisputeModel{}
	return &this
}

// GetCaseManagementIdentifier returns the CaseManagementIdentifier field value if set, zero value otherwise.
func (o *DisputeModel) GetCaseManagementIdentifier() string {
	if o == nil || IsNil(o.CaseManagementIdentifier) {
		var ret string
		return ret
	}
	return *o.CaseManagementIdentifier
}

// GetCaseManagementIdentifierOk returns a tuple with the CaseManagementIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeModel) GetCaseManagementIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.CaseManagementIdentifier) {
		return nil, false
	}
	return o.CaseManagementIdentifier, true
}

// HasCaseManagementIdentifier returns a boolean if a field has been set.
func (o *DisputeModel) HasCaseManagementIdentifier() bool {
	if o != nil && !IsNil(o.CaseManagementIdentifier) {
		return true
	}

	return false
}

// SetCaseManagementIdentifier gets a reference to the given string and assigns it to the CaseManagementIdentifier field.
func (o *DisputeModel) SetCaseManagementIdentifier(v string) {
	o.CaseManagementIdentifier = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *DisputeModel) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeModel) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *DisputeModel) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *DisputeModel) SetReason(v string) {
	o.Reason = &v
}

func (o DisputeModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisputeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaseManagementIdentifier) {
		toSerialize["case_management_identifier"] = o.CaseManagementIdentifier
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableDisputeModel struct {
	value *DisputeModel
	isSet bool
}

func (v NullableDisputeModel) Get() *DisputeModel {
	return v.value
}

func (v *NullableDisputeModel) Set(val *DisputeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputeModel(val *DisputeModel) *NullableDisputeModel {
	return &NullableDisputeModel{value: val, isSet: true}
}

func (v NullableDisputeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


