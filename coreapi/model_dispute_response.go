/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"time"
)

// checks if the DisputeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisputeResponse{}

// DisputeResponse Information about a transaction dispute response.
type DisputeResponse struct {
	// Unique identifier of the credit account on which the dispute was created.
	AccountToken string `json:"account_token"`
	// Amount of the dispute.
	Amount float32 `json:"amount"`
	Category DisputeCategory `json:"category"`
	// Date and time when the dispute was created on Marqeta's credit platform, in UTC.
	CreatedTime time.Time `json:"created_time"`
	// Unique identifier of the journal entry (`authorization.clearing` type only) in dispute.
	LedgerEntryToken string `json:"ledger_entry_token"`
	// Additional information on the dispute (for example, a reason for the dispute).
	Notes *string `json:"notes,omitempty"`
	// Date and time when the dispute was resolved and no longer in `ACTIVE` status.
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`
	Status DisputeStatus `json:"status"`
	// Unique identifier of the dispute.
	Token string `json:"token"`
	// Date and time when the dispute was last updated on Marqeta's credit platform, in UTC.
	UpdatedTime time.Time `json:"updated_time"`
}

// NewDisputeResponse instantiates a new DisputeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisputeResponse(accountToken string, amount float32, category DisputeCategory, createdTime time.Time, ledgerEntryToken string, status DisputeStatus, token string, updatedTime time.Time) *DisputeResponse {
	this := DisputeResponse{}
	this.AccountToken = accountToken
	this.Amount = amount
	this.Category = category
	this.CreatedTime = createdTime
	this.LedgerEntryToken = ledgerEntryToken
	this.Status = status
	this.Token = token
	this.UpdatedTime = updatedTime
	return &this
}

// NewDisputeResponseWithDefaults instantiates a new DisputeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisputeResponseWithDefaults() *DisputeResponse {
	this := DisputeResponse{}
	return &this
}

// GetAccountToken returns the AccountToken field value
func (o *DisputeResponse) GetAccountToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountToken
}

// GetAccountTokenOk returns a tuple with the AccountToken field value
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetAccountTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountToken, true
}

// SetAccountToken sets field value
func (o *DisputeResponse) SetAccountToken(v string) {
	o.AccountToken = v
}

// GetAmount returns the Amount field value
func (o *DisputeResponse) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *DisputeResponse) SetAmount(v float32) {
	o.Amount = v
}

// GetCategory returns the Category field value
func (o *DisputeResponse) GetCategory() DisputeCategory {
	if o == nil {
		var ret DisputeCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetCategoryOk() (*DisputeCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *DisputeResponse) SetCategory(v DisputeCategory) {
	o.Category = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *DisputeResponse) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *DisputeResponse) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetLedgerEntryToken returns the LedgerEntryToken field value
func (o *DisputeResponse) GetLedgerEntryToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LedgerEntryToken
}

// GetLedgerEntryTokenOk returns a tuple with the LedgerEntryToken field value
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetLedgerEntryTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LedgerEntryToken, true
}

// SetLedgerEntryToken sets field value
func (o *DisputeResponse) SetLedgerEntryToken(v string) {
	o.LedgerEntryToken = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *DisputeResponse) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *DisputeResponse) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *DisputeResponse) SetNotes(v string) {
	o.Notes = &v
}

// GetResolvedAt returns the ResolvedAt field value if set, zero value otherwise.
func (o *DisputeResponse) GetResolvedAt() time.Time {
	if o == nil || IsNil(o.ResolvedAt) {
		var ret time.Time
		return ret
	}
	return *o.ResolvedAt
}

// GetResolvedAtOk returns a tuple with the ResolvedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetResolvedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ResolvedAt) {
		return nil, false
	}
	return o.ResolvedAt, true
}

// HasResolvedAt returns a boolean if a field has been set.
func (o *DisputeResponse) HasResolvedAt() bool {
	if o != nil && !IsNil(o.ResolvedAt) {
		return true
	}

	return false
}

// SetResolvedAt gets a reference to the given time.Time and assigns it to the ResolvedAt field.
func (o *DisputeResponse) SetResolvedAt(v time.Time) {
	o.ResolvedAt = &v
}

// GetStatus returns the Status field value
func (o *DisputeResponse) GetStatus() DisputeStatus {
	if o == nil {
		var ret DisputeStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetStatusOk() (*DisputeStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DisputeResponse) SetStatus(v DisputeStatus) {
	o.Status = v
}

// GetToken returns the Token field value
func (o *DisputeResponse) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *DisputeResponse) SetToken(v string) {
	o.Token = v
}

// GetUpdatedTime returns the UpdatedTime field value
func (o *DisputeResponse) GetUpdatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value
// and a boolean to check if the value has been set.
func (o *DisputeResponse) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTime, true
}

// SetUpdatedTime sets field value
func (o *DisputeResponse) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = v
}

func (o DisputeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisputeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_token"] = o.AccountToken
	toSerialize["amount"] = o.Amount
	toSerialize["category"] = o.Category
	toSerialize["created_time"] = o.CreatedTime
	toSerialize["ledger_entry_token"] = o.LedgerEntryToken
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.ResolvedAt) {
		toSerialize["resolved_at"] = o.ResolvedAt
	}
	toSerialize["status"] = o.Status
	toSerialize["token"] = o.Token
	toSerialize["updated_time"] = o.UpdatedTime
	return toSerialize, nil
}

type NullableDisputeResponse struct {
	value *DisputeResponse
	isSet bool
}

func (v NullableDisputeResponse) Get() *DisputeResponse {
	return v.value
}

func (v *NullableDisputeResponse) Set(val *DisputeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputeResponse(val *DisputeResponse) *NullableDisputeResponse {
	return &NullableDisputeResponse{value: val, isSet: true}
}

func (v NullableDisputeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


