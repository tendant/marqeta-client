/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"fmt"
)

// ExpandObjects the model 'ExpandObjects'
type ExpandObjects string

// List of ExpandObjects
const (
	EXPANDOBJECTS_DEVICE_DATA ExpandObjects = "DEVICE_DATA"
	EXPANDOBJECTS_INCLUDE_DECISION ExpandObjects = "INCLUDE_DECISION"
	EXPANDOBJECTS_INCLUDE_ERROR ExpandObjects = "INCLUDE_ERROR"
)

// All allowed values of ExpandObjects enum
var AllowedExpandObjectsEnumValues = []ExpandObjects{
	"DEVICE_DATA",
	"INCLUDE_DECISION",
	"INCLUDE_ERROR",
}

func (v *ExpandObjects) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExpandObjects(value)
	for _, existing := range AllowedExpandObjectsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExpandObjects", value)
}

// NewExpandObjectsFromValue returns a pointer to a valid ExpandObjects
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExpandObjectsFromValue(v string) (*ExpandObjects, error) {
	ev := ExpandObjects(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExpandObjects: valid values are %v", v, AllowedExpandObjectsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExpandObjects) IsValid() bool {
	for _, existing := range AllowedExpandObjectsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExpandObjects value
func (v ExpandObjects) Ptr() *ExpandObjects {
	return &v
}

type NullableExpandObjects struct {
	value *ExpandObjects
	isSet bool
}

func (v NullableExpandObjects) Get() *ExpandObjects {
	return v.value
}

func (v *NullableExpandObjects) Set(val *ExpandObjects) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandObjects) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandObjects) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandObjects(val *ExpandObjects) *NullableExpandObjects {
	return &NullableExpandObjects{value: val, isSet: true}
}

func (v NullableExpandObjects) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandObjects) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

