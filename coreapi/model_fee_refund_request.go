/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the FeeRefundRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeRefundRequest{}

// FeeRefundRequest Specifies the fee to refund.
type FeeRefundRequest struct {
	// Unique identifier of the fee to be refunded.   You can find this token in the response of the original `/feecharges` or `/gpaorders` request used to assess the standalone fee or from the webhook corresponding to the original request. You can also send a `GET` request to `/transactions?type=fee.charges` to retrieve a list of fee transactions.
	OriginalFeeTransactionToken *string `json:"original_fee_transaction_token,omitempty"`
	// Descriptive metadata about the fee.
	Tags *string `json:"tags,omitempty"`
}

// NewFeeRefundRequest instantiates a new FeeRefundRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeRefundRequest() *FeeRefundRequest {
	this := FeeRefundRequest{}
	return &this
}

// NewFeeRefundRequestWithDefaults instantiates a new FeeRefundRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeRefundRequestWithDefaults() *FeeRefundRequest {
	this := FeeRefundRequest{}
	return &this
}

// GetOriginalFeeTransactionToken returns the OriginalFeeTransactionToken field value if set, zero value otherwise.
func (o *FeeRefundRequest) GetOriginalFeeTransactionToken() string {
	if o == nil || IsNil(o.OriginalFeeTransactionToken) {
		var ret string
		return ret
	}
	return *o.OriginalFeeTransactionToken
}

// GetOriginalFeeTransactionTokenOk returns a tuple with the OriginalFeeTransactionToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeRefundRequest) GetOriginalFeeTransactionTokenOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalFeeTransactionToken) {
		return nil, false
	}
	return o.OriginalFeeTransactionToken, true
}

// HasOriginalFeeTransactionToken returns a boolean if a field has been set.
func (o *FeeRefundRequest) HasOriginalFeeTransactionToken() bool {
	if o != nil && !IsNil(o.OriginalFeeTransactionToken) {
		return true
	}

	return false
}

// SetOriginalFeeTransactionToken gets a reference to the given string and assigns it to the OriginalFeeTransactionToken field.
func (o *FeeRefundRequest) SetOriginalFeeTransactionToken(v string) {
	o.OriginalFeeTransactionToken = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FeeRefundRequest) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeRefundRequest) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FeeRefundRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *FeeRefundRequest) SetTags(v string) {
	o.Tags = &v
}

func (o FeeRefundRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeRefundRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginalFeeTransactionToken) {
		toSerialize["original_fee_transaction_token"] = o.OriginalFeeTransactionToken
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableFeeRefundRequest struct {
	value *FeeRefundRequest
	isSet bool
}

func (v NullableFeeRefundRequest) Get() *FeeRefundRequest {
	return v.value
}

func (v *NullableFeeRefundRequest) Set(val *FeeRefundRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeRefundRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeRefundRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeRefundRequest(val *FeeRefundRequest) *NullableFeeRefundRequest {
	return &NullableFeeRefundRequest{value: val, isSet: true}
}

func (v NullableFeeRefundRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeRefundRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


