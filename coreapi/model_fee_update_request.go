/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the FeeUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeUpdateRequest{}

// FeeUpdateRequest struct for FeeUpdateRequest
type FeeUpdateRequest struct {
	// Indicates whether the fee is active.
	Active *bool `json:"active,omitempty"`
	// Amount of the fee.
	Amount *float32 `json:"amount,omitempty"`
	Category *string `json:"category,omitempty"`
	// Three-digit ISO 4217 currency code.
	CurrencyCode *string `json:"currency_code,omitempty"`
	FeeAttributes *FeeAttributes `json:"fee_attributes,omitempty"`
	// Name of the fee request.
	Name *string `json:"name,omitempty"`
	// Descriptive metadata about the fee.
	Tags *string `json:"tags,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewFeeUpdateRequest instantiates a new FeeUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeUpdateRequest() *FeeUpdateRequest {
	this := FeeUpdateRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// NewFeeUpdateRequestWithDefaults instantiates a new FeeUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeUpdateRequestWithDefaults() *FeeUpdateRequest {
	this := FeeUpdateRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *FeeUpdateRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeUpdateRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *FeeUpdateRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *FeeUpdateRequest) SetActive(v bool) {
	o.Active = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *FeeUpdateRequest) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeUpdateRequest) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *FeeUpdateRequest) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *FeeUpdateRequest) SetAmount(v float32) {
	o.Amount = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *FeeUpdateRequest) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeUpdateRequest) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *FeeUpdateRequest) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *FeeUpdateRequest) SetCategory(v string) {
	o.Category = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *FeeUpdateRequest) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeUpdateRequest) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *FeeUpdateRequest) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *FeeUpdateRequest) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetFeeAttributes returns the FeeAttributes field value if set, zero value otherwise.
func (o *FeeUpdateRequest) GetFeeAttributes() FeeAttributes {
	if o == nil || IsNil(o.FeeAttributes) {
		var ret FeeAttributes
		return ret
	}
	return *o.FeeAttributes
}

// GetFeeAttributesOk returns a tuple with the FeeAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeUpdateRequest) GetFeeAttributesOk() (*FeeAttributes, bool) {
	if o == nil || IsNil(o.FeeAttributes) {
		return nil, false
	}
	return o.FeeAttributes, true
}

// HasFeeAttributes returns a boolean if a field has been set.
func (o *FeeUpdateRequest) HasFeeAttributes() bool {
	if o != nil && !IsNil(o.FeeAttributes) {
		return true
	}

	return false
}

// SetFeeAttributes gets a reference to the given FeeAttributes and assigns it to the FeeAttributes field.
func (o *FeeUpdateRequest) SetFeeAttributes(v FeeAttributes) {
	o.FeeAttributes = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FeeUpdateRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FeeUpdateRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FeeUpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FeeUpdateRequest) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeUpdateRequest) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FeeUpdateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *FeeUpdateRequest) SetTags(v string) {
	o.Tags = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FeeUpdateRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeUpdateRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FeeUpdateRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FeeUpdateRequest) SetType(v string) {
	o.Type = &v
}

func (o FeeUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if !IsNil(o.FeeAttributes) {
		toSerialize["fee_attributes"] = o.FeeAttributes
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableFeeUpdateRequest struct {
	value *FeeUpdateRequest
	isSet bool
}

func (v NullableFeeUpdateRequest) Get() *FeeUpdateRequest {
	return v.value
}

func (v *NullableFeeUpdateRequest) Set(val *FeeUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeUpdateRequest(val *FeeUpdateRequest) *NullableFeeUpdateRequest {
	return &NullableFeeUpdateRequest{value: val, isSet: true}
}

func (v NullableFeeUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


