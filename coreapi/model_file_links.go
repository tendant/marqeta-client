/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the FileLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileLinks{}

// FileLinks Contains links to the file in different formats.
type FileLinks struct {
	// Link to the HTML version of the file.
	Html *string `json:"html,omitempty"`
	// Link to the JSON version of the file.
	Json *string `json:"json,omitempty"`
	// Link to the PDF version of the file.
	Pdf *string `json:"pdf,omitempty"`
}

// NewFileLinks instantiates a new FileLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileLinks() *FileLinks {
	this := FileLinks{}
	return &this
}

// NewFileLinksWithDefaults instantiates a new FileLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileLinksWithDefaults() *FileLinks {
	this := FileLinks{}
	return &this
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *FileLinks) GetHtml() string {
	if o == nil || IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLinks) GetHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *FileLinks) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *FileLinks) SetHtml(v string) {
	o.Html = &v
}

// GetJson returns the Json field value if set, zero value otherwise.
func (o *FileLinks) GetJson() string {
	if o == nil || IsNil(o.Json) {
		var ret string
		return ret
	}
	return *o.Json
}

// GetJsonOk returns a tuple with the Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLinks) GetJsonOk() (*string, bool) {
	if o == nil || IsNil(o.Json) {
		return nil, false
	}
	return o.Json, true
}

// HasJson returns a boolean if a field has been set.
func (o *FileLinks) HasJson() bool {
	if o != nil && !IsNil(o.Json) {
		return true
	}

	return false
}

// SetJson gets a reference to the given string and assigns it to the Json field.
func (o *FileLinks) SetJson(v string) {
	o.Json = &v
}

// GetPdf returns the Pdf field value if set, zero value otherwise.
func (o *FileLinks) GetPdf() string {
	if o == nil || IsNil(o.Pdf) {
		var ret string
		return ret
	}
	return *o.Pdf
}

// GetPdfOk returns a tuple with the Pdf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLinks) GetPdfOk() (*string, bool) {
	if o == nil || IsNil(o.Pdf) {
		return nil, false
	}
	return o.Pdf, true
}

// HasPdf returns a boolean if a field has been set.
func (o *FileLinks) HasPdf() bool {
	if o != nil && !IsNil(o.Pdf) {
		return true
	}

	return false
}

// SetPdf gets a reference to the given string and assigns it to the Pdf field.
func (o *FileLinks) SetPdf(v string) {
	o.Pdf = &v
}

func (o FileLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}
	if !IsNil(o.Json) {
		toSerialize["json"] = o.Json
	}
	if !IsNil(o.Pdf) {
		toSerialize["pdf"] = o.Pdf
	}
	return toSerialize, nil
}

type NullableFileLinks struct {
	value *FileLinks
	isSet bool
}

func (v NullableFileLinks) Get() *FileLinks {
	return v.value
}

func (v *NullableFileLinks) Set(val *FileLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableFileLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableFileLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileLinks(val *FileLinks) *NullableFileLinks {
	return &NullableFileLinks{value: val, isSet: true}
}

func (v NullableFileLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


