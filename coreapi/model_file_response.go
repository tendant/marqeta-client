/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the FileResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileResponse{}

// FileResponse struct for FileResponse
type FileResponse struct {
	FileType FileType `json:"file_type"`
	Links FileLinks `json:"links"`
	// Unique identifier used to acknowledge that the file has been disclosed to the applicant.  If the file was already disclosed, a null value is returned.  *NOTE*: The tracking token is only valid for 14 calendar days.
	TrackingToken *string `json:"tracking_token,omitempty"`
}

// NewFileResponse instantiates a new FileResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileResponse(fileType FileType, links FileLinks) *FileResponse {
	this := FileResponse{}
	this.FileType = fileType
	this.Links = links
	return &this
}

// NewFileResponseWithDefaults instantiates a new FileResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileResponseWithDefaults() *FileResponse {
	this := FileResponse{}
	return &this
}

// GetFileType returns the FileType field value
func (o *FileResponse) GetFileType() FileType {
	if o == nil {
		var ret FileType
		return ret
	}

	return o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value
// and a boolean to check if the value has been set.
func (o *FileResponse) GetFileTypeOk() (*FileType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileType, true
}

// SetFileType sets field value
func (o *FileResponse) SetFileType(v FileType) {
	o.FileType = v
}

// GetLinks returns the Links field value
func (o *FileResponse) GetLinks() FileLinks {
	if o == nil {
		var ret FileLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *FileResponse) GetLinksOk() (*FileLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *FileResponse) SetLinks(v FileLinks) {
	o.Links = v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *FileResponse) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileResponse) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *FileResponse) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *FileResponse) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

func (o FileResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_type"] = o.FileType
	toSerialize["links"] = o.Links
	if !IsNil(o.TrackingToken) {
		toSerialize["tracking_token"] = o.TrackingToken
	}
	return toSerialize, nil
}

type NullableFileResponse struct {
	value *FileResponse
	isSet bool
}

func (v NullableFileResponse) Get() *FileResponse {
	return v.value
}

func (v *NullableFileResponse) Set(val *FileResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileResponse(val *FileResponse) *NullableFileResponse {
	return &NullableFileResponse{value: val, isSet: true}
}

func (v NullableFileResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


