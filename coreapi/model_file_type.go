/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"fmt"
)

// FileType Type of file.  * `SOCT` - The Summary of Credit Terms (SOCT), which outlines the interest rates, interest charges, and fees associated with the credit account being offered to the user. * `REWARDS_DISCLOSURE_PRE_TERMS` - The Rewards Disclosure Pre-terms, which discloses detailed information about the rewards program on the credit account being offered to the user before a decision is rendered on their application. * `REWARDS_DISCLOSURE_POST_TERMS` - The Rewards Disclosure Post-terms, which discloses detailed information about the rewards program on the user's credit account if their application is approved. * `BENEFITS_DISCLOSURE` - The Benefits Disclosure, which which is given to a user if their application is approved and discloses detailed information about the benefits on the user's credit account. * `CARD_MEMBER_AGREEMENT` - The Card Member Agreement, which specifies the terms and conditions of the user's credit account, including the interest rates, interest charges, fees, minimum payment calculations, and more. * `PRIVACY_POLICY` - The Privacy Policy, which explains how the information on the user's application is collected, handled, and processed. * `E_DISCLOSURE` - The eDisclosure, which states that the user has agreed to receive disclosures electronically. * `TERMS_SCHEDULE` - The Terms Schedule, which is given to a user if their application is approved and specifies the interest rate details on the user's credit account. * `NOAA` - The Notice of Adverse Action (NOAA), which is given to a user if their application is declined and informs them of the specific reasons why they were denied a credit account.
type FileType string

// List of FileType
const (
	FILETYPE_SOCT FileType = "SOCT"
	FILETYPE_REWARDS_DISCLOSURE_PRE_TERMS FileType = "REWARDS_DISCLOSURE_PRE_TERMS"
	FILETYPE_REWARDS_DISCLOSURE_POST_TERMS FileType = "REWARDS_DISCLOSURE_POST_TERMS"
	FILETYPE_BENEFITS_DISCLOSURE FileType = "BENEFITS_DISCLOSURE"
	FILETYPE_CARD_MEMBER_AGREEMENT FileType = "CARD_MEMBER_AGREEMENT"
	FILETYPE_PRIVACY_POLICY FileType = "PRIVACY_POLICY"
	FILETYPE_E_DISCLOSURE FileType = "E_DISCLOSURE"
	FILETYPE_TERMS_SCHEDULE FileType = "TERMS_SCHEDULE"
	FILETYPE_NOAA FileType = "NOAA"
)

// All allowed values of FileType enum
var AllowedFileTypeEnumValues = []FileType{
	"SOCT",
	"REWARDS_DISCLOSURE_PRE_TERMS",
	"REWARDS_DISCLOSURE_POST_TERMS",
	"BENEFITS_DISCLOSURE",
	"CARD_MEMBER_AGREEMENT",
	"PRIVACY_POLICY",
	"E_DISCLOSURE",
	"TERMS_SCHEDULE",
	"NOAA",
}

func (v *FileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileType(value)
	for _, existing := range AllowedFileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileType", value)
}

// NewFileTypeFromValue returns a pointer to a valid FileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileTypeFromValue(v string) (*FileType, error) {
	ev := FileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileType: valid values are %v", v, AllowedFileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileType) IsValid() bool {
	for _, existing := range AllowedFileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileType value
func (v FileType) Ptr() *FileType {
	return &v
}

type NullableFileType struct {
	value *FileType
	isSet bool
}

func (v NullableFileType) Get() *FileType {
	return v.value
}

func (v *NullableFileType) Set(val *FileType) {
	v.value = val
	v.isSet = true
}

func (v NullableFileType) IsSet() bool {
	return v.isSet
}

func (v *NullableFileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileType(val *FileType) *NullableFileType {
	return &NullableFileType{value: val, isSet: true}
}

func (v NullableFileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

