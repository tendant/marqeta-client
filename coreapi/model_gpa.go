/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the Gpa type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Gpa{}

// Gpa Defines the type of order.
type Gpa struct {
	// Available balance on the card after the reload has completed.  This value must be greater than or equal to the value of `trigger_amount`. Note that this is not the same as the amount added to the card, which will vary from reload to reload.
	ReloadAmount float32 `json:"reload_amount"`
	// Threshold that determines when the reload happens.  The reload is triggered when the card balance falls below this amount.
	TriggerAmount float32 `json:"trigger_amount"`
}

// NewGpa instantiates a new Gpa object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGpa(reloadAmount float32, triggerAmount float32) *Gpa {
	this := Gpa{}
	this.ReloadAmount = reloadAmount
	this.TriggerAmount = triggerAmount
	return &this
}

// NewGpaWithDefaults instantiates a new Gpa object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGpaWithDefaults() *Gpa {
	this := Gpa{}
	return &this
}

// GetReloadAmount returns the ReloadAmount field value
func (o *Gpa) GetReloadAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ReloadAmount
}

// GetReloadAmountOk returns a tuple with the ReloadAmount field value
// and a boolean to check if the value has been set.
func (o *Gpa) GetReloadAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReloadAmount, true
}

// SetReloadAmount sets field value
func (o *Gpa) SetReloadAmount(v float32) {
	o.ReloadAmount = v
}

// GetTriggerAmount returns the TriggerAmount field value
func (o *Gpa) GetTriggerAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TriggerAmount
}

// GetTriggerAmountOk returns a tuple with the TriggerAmount field value
// and a boolean to check if the value has been set.
func (o *Gpa) GetTriggerAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerAmount, true
}

// SetTriggerAmount sets field value
func (o *Gpa) SetTriggerAmount(v float32) {
	o.TriggerAmount = v
}

func (o Gpa) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Gpa) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reload_amount"] = o.ReloadAmount
	toSerialize["trigger_amount"] = o.TriggerAmount
	return toSerialize, nil
}

type NullableGpa struct {
	value *Gpa
	isSet bool
}

func (v NullableGpa) Get() *Gpa {
	return v.value
}

func (v *NullableGpa) Set(val *Gpa) {
	v.value = val
	v.isSet = true
}

func (v NullableGpa) IsSet() bool {
	return v.isSet
}

func (v *NullableGpa) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGpa(val *Gpa) *NullableGpa {
	return &NullableGpa{value: val, isSet: true}
}

func (v NullableGpa) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGpa) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


