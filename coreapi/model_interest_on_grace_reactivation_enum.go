/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// InterestOnGraceReactivationEnum Determines whether to charge or waive interest for the billing period when the balance is paid off.
type InterestOnGraceReactivationEnum string

// List of InterestOnGraceReactivationEnum
const (
	INTERESTONGRACEREACTIVATIONENUM_ACCRUE_FULL_CYCLE InterestOnGraceReactivationEnum = "ACCRUE_FULL_CYCLE"
	INTERESTONGRACEREACTIVATIONENUM_ACCRUE_PAYMENT_DATE InterestOnGraceReactivationEnum = "ACCRUE_PAYMENT_DATE"
	INTERESTONGRACEREACTIVATIONENUM_WAIVE InterestOnGraceReactivationEnum = "WAIVE"
)

// All allowed values of InterestOnGraceReactivationEnum enum
var AllowedInterestOnGraceReactivationEnumEnumValues = []InterestOnGraceReactivationEnum{
	"ACCRUE_FULL_CYCLE",
	"ACCRUE_PAYMENT_DATE",
	"WAIVE",
}

func (v *InterestOnGraceReactivationEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterestOnGraceReactivationEnum(value)
	for _, existing := range AllowedInterestOnGraceReactivationEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterestOnGraceReactivationEnum", value)
}

// NewInterestOnGraceReactivationEnumFromValue returns a pointer to a valid InterestOnGraceReactivationEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterestOnGraceReactivationEnumFromValue(v string) (*InterestOnGraceReactivationEnum, error) {
	ev := InterestOnGraceReactivationEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterestOnGraceReactivationEnum: valid values are %v", v, AllowedInterestOnGraceReactivationEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterestOnGraceReactivationEnum) IsValid() bool {
	for _, existing := range AllowedInterestOnGraceReactivationEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterestOnGraceReactivationEnum value
func (v InterestOnGraceReactivationEnum) Ptr() *InterestOnGraceReactivationEnum {
	return &v
}

type NullableInterestOnGraceReactivationEnum struct {
	value *InterestOnGraceReactivationEnum
	isSet bool
}

func (v NullableInterestOnGraceReactivationEnum) Get() *InterestOnGraceReactivationEnum {
	return v.value
}

func (v *NullableInterestOnGraceReactivationEnum) Set(val *InterestOnGraceReactivationEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableInterestOnGraceReactivationEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableInterestOnGraceReactivationEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterestOnGraceReactivationEnum(val *InterestOnGraceReactivationEnum) *NullableInterestOnGraceReactivationEnum {
	return &NullableInterestOnGraceReactivationEnum{value: val, isSet: true}
}

func (v NullableInterestOnGraceReactivationEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterestOnGraceReactivationEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

