/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the JitFundingProgramFundingSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JitFundingProgramFundingSource{}

// JitFundingProgramFundingSource struct for JitFundingProgramFundingSource
type JitFundingProgramFundingSource struct {
	// Specifies whether JIT Funding is enabled or disabled for the program funding source. A value of `true` indicates that the program funding source is enabled and will be debited when swipes occur.
	Enabled *bool `json:"enabled,omitempty"`
	// Unique identifier of the already existing funding source. Required if JIT Funding is enabled.
	FundingSourceToken *string `json:"funding_source_token,omitempty"`
	// Specifies the return destination for refunds in the case of a transaction reversal. `PROGRAM_FUNDING_SOURCE` returns funds to the program funding source. `GPA` returns the funds to the user's GPA.
	RefundsDestination *string `json:"refunds_destination,omitempty"`
}

// NewJitFundingProgramFundingSource instantiates a new JitFundingProgramFundingSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJitFundingProgramFundingSource() *JitFundingProgramFundingSource {
	this := JitFundingProgramFundingSource{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewJitFundingProgramFundingSourceWithDefaults instantiates a new JitFundingProgramFundingSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJitFundingProgramFundingSourceWithDefaults() *JitFundingProgramFundingSource {
	this := JitFundingProgramFundingSource{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *JitFundingProgramFundingSource) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JitFundingProgramFundingSource) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *JitFundingProgramFundingSource) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *JitFundingProgramFundingSource) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFundingSourceToken returns the FundingSourceToken field value if set, zero value otherwise.
func (o *JitFundingProgramFundingSource) GetFundingSourceToken() string {
	if o == nil || IsNil(o.FundingSourceToken) {
		var ret string
		return ret
	}
	return *o.FundingSourceToken
}

// GetFundingSourceTokenOk returns a tuple with the FundingSourceToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JitFundingProgramFundingSource) GetFundingSourceTokenOk() (*string, bool) {
	if o == nil || IsNil(o.FundingSourceToken) {
		return nil, false
	}
	return o.FundingSourceToken, true
}

// HasFundingSourceToken returns a boolean if a field has been set.
func (o *JitFundingProgramFundingSource) HasFundingSourceToken() bool {
	if o != nil && !IsNil(o.FundingSourceToken) {
		return true
	}

	return false
}

// SetFundingSourceToken gets a reference to the given string and assigns it to the FundingSourceToken field.
func (o *JitFundingProgramFundingSource) SetFundingSourceToken(v string) {
	o.FundingSourceToken = &v
}

// GetRefundsDestination returns the RefundsDestination field value if set, zero value otherwise.
func (o *JitFundingProgramFundingSource) GetRefundsDestination() string {
	if o == nil || IsNil(o.RefundsDestination) {
		var ret string
		return ret
	}
	return *o.RefundsDestination
}

// GetRefundsDestinationOk returns a tuple with the RefundsDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JitFundingProgramFundingSource) GetRefundsDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.RefundsDestination) {
		return nil, false
	}
	return o.RefundsDestination, true
}

// HasRefundsDestination returns a boolean if a field has been set.
func (o *JitFundingProgramFundingSource) HasRefundsDestination() bool {
	if o != nil && !IsNil(o.RefundsDestination) {
		return true
	}

	return false
}

// SetRefundsDestination gets a reference to the given string and assigns it to the RefundsDestination field.
func (o *JitFundingProgramFundingSource) SetRefundsDestination(v string) {
	o.RefundsDestination = &v
}

func (o JitFundingProgramFundingSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JitFundingProgramFundingSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.FundingSourceToken) {
		toSerialize["funding_source_token"] = o.FundingSourceToken
	}
	if !IsNil(o.RefundsDestination) {
		toSerialize["refunds_destination"] = o.RefundsDestination
	}
	return toSerialize, nil
}

type NullableJitFundingProgramFundingSource struct {
	value *JitFundingProgramFundingSource
	isSet bool
}

func (v NullableJitFundingProgramFundingSource) Get() *JitFundingProgramFundingSource {
	return v.value
}

func (v *NullableJitFundingProgramFundingSource) Set(val *JitFundingProgramFundingSource) {
	v.value = val
	v.isSet = true
}

func (v NullableJitFundingProgramFundingSource) IsSet() bool {
	return v.isSet
}

func (v *NullableJitFundingProgramFundingSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJitFundingProgramFundingSource(val *JitFundingProgramFundingSource) *NullableJitFundingProgramFundingSource {
	return &NullableJitFundingProgramFundingSource{value: val, isSet: true}
}

func (v NullableJitFundingProgramFundingSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJitFundingProgramFundingSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


