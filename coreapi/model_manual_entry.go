/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the ManualEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManualEntry{}

// ManualEntry struct for ManualEntry
type ManualEntry struct {
	AddressVerification *DigitalWalletTokenAddressVerification `json:"address_verification,omitempty"`
	// Specifies if manual entry is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewManualEntry instantiates a new ManualEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualEntry() *ManualEntry {
	this := ManualEntry{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewManualEntryWithDefaults instantiates a new ManualEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualEntryWithDefaults() *ManualEntry {
	this := ManualEntry{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetAddressVerification returns the AddressVerification field value if set, zero value otherwise.
func (o *ManualEntry) GetAddressVerification() DigitalWalletTokenAddressVerification {
	if o == nil || IsNil(o.AddressVerification) {
		var ret DigitalWalletTokenAddressVerification
		return ret
	}
	return *o.AddressVerification
}

// GetAddressVerificationOk returns a tuple with the AddressVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualEntry) GetAddressVerificationOk() (*DigitalWalletTokenAddressVerification, bool) {
	if o == nil || IsNil(o.AddressVerification) {
		return nil, false
	}
	return o.AddressVerification, true
}

// HasAddressVerification returns a boolean if a field has been set.
func (o *ManualEntry) HasAddressVerification() bool {
	if o != nil && !IsNil(o.AddressVerification) {
		return true
	}

	return false
}

// SetAddressVerification gets a reference to the given DigitalWalletTokenAddressVerification and assigns it to the AddressVerification field.
func (o *ManualEntry) SetAddressVerification(v DigitalWalletTokenAddressVerification) {
	o.AddressVerification = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ManualEntry) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualEntry) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ManualEntry) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ManualEntry) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ManualEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManualEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressVerification) {
		toSerialize["address_verification"] = o.AddressVerification
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableManualEntry struct {
	value *ManualEntry
	isSet bool
}

func (v NullableManualEntry) Get() *ManualEntry {
	return v.value
}

func (v *NullableManualEntry) Set(val *ManualEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableManualEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableManualEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualEntry(val *ManualEntry) *NullableManualEntry {
	return &NullableManualEntry{value: val, isSet: true}
}

func (v NullableManualEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


