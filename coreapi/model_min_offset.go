/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the MinOffset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MinOffset{}

// MinOffset Specifies the minimum length of time after the date of issue for which the cards are valid.
type MinOffset struct {
	// Specifies the time unit of the `value` field.
	Unit *string `json:"unit,omitempty"`
	// Specifies the number of time units (as defined by the `unit` field) for which cards of this card product type are valid. Cards expire `value` x `unit` after the date of issue.  This number is rounded as follows:  * *YEARS*  Rounds up to the last second of the last day of the month of expiration. For example, if the issue date is 1 Jan 2021 and `value = 1`, the cards expire on the last day of Jan 2022.  * *MONTHS*  Rounds up to the last second of the last day of the month of expiration. For example, if the issue date is 1 May 2022 and `value = 1`, the cards expire on the last day of June 2022.  * *DAYS*  Rounds up to the last second of the day of expiration.  * *HOURS*, *MINUTES*, *SECONDS*  No rounding.
	Value *int32 `json:"value,omitempty"`
}

// NewMinOffset instantiates a new MinOffset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinOffset() *MinOffset {
	this := MinOffset{}
	return &this
}

// NewMinOffsetWithDefaults instantiates a new MinOffset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinOffsetWithDefaults() *MinOffset {
	this := MinOffset{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *MinOffset) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinOffset) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *MinOffset) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *MinOffset) SetUnit(v string) {
	o.Unit = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MinOffset) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinOffset) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MinOffset) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *MinOffset) SetValue(v int32) {
	o.Value = &v
}

func (o MinOffset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MinOffset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableMinOffset struct {
	value *MinOffset
	isSet bool
}

func (v NullableMinOffset) Get() *MinOffset {
	return v.value
}

func (v *NullableMinOffset) Set(val *MinOffset) {
	v.value = val
	v.isSet = true
}

func (v NullableMinOffset) IsSet() bool {
	return v.isSet
}

func (v *NullableMinOffset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinOffset(val *MinOffset) *NullableMinOffset {
	return &NullableMinOffset{value: val, isSet: true}
}

func (v NullableMinOffset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinOffset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


