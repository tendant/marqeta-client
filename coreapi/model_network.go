/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the Network type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Network{}

// Network Contains information from the card network about currency conversion, including the original currency of the transaction, the amount of the transaction in the original currency, and the conversion rate.
type Network struct {
	// Conversion rate between the origination currency and the settlement currency.  Returned when the transaction currency is different from the origination currency.
	ConversionRate *float32 `json:"conversion_rate,omitempty"`
	// Indicates whether currency conversion was performed dynamically at the point of sale.
	DynamicCurrencyConversion *bool `json:"dynamic_currency_conversion,omitempty"`
	// Amount of the transaction in the currency in which it originated.
	OriginalAmount *float32 `json:"original_amount,omitempty"`
	// Currency type of the origination currency.
	OriginalCurrencyCode *string `json:"original_currency_code,omitempty"`
	SettlementData *SettlementData `json:"settlement_data,omitempty"`
}

// NewNetwork instantiates a new Network object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetwork() *Network {
	this := Network{}
	var dynamicCurrencyConversion bool = false
	this.DynamicCurrencyConversion = &dynamicCurrencyConversion
	return &this
}

// NewNetworkWithDefaults instantiates a new Network object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkWithDefaults() *Network {
	this := Network{}
	var dynamicCurrencyConversion bool = false
	this.DynamicCurrencyConversion = &dynamicCurrencyConversion
	return &this
}

// GetConversionRate returns the ConversionRate field value if set, zero value otherwise.
func (o *Network) GetConversionRate() float32 {
	if o == nil || IsNil(o.ConversionRate) {
		var ret float32
		return ret
	}
	return *o.ConversionRate
}

// GetConversionRateOk returns a tuple with the ConversionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetConversionRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ConversionRate) {
		return nil, false
	}
	return o.ConversionRate, true
}

// HasConversionRate returns a boolean if a field has been set.
func (o *Network) HasConversionRate() bool {
	if o != nil && !IsNil(o.ConversionRate) {
		return true
	}

	return false
}

// SetConversionRate gets a reference to the given float32 and assigns it to the ConversionRate field.
func (o *Network) SetConversionRate(v float32) {
	o.ConversionRate = &v
}

// GetDynamicCurrencyConversion returns the DynamicCurrencyConversion field value if set, zero value otherwise.
func (o *Network) GetDynamicCurrencyConversion() bool {
	if o == nil || IsNil(o.DynamicCurrencyConversion) {
		var ret bool
		return ret
	}
	return *o.DynamicCurrencyConversion
}

// GetDynamicCurrencyConversionOk returns a tuple with the DynamicCurrencyConversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetDynamicCurrencyConversionOk() (*bool, bool) {
	if o == nil || IsNil(o.DynamicCurrencyConversion) {
		return nil, false
	}
	return o.DynamicCurrencyConversion, true
}

// HasDynamicCurrencyConversion returns a boolean if a field has been set.
func (o *Network) HasDynamicCurrencyConversion() bool {
	if o != nil && !IsNil(o.DynamicCurrencyConversion) {
		return true
	}

	return false
}

// SetDynamicCurrencyConversion gets a reference to the given bool and assigns it to the DynamicCurrencyConversion field.
func (o *Network) SetDynamicCurrencyConversion(v bool) {
	o.DynamicCurrencyConversion = &v
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *Network) GetOriginalAmount() float32 {
	if o == nil || IsNil(o.OriginalAmount) {
		var ret float32
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetOriginalAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalAmount) {
		return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *Network) HasOriginalAmount() bool {
	if o != nil && !IsNil(o.OriginalAmount) {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given float32 and assigns it to the OriginalAmount field.
func (o *Network) SetOriginalAmount(v float32) {
	o.OriginalAmount = &v
}

// GetOriginalCurrencyCode returns the OriginalCurrencyCode field value if set, zero value otherwise.
func (o *Network) GetOriginalCurrencyCode() string {
	if o == nil || IsNil(o.OriginalCurrencyCode) {
		var ret string
		return ret
	}
	return *o.OriginalCurrencyCode
}

// GetOriginalCurrencyCodeOk returns a tuple with the OriginalCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetOriginalCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalCurrencyCode) {
		return nil, false
	}
	return o.OriginalCurrencyCode, true
}

// HasOriginalCurrencyCode returns a boolean if a field has been set.
func (o *Network) HasOriginalCurrencyCode() bool {
	if o != nil && !IsNil(o.OriginalCurrencyCode) {
		return true
	}

	return false
}

// SetOriginalCurrencyCode gets a reference to the given string and assigns it to the OriginalCurrencyCode field.
func (o *Network) SetOriginalCurrencyCode(v string) {
	o.OriginalCurrencyCode = &v
}

// GetSettlementData returns the SettlementData field value if set, zero value otherwise.
func (o *Network) GetSettlementData() SettlementData {
	if o == nil || IsNil(o.SettlementData) {
		var ret SettlementData
		return ret
	}
	return *o.SettlementData
}

// GetSettlementDataOk returns a tuple with the SettlementData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Network) GetSettlementDataOk() (*SettlementData, bool) {
	if o == nil || IsNil(o.SettlementData) {
		return nil, false
	}
	return o.SettlementData, true
}

// HasSettlementData returns a boolean if a field has been set.
func (o *Network) HasSettlementData() bool {
	if o != nil && !IsNil(o.SettlementData) {
		return true
	}

	return false
}

// SetSettlementData gets a reference to the given SettlementData and assigns it to the SettlementData field.
func (o *Network) SetSettlementData(v SettlementData) {
	o.SettlementData = &v
}

func (o Network) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Network) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConversionRate) {
		toSerialize["conversion_rate"] = o.ConversionRate
	}
	if !IsNil(o.DynamicCurrencyConversion) {
		toSerialize["dynamic_currency_conversion"] = o.DynamicCurrencyConversion
	}
	if !IsNil(o.OriginalAmount) {
		toSerialize["original_amount"] = o.OriginalAmount
	}
	if !IsNil(o.OriginalCurrencyCode) {
		toSerialize["original_currency_code"] = o.OriginalCurrencyCode
	}
	if !IsNil(o.SettlementData) {
		toSerialize["settlement_data"] = o.SettlementData
	}
	return toSerialize, nil
}

type NullableNetwork struct {
	value *Network
	isSet bool
}

func (v NullableNetwork) Get() *Network {
	return v.value
}

func (v *NullableNetwork) Set(val *Network) {
	v.value = val
	v.isSet = true
}

func (v NullableNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetwork(val *Network) *NullableNetwork {
	return &NullableNetwork{value: val, isSet: true}
}

func (v NullableNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


