/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// PaymentScheduleAmountCategory A category used to determine the actual payment amount.
type PaymentScheduleAmountCategory string

// List of PaymentScheduleAmountCategory
const (
	PAYMENTSCHEDULEAMOUNTCATEGORY_FIXED PaymentScheduleAmountCategory = "FIXED"
	PAYMENTSCHEDULEAMOUNTCATEGORY_MINIMUM_PAYMENT PaymentScheduleAmountCategory = "MINIMUM_PAYMENT"
	PAYMENTSCHEDULEAMOUNTCATEGORY_REMAINING_STATEMENT_BALANCE PaymentScheduleAmountCategory = "REMAINING_STATEMENT_BALANCE"
	PAYMENTSCHEDULEAMOUNTCATEGORY_CURRENT_BALANCE PaymentScheduleAmountCategory = "CURRENT_BALANCE"
)

// All allowed values of PaymentScheduleAmountCategory enum
var AllowedPaymentScheduleAmountCategoryEnumValues = []PaymentScheduleAmountCategory{
	"FIXED",
	"MINIMUM_PAYMENT",
	"REMAINING_STATEMENT_BALANCE",
	"CURRENT_BALANCE",
}

func (v *PaymentScheduleAmountCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentScheduleAmountCategory(value)
	for _, existing := range AllowedPaymentScheduleAmountCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentScheduleAmountCategory", value)
}

// NewPaymentScheduleAmountCategoryFromValue returns a pointer to a valid PaymentScheduleAmountCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentScheduleAmountCategoryFromValue(v string) (*PaymentScheduleAmountCategory, error) {
	ev := PaymentScheduleAmountCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentScheduleAmountCategory: valid values are %v", v, AllowedPaymentScheduleAmountCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentScheduleAmountCategory) IsValid() bool {
	for _, existing := range AllowedPaymentScheduleAmountCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentScheduleAmountCategory value
func (v PaymentScheduleAmountCategory) Ptr() *PaymentScheduleAmountCategory {
	return &v
}

type NullablePaymentScheduleAmountCategory struct {
	value *PaymentScheduleAmountCategory
	isSet bool
}

func (v NullablePaymentScheduleAmountCategory) Get() *PaymentScheduleAmountCategory {
	return v.value
}

func (v *NullablePaymentScheduleAmountCategory) Set(val *PaymentScheduleAmountCategory) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentScheduleAmountCategory) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentScheduleAmountCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentScheduleAmountCategory(val *PaymentScheduleAmountCategory) *NullablePaymentScheduleAmountCategory {
	return &NullablePaymentScheduleAmountCategory{value: val, isSet: true}
}

func (v NullablePaymentScheduleAmountCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentScheduleAmountCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

