/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"fmt"
)

// PaymentScheduleFrequency Defines how often to make a scheduled payment.
type PaymentScheduleFrequency string

// List of PaymentScheduleFrequency
const (
	PAYMENTSCHEDULEFREQUENCY_ONCE PaymentScheduleFrequency = "ONCE"
	PAYMENTSCHEDULEFREQUENCY_MONTHLY PaymentScheduleFrequency = "MONTHLY"
)

// All allowed values of PaymentScheduleFrequency enum
var AllowedPaymentScheduleFrequencyEnumValues = []PaymentScheduleFrequency{
	"ONCE",
	"MONTHLY",
}

func (v *PaymentScheduleFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentScheduleFrequency(value)
	for _, existing := range AllowedPaymentScheduleFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentScheduleFrequency", value)
}

// NewPaymentScheduleFrequencyFromValue returns a pointer to a valid PaymentScheduleFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentScheduleFrequencyFromValue(v string) (*PaymentScheduleFrequency, error) {
	ev := PaymentScheduleFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentScheduleFrequency: valid values are %v", v, AllowedPaymentScheduleFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentScheduleFrequency) IsValid() bool {
	for _, existing := range AllowedPaymentScheduleFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentScheduleFrequency value
func (v PaymentScheduleFrequency) Ptr() *PaymentScheduleFrequency {
	return &v
}

type NullablePaymentScheduleFrequency struct {
	value *PaymentScheduleFrequency
	isSet bool
}

func (v NullablePaymentScheduleFrequency) Get() *PaymentScheduleFrequency {
	return v.value
}

func (v *NullablePaymentScheduleFrequency) Set(val *PaymentScheduleFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentScheduleFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentScheduleFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentScheduleFrequency(val *PaymentScheduleFrequency) *NullablePaymentScheduleFrequency {
	return &NullablePaymentScheduleFrequency{value: val, isSet: true}
}

func (v NullablePaymentScheduleFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentScheduleFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

