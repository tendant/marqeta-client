/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the PeriodicFeeSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeriodicFeeSchedule{}

// PeriodicFeeSchedule periodic fee schedules on account
type PeriodicFeeSchedule struct {
	// fee amount
	Amount *float32 `json:"amount,omitempty"`
	// date the fee becomes effective
	EffectiveDate *string `json:"effective_date,omitempty"`
	// date of the next time fee will be charged
	NextFeeImpactDate *string `json:"next_fee_impact_date,omitempty"`
	// type of fee to be charged
	Type *string `json:"type,omitempty"`
}

// NewPeriodicFeeSchedule instantiates a new PeriodicFeeSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeriodicFeeSchedule() *PeriodicFeeSchedule {
	this := PeriodicFeeSchedule{}
	return &this
}

// NewPeriodicFeeScheduleWithDefaults instantiates a new PeriodicFeeSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeriodicFeeScheduleWithDefaults() *PeriodicFeeSchedule {
	this := PeriodicFeeSchedule{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PeriodicFeeSchedule) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodicFeeSchedule) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PeriodicFeeSchedule) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *PeriodicFeeSchedule) SetAmount(v float32) {
	o.Amount = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *PeriodicFeeSchedule) GetEffectiveDate() string {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret string
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodicFeeSchedule) GetEffectiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *PeriodicFeeSchedule) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given string and assigns it to the EffectiveDate field.
func (o *PeriodicFeeSchedule) SetEffectiveDate(v string) {
	o.EffectiveDate = &v
}

// GetNextFeeImpactDate returns the NextFeeImpactDate field value if set, zero value otherwise.
func (o *PeriodicFeeSchedule) GetNextFeeImpactDate() string {
	if o == nil || IsNil(o.NextFeeImpactDate) {
		var ret string
		return ret
	}
	return *o.NextFeeImpactDate
}

// GetNextFeeImpactDateOk returns a tuple with the NextFeeImpactDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodicFeeSchedule) GetNextFeeImpactDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextFeeImpactDate) {
		return nil, false
	}
	return o.NextFeeImpactDate, true
}

// HasNextFeeImpactDate returns a boolean if a field has been set.
func (o *PeriodicFeeSchedule) HasNextFeeImpactDate() bool {
	if o != nil && !IsNil(o.NextFeeImpactDate) {
		return true
	}

	return false
}

// SetNextFeeImpactDate gets a reference to the given string and assigns it to the NextFeeImpactDate field.
func (o *PeriodicFeeSchedule) SetNextFeeImpactDate(v string) {
	o.NextFeeImpactDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PeriodicFeeSchedule) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodicFeeSchedule) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PeriodicFeeSchedule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PeriodicFeeSchedule) SetType(v string) {
	o.Type = &v
}

func (o PeriodicFeeSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeriodicFeeSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effective_date"] = o.EffectiveDate
	}
	if !IsNil(o.NextFeeImpactDate) {
		toSerialize["next_fee_impact_date"] = o.NextFeeImpactDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePeriodicFeeSchedule struct {
	value *PeriodicFeeSchedule
	isSet bool
}

func (v NullablePeriodicFeeSchedule) Get() *PeriodicFeeSchedule {
	return v.value
}

func (v *NullablePeriodicFeeSchedule) Set(val *PeriodicFeeSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodicFeeSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodicFeeSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodicFeeSchedule(val *PeriodicFeeSchedule) *NullablePeriodicFeeSchedule {
	return &NullablePeriodicFeeSchedule{value: val, isSet: true}
}

func (v NullablePeriodicFeeSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodicFeeSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


