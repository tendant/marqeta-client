/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the Poi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Poi{}

// Poi Governs the point of interaction.
type Poi struct {
	// If set to `true`, cards can be used for withdrawing cash at an ATM and for receiving cash back at a point of sale (POS).
	Atm *bool `json:"atm,omitempty"`
	// If set to `true`, cards can be used for online purchases.
	Ecommerce *bool `json:"ecommerce,omitempty"`
	Other *OtherPoi `json:"other,omitempty"`
}

// NewPoi instantiates a new Poi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoi() *Poi {
	this := Poi{}
	var atm bool = false
	this.Atm = &atm
	var ecommerce bool = true
	this.Ecommerce = &ecommerce
	return &this
}

// NewPoiWithDefaults instantiates a new Poi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoiWithDefaults() *Poi {
	this := Poi{}
	var atm bool = false
	this.Atm = &atm
	var ecommerce bool = true
	this.Ecommerce = &ecommerce
	return &this
}

// GetAtm returns the Atm field value if set, zero value otherwise.
func (o *Poi) GetAtm() bool {
	if o == nil || IsNil(o.Atm) {
		var ret bool
		return ret
	}
	return *o.Atm
}

// GetAtmOk returns a tuple with the Atm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Poi) GetAtmOk() (*bool, bool) {
	if o == nil || IsNil(o.Atm) {
		return nil, false
	}
	return o.Atm, true
}

// HasAtm returns a boolean if a field has been set.
func (o *Poi) HasAtm() bool {
	if o != nil && !IsNil(o.Atm) {
		return true
	}

	return false
}

// SetAtm gets a reference to the given bool and assigns it to the Atm field.
func (o *Poi) SetAtm(v bool) {
	o.Atm = &v
}

// GetEcommerce returns the Ecommerce field value if set, zero value otherwise.
func (o *Poi) GetEcommerce() bool {
	if o == nil || IsNil(o.Ecommerce) {
		var ret bool
		return ret
	}
	return *o.Ecommerce
}

// GetEcommerceOk returns a tuple with the Ecommerce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Poi) GetEcommerceOk() (*bool, bool) {
	if o == nil || IsNil(o.Ecommerce) {
		return nil, false
	}
	return o.Ecommerce, true
}

// HasEcommerce returns a boolean if a field has been set.
func (o *Poi) HasEcommerce() bool {
	if o != nil && !IsNil(o.Ecommerce) {
		return true
	}

	return false
}

// SetEcommerce gets a reference to the given bool and assigns it to the Ecommerce field.
func (o *Poi) SetEcommerce(v bool) {
	o.Ecommerce = &v
}

// GetOther returns the Other field value if set, zero value otherwise.
func (o *Poi) GetOther() OtherPoi {
	if o == nil || IsNil(o.Other) {
		var ret OtherPoi
		return ret
	}
	return *o.Other
}

// GetOtherOk returns a tuple with the Other field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Poi) GetOtherOk() (*OtherPoi, bool) {
	if o == nil || IsNil(o.Other) {
		return nil, false
	}
	return o.Other, true
}

// HasOther returns a boolean if a field has been set.
func (o *Poi) HasOther() bool {
	if o != nil && !IsNil(o.Other) {
		return true
	}

	return false
}

// SetOther gets a reference to the given OtherPoi and assigns it to the Other field.
func (o *Poi) SetOther(v OtherPoi) {
	o.Other = &v
}

func (o Poi) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Poi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Atm) {
		toSerialize["atm"] = o.Atm
	}
	if !IsNil(o.Ecommerce) {
		toSerialize["ecommerce"] = o.Ecommerce
	}
	if !IsNil(o.Other) {
		toSerialize["other"] = o.Other
	}
	return toSerialize, nil
}

type NullablePoi struct {
	value *Poi
	isSet bool
}

func (v NullablePoi) Get() *Poi {
	return v.value
}

func (v *NullablePoi) Set(val *Poi) {
	v.value = val
	v.isSet = true
}

func (v NullablePoi) IsSet() bool {
	return v.isSet
}

func (v *NullablePoi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoi(val *Poi) *NullablePoi {
	return &NullablePoi{value: val, isSet: true}
}

func (v NullablePoi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


