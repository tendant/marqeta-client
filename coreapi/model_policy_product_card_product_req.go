/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the PolicyProductCardProductReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyProductCardProductReq{}

// PolicyProductCardProductReq Contains information on the card products associated with the credit product policy.
type PolicyProductCardProductReq struct {
	Level PolicyProductCardProductLevel `json:"level"`
	// Unique identifier of the card product.
	Token string `json:"token"`
}

// NewPolicyProductCardProductReq instantiates a new PolicyProductCardProductReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyProductCardProductReq(level PolicyProductCardProductLevel, token string) *PolicyProductCardProductReq {
	this := PolicyProductCardProductReq{}
	this.Level = level
	this.Token = token
	return &this
}

// NewPolicyProductCardProductReqWithDefaults instantiates a new PolicyProductCardProductReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyProductCardProductReqWithDefaults() *PolicyProductCardProductReq {
	this := PolicyProductCardProductReq{}
	return &this
}

// GetLevel returns the Level field value
func (o *PolicyProductCardProductReq) GetLevel() PolicyProductCardProductLevel {
	if o == nil {
		var ret PolicyProductCardProductLevel
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *PolicyProductCardProductReq) GetLevelOk() (*PolicyProductCardProductLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *PolicyProductCardProductReq) SetLevel(v PolicyProductCardProductLevel) {
	o.Level = v
}

// GetToken returns the Token field value
func (o *PolicyProductCardProductReq) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *PolicyProductCardProductReq) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *PolicyProductCardProductReq) SetToken(v string) {
	o.Token = v
}

func (o PolicyProductCardProductReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyProductCardProductReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["level"] = o.Level
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

type NullablePolicyProductCardProductReq struct {
	value *PolicyProductCardProductReq
	isSet bool
}

func (v NullablePolicyProductCardProductReq) Get() *PolicyProductCardProductReq {
	return v.value
}

func (v *NullablePolicyProductCardProductReq) Set(val *PolicyProductCardProductReq) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyProductCardProductReq) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyProductCardProductReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyProductCardProductReq(val *PolicyProductCardProductReq) *NullablePolicyProductCardProductReq {
	return &NullablePolicyProductCardProductReq{value: val, isSet: true}
}

func (v NullablePolicyProductCardProductReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyProductCardProductReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


