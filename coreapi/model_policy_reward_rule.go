/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the PolicyRewardRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyRewardRule{}

// PolicyRewardRule Contains information on a reward rule.
type PolicyRewardRule struct {
	Filters PolicyRewardRuleFilters `json:"filters"`
	Outcome PolicyRewardRuleOutcome `json:"outcome"`
	Type PolicyRewardRuleType `json:"type"`
}

// NewPolicyRewardRule instantiates a new PolicyRewardRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyRewardRule(filters PolicyRewardRuleFilters, outcome PolicyRewardRuleOutcome, type_ PolicyRewardRuleType) *PolicyRewardRule {
	this := PolicyRewardRule{}
	this.Filters = filters
	this.Outcome = outcome
	this.Type = type_
	return &this
}

// NewPolicyRewardRuleWithDefaults instantiates a new PolicyRewardRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyRewardRuleWithDefaults() *PolicyRewardRule {
	this := PolicyRewardRule{}
	return &this
}

// GetFilters returns the Filters field value
func (o *PolicyRewardRule) GetFilters() PolicyRewardRuleFilters {
	if o == nil {
		var ret PolicyRewardRuleFilters
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *PolicyRewardRule) GetFiltersOk() (*PolicyRewardRuleFilters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filters, true
}

// SetFilters sets field value
func (o *PolicyRewardRule) SetFilters(v PolicyRewardRuleFilters) {
	o.Filters = v
}

// GetOutcome returns the Outcome field value
func (o *PolicyRewardRule) GetOutcome() PolicyRewardRuleOutcome {
	if o == nil {
		var ret PolicyRewardRuleOutcome
		return ret
	}

	return o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value
// and a boolean to check if the value has been set.
func (o *PolicyRewardRule) GetOutcomeOk() (*PolicyRewardRuleOutcome, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outcome, true
}

// SetOutcome sets field value
func (o *PolicyRewardRule) SetOutcome(v PolicyRewardRuleOutcome) {
	o.Outcome = v
}

// GetType returns the Type field value
func (o *PolicyRewardRule) GetType() PolicyRewardRuleType {
	if o == nil {
		var ret PolicyRewardRuleType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PolicyRewardRule) GetTypeOk() (*PolicyRewardRuleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PolicyRewardRule) SetType(v PolicyRewardRuleType) {
	o.Type = v
}

func (o PolicyRewardRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyRewardRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filters"] = o.Filters
	toSerialize["outcome"] = o.Outcome
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullablePolicyRewardRule struct {
	value *PolicyRewardRule
	isSet bool
}

func (v NullablePolicyRewardRule) Get() *PolicyRewardRule {
	return v.value
}

func (v *NullablePolicyRewardRule) Set(val *PolicyRewardRule) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRewardRule) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRewardRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRewardRule(val *PolicyRewardRule) *NullablePolicyRewardRule {
	return &NullablePolicyRewardRule{value: val, isSet: true}
}

func (v NullablePolicyRewardRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRewardRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


