/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the PolicyRewardRuleFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyRewardRuleFilters{}

// PolicyRewardRuleFilters Contains information on the rules defined for a reward program.
type PolicyRewardRuleFilters struct {
	Amount AmountFilter `json:"amount"`
	MccDynamic *MccDynamicFilter `json:"mcc_dynamic,omitempty"`
}

// NewPolicyRewardRuleFilters instantiates a new PolicyRewardRuleFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyRewardRuleFilters(amount AmountFilter) *PolicyRewardRuleFilters {
	this := PolicyRewardRuleFilters{}
	this.Amount = amount
	return &this
}

// NewPolicyRewardRuleFiltersWithDefaults instantiates a new PolicyRewardRuleFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyRewardRuleFiltersWithDefaults() *PolicyRewardRuleFilters {
	this := PolicyRewardRuleFilters{}
	return &this
}

// GetAmount returns the Amount field value
func (o *PolicyRewardRuleFilters) GetAmount() AmountFilter {
	if o == nil {
		var ret AmountFilter
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PolicyRewardRuleFilters) GetAmountOk() (*AmountFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PolicyRewardRuleFilters) SetAmount(v AmountFilter) {
	o.Amount = v
}

// GetMccDynamic returns the MccDynamic field value if set, zero value otherwise.
func (o *PolicyRewardRuleFilters) GetMccDynamic() MccDynamicFilter {
	if o == nil || IsNil(o.MccDynamic) {
		var ret MccDynamicFilter
		return ret
	}
	return *o.MccDynamic
}

// GetMccDynamicOk returns a tuple with the MccDynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRewardRuleFilters) GetMccDynamicOk() (*MccDynamicFilter, bool) {
	if o == nil || IsNil(o.MccDynamic) {
		return nil, false
	}
	return o.MccDynamic, true
}

// HasMccDynamic returns a boolean if a field has been set.
func (o *PolicyRewardRuleFilters) HasMccDynamic() bool {
	if o != nil && !IsNil(o.MccDynamic) {
		return true
	}

	return false
}

// SetMccDynamic gets a reference to the given MccDynamicFilter and assigns it to the MccDynamic field.
func (o *PolicyRewardRuleFilters) SetMccDynamic(v MccDynamicFilter) {
	o.MccDynamic = &v
}

func (o PolicyRewardRuleFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyRewardRuleFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.MccDynamic) {
		toSerialize["mcc_dynamic"] = o.MccDynamic
	}
	return toSerialize, nil
}

type NullablePolicyRewardRuleFilters struct {
	value *PolicyRewardRuleFilters
	isSet bool
}

func (v NullablePolicyRewardRuleFilters) Get() *PolicyRewardRuleFilters {
	return v.value
}

func (v *NullablePolicyRewardRuleFilters) Set(val *PolicyRewardRuleFilters) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRewardRuleFilters) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRewardRuleFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRewardRuleFilters(val *PolicyRewardRuleFilters) *NullablePolicyRewardRuleFilters {
	return &NullablePolicyRewardRuleFilters{value: val, isSet: true}
}

func (v NullablePolicyRewardRuleFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRewardRuleFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


