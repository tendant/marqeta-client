/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the PolicyRewardRuleOutcome type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyRewardRuleOutcome{}

// PolicyRewardRuleOutcome Contains information on the outcome of a reward rule.
type PolicyRewardRuleOutcome struct {
	// Max amount of the reward.
	MaxAmount *float32 `json:"max_amount,omitempty"`
	// The reward percentage applied when the balance for a billing cycle is within the range specified in the `filters.amount.greater_than` and `filters.amount.less_than` fields. For example, if the percentage is `1`, the account holder earns 1% of the account balance if they spend between the `greater_than` and `less_than` amounts during a billing cycle.
	Percentage float32 `json:"percentage"`
}

// NewPolicyRewardRuleOutcome instantiates a new PolicyRewardRuleOutcome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyRewardRuleOutcome(percentage float32) *PolicyRewardRuleOutcome {
	this := PolicyRewardRuleOutcome{}
	this.Percentage = percentage
	return &this
}

// NewPolicyRewardRuleOutcomeWithDefaults instantiates a new PolicyRewardRuleOutcome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyRewardRuleOutcomeWithDefaults() *PolicyRewardRuleOutcome {
	this := PolicyRewardRuleOutcome{}
	return &this
}

// GetMaxAmount returns the MaxAmount field value if set, zero value otherwise.
func (o *PolicyRewardRuleOutcome) GetMaxAmount() float32 {
	if o == nil || IsNil(o.MaxAmount) {
		var ret float32
		return ret
	}
	return *o.MaxAmount
}

// GetMaxAmountOk returns a tuple with the MaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRewardRuleOutcome) GetMaxAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxAmount) {
		return nil, false
	}
	return o.MaxAmount, true
}

// HasMaxAmount returns a boolean if a field has been set.
func (o *PolicyRewardRuleOutcome) HasMaxAmount() bool {
	if o != nil && !IsNil(o.MaxAmount) {
		return true
	}

	return false
}

// SetMaxAmount gets a reference to the given float32 and assigns it to the MaxAmount field.
func (o *PolicyRewardRuleOutcome) SetMaxAmount(v float32) {
	o.MaxAmount = &v
}

// GetPercentage returns the Percentage field value
func (o *PolicyRewardRuleOutcome) GetPercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *PolicyRewardRuleOutcome) GetPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *PolicyRewardRuleOutcome) SetPercentage(v float32) {
	o.Percentage = v
}

func (o PolicyRewardRuleOutcome) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyRewardRuleOutcome) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxAmount) {
		toSerialize["max_amount"] = o.MaxAmount
	}
	toSerialize["percentage"] = o.Percentage
	return toSerialize, nil
}

type NullablePolicyRewardRuleOutcome struct {
	value *PolicyRewardRuleOutcome
	isSet bool
}

func (v NullablePolicyRewardRuleOutcome) Get() *PolicyRewardRuleOutcome {
	return v.value
}

func (v *NullablePolicyRewardRuleOutcome) Set(val *PolicyRewardRuleOutcome) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRewardRuleOutcome) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRewardRuleOutcome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRewardRuleOutcome(val *PolicyRewardRuleOutcome) *NullablePolicyRewardRuleOutcome {
	return &NullablePolicyRewardRuleOutcome{value: val, isSet: true}
}

func (v NullablePolicyRewardRuleOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRewardRuleOutcome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


