/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the PreKycControls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreKycControls{}

// PreKycControls Contains configuration fields for a number of controls.  *NOTE:* These controls are in effect only if `kyc_required` is `ALWAYS` or `CONDITIONAL` and the account holder has not yet passed KYC.
type PreKycControls struct {
	// Specifies the maximum ledger balance allowed for members of the account holder group.
	BalanceMax *float32 `json:"balance_max,omitempty"`
	// If set to `false`, this control prohibits an account holder's cards from being used at an ATM.  *NOTE:* If a card product's `config.poi.atm` field is set to `false`, associated cards are prohibited from being used at an ATM regardless of this control's setting.
	CashAccessEnabled *bool `json:"cash_access_enabled,omitempty"`
	// If set to `true`, funds can only be loaded from a program funding source.  This restriction applies to GPA orders, peer transfers, and direct deposits, but does not apply to operator adjustments.
	EnableNonProgramLoads *bool `json:"enable_non_program_loads,omitempty"`
	// If set to `false`, this control prohibits an account holder from conducting transactions with a non-domestic country code.  *NOTE:* If a card product is configured to prohibit non-domestic transactions, its associated cards are prohibited from such transactions regardless of this control's setting.
	InternationalEnabled *bool `json:"international_enabled,omitempty"`
	// If set to `false`, this control prohibits an account holder's account from being reloaded with funds after an initial load.  This restriction applies to GPA orders, peer transfers, and direct deposits, but does not apply to operator adjustments.
	IsReloadablePreKyc *bool `json:"is_reloadable_pre_kyc,omitempty"`
}

// NewPreKycControls instantiates a new PreKycControls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreKycControls() *PreKycControls {
	this := PreKycControls{}
	var cashAccessEnabled bool = false
	this.CashAccessEnabled = &cashAccessEnabled
	var enableNonProgramLoads bool = false
	this.EnableNonProgramLoads = &enableNonProgramLoads
	var internationalEnabled bool = false
	this.InternationalEnabled = &internationalEnabled
	var isReloadablePreKyc bool = false
	this.IsReloadablePreKyc = &isReloadablePreKyc
	return &this
}

// NewPreKycControlsWithDefaults instantiates a new PreKycControls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreKycControlsWithDefaults() *PreKycControls {
	this := PreKycControls{}
	var cashAccessEnabled bool = false
	this.CashAccessEnabled = &cashAccessEnabled
	var enableNonProgramLoads bool = false
	this.EnableNonProgramLoads = &enableNonProgramLoads
	var internationalEnabled bool = false
	this.InternationalEnabled = &internationalEnabled
	var isReloadablePreKyc bool = false
	this.IsReloadablePreKyc = &isReloadablePreKyc
	return &this
}

// GetBalanceMax returns the BalanceMax field value if set, zero value otherwise.
func (o *PreKycControls) GetBalanceMax() float32 {
	if o == nil || IsNil(o.BalanceMax) {
		var ret float32
		return ret
	}
	return *o.BalanceMax
}

// GetBalanceMaxOk returns a tuple with the BalanceMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreKycControls) GetBalanceMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.BalanceMax) {
		return nil, false
	}
	return o.BalanceMax, true
}

// HasBalanceMax returns a boolean if a field has been set.
func (o *PreKycControls) HasBalanceMax() bool {
	if o != nil && !IsNil(o.BalanceMax) {
		return true
	}

	return false
}

// SetBalanceMax gets a reference to the given float32 and assigns it to the BalanceMax field.
func (o *PreKycControls) SetBalanceMax(v float32) {
	o.BalanceMax = &v
}

// GetCashAccessEnabled returns the CashAccessEnabled field value if set, zero value otherwise.
func (o *PreKycControls) GetCashAccessEnabled() bool {
	if o == nil || IsNil(o.CashAccessEnabled) {
		var ret bool
		return ret
	}
	return *o.CashAccessEnabled
}

// GetCashAccessEnabledOk returns a tuple with the CashAccessEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreKycControls) GetCashAccessEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CashAccessEnabled) {
		return nil, false
	}
	return o.CashAccessEnabled, true
}

// HasCashAccessEnabled returns a boolean if a field has been set.
func (o *PreKycControls) HasCashAccessEnabled() bool {
	if o != nil && !IsNil(o.CashAccessEnabled) {
		return true
	}

	return false
}

// SetCashAccessEnabled gets a reference to the given bool and assigns it to the CashAccessEnabled field.
func (o *PreKycControls) SetCashAccessEnabled(v bool) {
	o.CashAccessEnabled = &v
}

// GetEnableNonProgramLoads returns the EnableNonProgramLoads field value if set, zero value otherwise.
func (o *PreKycControls) GetEnableNonProgramLoads() bool {
	if o == nil || IsNil(o.EnableNonProgramLoads) {
		var ret bool
		return ret
	}
	return *o.EnableNonProgramLoads
}

// GetEnableNonProgramLoadsOk returns a tuple with the EnableNonProgramLoads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreKycControls) GetEnableNonProgramLoadsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNonProgramLoads) {
		return nil, false
	}
	return o.EnableNonProgramLoads, true
}

// HasEnableNonProgramLoads returns a boolean if a field has been set.
func (o *PreKycControls) HasEnableNonProgramLoads() bool {
	if o != nil && !IsNil(o.EnableNonProgramLoads) {
		return true
	}

	return false
}

// SetEnableNonProgramLoads gets a reference to the given bool and assigns it to the EnableNonProgramLoads field.
func (o *PreKycControls) SetEnableNonProgramLoads(v bool) {
	o.EnableNonProgramLoads = &v
}

// GetInternationalEnabled returns the InternationalEnabled field value if set, zero value otherwise.
func (o *PreKycControls) GetInternationalEnabled() bool {
	if o == nil || IsNil(o.InternationalEnabled) {
		var ret bool
		return ret
	}
	return *o.InternationalEnabled
}

// GetInternationalEnabledOk returns a tuple with the InternationalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreKycControls) GetInternationalEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.InternationalEnabled) {
		return nil, false
	}
	return o.InternationalEnabled, true
}

// HasInternationalEnabled returns a boolean if a field has been set.
func (o *PreKycControls) HasInternationalEnabled() bool {
	if o != nil && !IsNil(o.InternationalEnabled) {
		return true
	}

	return false
}

// SetInternationalEnabled gets a reference to the given bool and assigns it to the InternationalEnabled field.
func (o *PreKycControls) SetInternationalEnabled(v bool) {
	o.InternationalEnabled = &v
}

// GetIsReloadablePreKyc returns the IsReloadablePreKyc field value if set, zero value otherwise.
func (o *PreKycControls) GetIsReloadablePreKyc() bool {
	if o == nil || IsNil(o.IsReloadablePreKyc) {
		var ret bool
		return ret
	}
	return *o.IsReloadablePreKyc
}

// GetIsReloadablePreKycOk returns a tuple with the IsReloadablePreKyc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreKycControls) GetIsReloadablePreKycOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReloadablePreKyc) {
		return nil, false
	}
	return o.IsReloadablePreKyc, true
}

// HasIsReloadablePreKyc returns a boolean if a field has been set.
func (o *PreKycControls) HasIsReloadablePreKyc() bool {
	if o != nil && !IsNil(o.IsReloadablePreKyc) {
		return true
	}

	return false
}

// SetIsReloadablePreKyc gets a reference to the given bool and assigns it to the IsReloadablePreKyc field.
func (o *PreKycControls) SetIsReloadablePreKyc(v bool) {
	o.IsReloadablePreKyc = &v
}

func (o PreKycControls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreKycControls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BalanceMax) {
		toSerialize["balance_max"] = o.BalanceMax
	}
	if !IsNil(o.CashAccessEnabled) {
		toSerialize["cash_access_enabled"] = o.CashAccessEnabled
	}
	if !IsNil(o.EnableNonProgramLoads) {
		toSerialize["enable_non_program_loads"] = o.EnableNonProgramLoads
	}
	if !IsNil(o.InternationalEnabled) {
		toSerialize["international_enabled"] = o.InternationalEnabled
	}
	if !IsNil(o.IsReloadablePreKyc) {
		toSerialize["is_reloadable_pre_kyc"] = o.IsReloadablePreKyc
	}
	return toSerialize, nil
}

type NullablePreKycControls struct {
	value *PreKycControls
	isSet bool
}

func (v NullablePreKycControls) Get() *PreKycControls {
	return v.value
}

func (v *NullablePreKycControls) Set(val *PreKycControls) {
	v.value = val
	v.isSet = true
}

func (v NullablePreKycControls) IsSet() bool {
	return v.isSet
}

func (v *NullablePreKycControls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreKycControls(val *PreKycControls) *NullablePreKycControls {
	return &NullablePreKycControls{value: val, isSet: true}
}

func (v NullablePreKycControls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreKycControls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


