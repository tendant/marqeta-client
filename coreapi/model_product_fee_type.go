/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// ProductFeeType Type of fee.
type ProductFeeType string

// List of ProductFeeType
const (
	PRODUCTFEETYPE_LATE_PAYMENT_FEE ProductFeeType = "LATE_PAYMENT_FEE"
	PRODUCTFEETYPE_RETURNED_PAYMENT_FEE ProductFeeType = "RETURNED_PAYMENT_FEE"
)

// All allowed values of ProductFeeType enum
var AllowedProductFeeTypeEnumValues = []ProductFeeType{
	"LATE_PAYMENT_FEE",
	"RETURNED_PAYMENT_FEE",
}

func (v *ProductFeeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductFeeType(value)
	for _, existing := range AllowedProductFeeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductFeeType", value)
}

// NewProductFeeTypeFromValue returns a pointer to a valid ProductFeeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductFeeTypeFromValue(v string) (*ProductFeeType, error) {
	ev := ProductFeeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductFeeType: valid values are %v", v, AllowedProductFeeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductFeeType) IsValid() bool {
	for _, existing := range AllowedProductFeeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductFeeType value
func (v ProductFeeType) Ptr() *ProductFeeType {
	return &v
}

type NullableProductFeeType struct {
	value *ProductFeeType
	isSet bool
}

func (v NullableProductFeeType) Get() *ProductFeeType {
	return v.value
}

func (v *NullableProductFeeType) Set(val *ProductFeeType) {
	v.value = val
	v.isSet = true
}

func (v NullableProductFeeType) IsSet() bool {
	return v.isSet
}

func (v *NullableProductFeeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductFeeType(val *ProductFeeType) *NullableProductFeeType {
	return &NullableProductFeeType{value: val, isSet: true}
}

func (v NullableProductFeeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductFeeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

