/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the ProductMinPaymentPercentage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductMinPaymentPercentage{}

// ProductMinPaymentPercentage Contains information used to calculate the minimum payment percentage.
type ProductMinPaymentPercentage struct {
	// One or more fee types to include when calculating the minimum payment.
	IncludeFeesCharged []ProductFeeType `json:"include_fees_charged"`
	// Minimum payment, expressed as a percentage of the total statement balance, due on the payment due day.
	PercentageOfBalance float32 `json:"percentage_of_balance"`
}

// NewProductMinPaymentPercentage instantiates a new ProductMinPaymentPercentage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductMinPaymentPercentage(includeFeesCharged []ProductFeeType, percentageOfBalance float32) *ProductMinPaymentPercentage {
	this := ProductMinPaymentPercentage{}
	this.IncludeFeesCharged = includeFeesCharged
	this.PercentageOfBalance = percentageOfBalance
	return &this
}

// NewProductMinPaymentPercentageWithDefaults instantiates a new ProductMinPaymentPercentage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductMinPaymentPercentageWithDefaults() *ProductMinPaymentPercentage {
	this := ProductMinPaymentPercentage{}
	return &this
}

// GetIncludeFeesCharged returns the IncludeFeesCharged field value
func (o *ProductMinPaymentPercentage) GetIncludeFeesCharged() []ProductFeeType {
	if o == nil {
		var ret []ProductFeeType
		return ret
	}

	return o.IncludeFeesCharged
}

// GetIncludeFeesChargedOk returns a tuple with the IncludeFeesCharged field value
// and a boolean to check if the value has been set.
func (o *ProductMinPaymentPercentage) GetIncludeFeesChargedOk() ([]ProductFeeType, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeFeesCharged, true
}

// SetIncludeFeesCharged sets field value
func (o *ProductMinPaymentPercentage) SetIncludeFeesCharged(v []ProductFeeType) {
	o.IncludeFeesCharged = v
}

// GetPercentageOfBalance returns the PercentageOfBalance field value
func (o *ProductMinPaymentPercentage) GetPercentageOfBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PercentageOfBalance
}

// GetPercentageOfBalanceOk returns a tuple with the PercentageOfBalance field value
// and a boolean to check if the value has been set.
func (o *ProductMinPaymentPercentage) GetPercentageOfBalanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PercentageOfBalance, true
}

// SetPercentageOfBalance sets field value
func (o *ProductMinPaymentPercentage) SetPercentageOfBalance(v float32) {
	o.PercentageOfBalance = v
}

func (o ProductMinPaymentPercentage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductMinPaymentPercentage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["include_fees_charged"] = o.IncludeFeesCharged
	toSerialize["percentage_of_balance"] = o.PercentageOfBalance
	return toSerialize, nil
}

type NullableProductMinPaymentPercentage struct {
	value *ProductMinPaymentPercentage
	isSet bool
}

func (v NullableProductMinPaymentPercentage) Get() *ProductMinPaymentPercentage {
	return v.value
}

func (v *NullableProductMinPaymentPercentage) Set(val *ProductMinPaymentPercentage) {
	v.value = val
	v.isSet = true
}

func (v NullableProductMinPaymentPercentage) IsSet() bool {
	return v.isSet
}

func (v *NullableProductMinPaymentPercentage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductMinPaymentPercentage(val *ProductMinPaymentPercentage) *NullableProductMinPaymentPercentage {
	return &NullableProductMinPaymentPercentage{value: val, isSet: true}
}

func (v NullableProductMinPaymentPercentage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductMinPaymentPercentage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


