/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the ProgramFundingSourceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProgramFundingSourceRequest{}

// ProgramFundingSourceRequest struct for ProgramFundingSourceRequest
type ProgramFundingSourceRequest struct {
	// Indicates whether the program funding source is active.
	Active *bool `json:"active,omitempty"`
	// Name of the program funding source.
	Name string `json:"name"`
	// Unique identifier of the funding source. If you do not include a token, the system will generate one automatically. As this token is necessary for use in other calls, we recommend that you define a simple and easy to remember string rather than letting the system generate a token for you. This value cannot be updated.
	Token *string `json:"token,omitempty"`
}

// NewProgramFundingSourceRequest instantiates a new ProgramFundingSourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgramFundingSourceRequest(name string) *ProgramFundingSourceRequest {
	this := ProgramFundingSourceRequest{}
	this.Name = name
	return &this
}

// NewProgramFundingSourceRequestWithDefaults instantiates a new ProgramFundingSourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramFundingSourceRequestWithDefaults() *ProgramFundingSourceRequest {
	this := ProgramFundingSourceRequest{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ProgramFundingSourceRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramFundingSourceRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ProgramFundingSourceRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ProgramFundingSourceRequest) SetActive(v bool) {
	o.Active = &v
}

// GetName returns the Name field value
func (o *ProgramFundingSourceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProgramFundingSourceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProgramFundingSourceRequest) SetName(v string) {
	o.Name = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *ProgramFundingSourceRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramFundingSourceRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *ProgramFundingSourceRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *ProgramFundingSourceRequest) SetToken(v string) {
	o.Token = &v
}

func (o ProgramFundingSourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgramFundingSourceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableProgramFundingSourceRequest struct {
	value *ProgramFundingSourceRequest
	isSet bool
}

func (v NullableProgramFundingSourceRequest) Get() *ProgramFundingSourceRequest {
	return v.value
}

func (v *NullableProgramFundingSourceRequest) Set(val *ProgramFundingSourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramFundingSourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramFundingSourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramFundingSourceRequest(val *ProgramFundingSourceRequest) *NullableProgramFundingSourceRequest {
	return &NullableProgramFundingSourceRequest{value: val, isSet: true}
}

func (v NullableProgramFundingSourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramFundingSourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


