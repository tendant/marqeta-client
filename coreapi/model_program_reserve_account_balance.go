/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the ProgramReserveAccountBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProgramReserveAccountBalance{}

// ProgramReserveAccountBalance struct for ProgramReserveAccountBalance
type ProgramReserveAccountBalance struct {
	// Ledger balance, minus any authorized transactions that have not yet cleared. When using JIT Funding, this balance is usually equal to $0.00.
	AvailableBalance *float32 `json:"available_balance,omitempty"`
	// Contains program reserve account balance information, organized by currency code. Sometimes referred to as a _program funding account_.
	Balances *map[string]ProgramReserveAccountBalance `json:"balances,omitempty"`
	// Not currently in use.
	CreditBalance *float32 `json:"credit_balance,omitempty"`
	// Three-digit ISO 4217 currency code.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// When using standard funding: The funds that are available to spend immediately, including funds from any authorized transactions that have not yet cleared. When using Just-in-Time (JIT) Funding: Authorized funds that are currently on hold, but not yet cleared.
	LedgerBalance *float32 `json:"ledger_balance,omitempty"`
	// ACH loads that have been accepted, but for which the funding time has not yet elapsed.
	PendingCredits *float32 `json:"pending_credits,omitempty"`
}

// NewProgramReserveAccountBalance instantiates a new ProgramReserveAccountBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgramReserveAccountBalance() *ProgramReserveAccountBalance {
	this := ProgramReserveAccountBalance{}
	return &this
}

// NewProgramReserveAccountBalanceWithDefaults instantiates a new ProgramReserveAccountBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramReserveAccountBalanceWithDefaults() *ProgramReserveAccountBalance {
	this := ProgramReserveAccountBalance{}
	return &this
}

// GetAvailableBalance returns the AvailableBalance field value if set, zero value otherwise.
func (o *ProgramReserveAccountBalance) GetAvailableBalance() float32 {
	if o == nil || IsNil(o.AvailableBalance) {
		var ret float32
		return ret
	}
	return *o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramReserveAccountBalance) GetAvailableBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.AvailableBalance) {
		return nil, false
	}
	return o.AvailableBalance, true
}

// HasAvailableBalance returns a boolean if a field has been set.
func (o *ProgramReserveAccountBalance) HasAvailableBalance() bool {
	if o != nil && !IsNil(o.AvailableBalance) {
		return true
	}

	return false
}

// SetAvailableBalance gets a reference to the given float32 and assigns it to the AvailableBalance field.
func (o *ProgramReserveAccountBalance) SetAvailableBalance(v float32) {
	o.AvailableBalance = &v
}

// GetBalances returns the Balances field value if set, zero value otherwise.
func (o *ProgramReserveAccountBalance) GetBalances() map[string]ProgramReserveAccountBalance {
	if o == nil || IsNil(o.Balances) {
		var ret map[string]ProgramReserveAccountBalance
		return ret
	}
	return *o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramReserveAccountBalance) GetBalancesOk() (*map[string]ProgramReserveAccountBalance, bool) {
	if o == nil || IsNil(o.Balances) {
		return nil, false
	}
	return o.Balances, true
}

// HasBalances returns a boolean if a field has been set.
func (o *ProgramReserveAccountBalance) HasBalances() bool {
	if o != nil && !IsNil(o.Balances) {
		return true
	}

	return false
}

// SetBalances gets a reference to the given map[string]ProgramReserveAccountBalance and assigns it to the Balances field.
func (o *ProgramReserveAccountBalance) SetBalances(v map[string]ProgramReserveAccountBalance) {
	o.Balances = &v
}

// GetCreditBalance returns the CreditBalance field value if set, zero value otherwise.
func (o *ProgramReserveAccountBalance) GetCreditBalance() float32 {
	if o == nil || IsNil(o.CreditBalance) {
		var ret float32
		return ret
	}
	return *o.CreditBalance
}

// GetCreditBalanceOk returns a tuple with the CreditBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramReserveAccountBalance) GetCreditBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditBalance) {
		return nil, false
	}
	return o.CreditBalance, true
}

// HasCreditBalance returns a boolean if a field has been set.
func (o *ProgramReserveAccountBalance) HasCreditBalance() bool {
	if o != nil && !IsNil(o.CreditBalance) {
		return true
	}

	return false
}

// SetCreditBalance gets a reference to the given float32 and assigns it to the CreditBalance field.
func (o *ProgramReserveAccountBalance) SetCreditBalance(v float32) {
	o.CreditBalance = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *ProgramReserveAccountBalance) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramReserveAccountBalance) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *ProgramReserveAccountBalance) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *ProgramReserveAccountBalance) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetLedgerBalance returns the LedgerBalance field value if set, zero value otherwise.
func (o *ProgramReserveAccountBalance) GetLedgerBalance() float32 {
	if o == nil || IsNil(o.LedgerBalance) {
		var ret float32
		return ret
	}
	return *o.LedgerBalance
}

// GetLedgerBalanceOk returns a tuple with the LedgerBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramReserveAccountBalance) GetLedgerBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.LedgerBalance) {
		return nil, false
	}
	return o.LedgerBalance, true
}

// HasLedgerBalance returns a boolean if a field has been set.
func (o *ProgramReserveAccountBalance) HasLedgerBalance() bool {
	if o != nil && !IsNil(o.LedgerBalance) {
		return true
	}

	return false
}

// SetLedgerBalance gets a reference to the given float32 and assigns it to the LedgerBalance field.
func (o *ProgramReserveAccountBalance) SetLedgerBalance(v float32) {
	o.LedgerBalance = &v
}

// GetPendingCredits returns the PendingCredits field value if set, zero value otherwise.
func (o *ProgramReserveAccountBalance) GetPendingCredits() float32 {
	if o == nil || IsNil(o.PendingCredits) {
		var ret float32
		return ret
	}
	return *o.PendingCredits
}

// GetPendingCreditsOk returns a tuple with the PendingCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramReserveAccountBalance) GetPendingCreditsOk() (*float32, bool) {
	if o == nil || IsNil(o.PendingCredits) {
		return nil, false
	}
	return o.PendingCredits, true
}

// HasPendingCredits returns a boolean if a field has been set.
func (o *ProgramReserveAccountBalance) HasPendingCredits() bool {
	if o != nil && !IsNil(o.PendingCredits) {
		return true
	}

	return false
}

// SetPendingCredits gets a reference to the given float32 and assigns it to the PendingCredits field.
func (o *ProgramReserveAccountBalance) SetPendingCredits(v float32) {
	o.PendingCredits = &v
}

func (o ProgramReserveAccountBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgramReserveAccountBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableBalance) {
		toSerialize["available_balance"] = o.AvailableBalance
	}
	if !IsNil(o.Balances) {
		toSerialize["balances"] = o.Balances
	}
	if !IsNil(o.CreditBalance) {
		toSerialize["credit_balance"] = o.CreditBalance
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if !IsNil(o.LedgerBalance) {
		toSerialize["ledger_balance"] = o.LedgerBalance
	}
	if !IsNil(o.PendingCredits) {
		toSerialize["pending_credits"] = o.PendingCredits
	}
	return toSerialize, nil
}

type NullableProgramReserveAccountBalance struct {
	value *ProgramReserveAccountBalance
	isSet bool
}

func (v NullableProgramReserveAccountBalance) Get() *ProgramReserveAccountBalance {
	return v.value
}

func (v *NullableProgramReserveAccountBalance) Set(val *ProgramReserveAccountBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramReserveAccountBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramReserveAccountBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramReserveAccountBalance(val *ProgramReserveAccountBalance) *NullableProgramReserveAccountBalance {
	return &NullableProgramReserveAccountBalance{value: val, isSet: true}
}

func (v NullableProgramReserveAccountBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramReserveAccountBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


