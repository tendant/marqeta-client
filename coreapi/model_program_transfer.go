/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the ProgramTransfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProgramTransfer{}

// ProgramTransfer struct for ProgramTransfer
type ProgramTransfer struct {
	// Amount of program transfer.
	Amount float32 `json:"amount"`
	// Unique identifier of the business. Pass either a `business_token` or a `user_token`, not both.  Send a `GET` request to `/businesses` to retrieve business tokens.
	BusinessToken *string `json:"business_token,omitempty"`
	// Three-digit ISO 4217 currency code.
	CurrencyCode string `json:"currency_code"`
	// Contains attributes that define characteristics of one or more fees. This array is returned in the response when it is included in the request.
	Fees []FeeModel `json:"fees,omitempty"`
	// Memo or note describing the program transfer.
	Memo *string `json:"memo,omitempty"`
	// Comma-delimited list of tags describing the program transfer.
	Tags *string `json:"tags,omitempty"`
	// Unique identifier of the program transfer.  If you do not include a token, the system will generate one automatically. This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
	Token *string `json:"token,omitempty"`
	// Unique identifier of the program transfer type.  Send a `GET` request to `/programtransfers/types` to retrieve program transfer type tokens.
	TypeToken string `json:"type_token"`
	// Unique identifier of the user. Pass either a `user_token` or a `business_token`, not both.  Send a `GET` request to `/users` to retrieve business tokens.
	UserToken *string `json:"user_token,omitempty"`
}

// NewProgramTransfer instantiates a new ProgramTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgramTransfer(amount float32, currencyCode string, typeToken string) *ProgramTransfer {
	this := ProgramTransfer{}
	this.Amount = amount
	this.CurrencyCode = currencyCode
	this.TypeToken = typeToken
	return &this
}

// NewProgramTransferWithDefaults instantiates a new ProgramTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramTransferWithDefaults() *ProgramTransfer {
	this := ProgramTransfer{}
	return &this
}

// GetAmount returns the Amount field value
func (o *ProgramTransfer) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ProgramTransfer) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ProgramTransfer) SetAmount(v float32) {
	o.Amount = v
}

// GetBusinessToken returns the BusinessToken field value if set, zero value otherwise.
func (o *ProgramTransfer) GetBusinessToken() string {
	if o == nil || IsNil(o.BusinessToken) {
		var ret string
		return ret
	}
	return *o.BusinessToken
}

// GetBusinessTokenOk returns a tuple with the BusinessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTransfer) GetBusinessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessToken) {
		return nil, false
	}
	return o.BusinessToken, true
}

// HasBusinessToken returns a boolean if a field has been set.
func (o *ProgramTransfer) HasBusinessToken() bool {
	if o != nil && !IsNil(o.BusinessToken) {
		return true
	}

	return false
}

// SetBusinessToken gets a reference to the given string and assigns it to the BusinessToken field.
func (o *ProgramTransfer) SetBusinessToken(v string) {
	o.BusinessToken = &v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *ProgramTransfer) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *ProgramTransfer) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *ProgramTransfer) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *ProgramTransfer) GetFees() []FeeModel {
	if o == nil || IsNil(o.Fees) {
		var ret []FeeModel
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTransfer) GetFeesOk() ([]FeeModel, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *ProgramTransfer) HasFees() bool {
	if o != nil && !IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given []FeeModel and assigns it to the Fees field.
func (o *ProgramTransfer) SetFees(v []FeeModel) {
	o.Fees = v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *ProgramTransfer) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTransfer) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *ProgramTransfer) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *ProgramTransfer) SetMemo(v string) {
	o.Memo = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ProgramTransfer) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTransfer) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ProgramTransfer) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *ProgramTransfer) SetTags(v string) {
	o.Tags = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *ProgramTransfer) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTransfer) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *ProgramTransfer) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *ProgramTransfer) SetToken(v string) {
	o.Token = &v
}

// GetTypeToken returns the TypeToken field value
func (o *ProgramTransfer) GetTypeToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeToken
}

// GetTypeTokenOk returns a tuple with the TypeToken field value
// and a boolean to check if the value has been set.
func (o *ProgramTransfer) GetTypeTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeToken, true
}

// SetTypeToken sets field value
func (o *ProgramTransfer) SetTypeToken(v string) {
	o.TypeToken = v
}

// GetUserToken returns the UserToken field value if set, zero value otherwise.
func (o *ProgramTransfer) GetUserToken() string {
	if o == nil || IsNil(o.UserToken) {
		var ret string
		return ret
	}
	return *o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgramTransfer) GetUserTokenOk() (*string, bool) {
	if o == nil || IsNil(o.UserToken) {
		return nil, false
	}
	return o.UserToken, true
}

// HasUserToken returns a boolean if a field has been set.
func (o *ProgramTransfer) HasUserToken() bool {
	if o != nil && !IsNil(o.UserToken) {
		return true
	}

	return false
}

// SetUserToken gets a reference to the given string and assigns it to the UserToken field.
func (o *ProgramTransfer) SetUserToken(v string) {
	o.UserToken = &v
}

func (o ProgramTransfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProgramTransfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.BusinessToken) {
		toSerialize["business_token"] = o.BusinessToken
	}
	toSerialize["currency_code"] = o.CurrencyCode
	if !IsNil(o.Fees) {
		toSerialize["fees"] = o.Fees
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	toSerialize["type_token"] = o.TypeToken
	if !IsNil(o.UserToken) {
		toSerialize["user_token"] = o.UserToken
	}
	return toSerialize, nil
}

type NullableProgramTransfer struct {
	value *ProgramTransfer
	isSet bool
}

func (v NullableProgramTransfer) Get() *ProgramTransfer {
	return v.value
}

func (v *NullableProgramTransfer) Set(val *ProgramTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableProgramTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableProgramTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgramTransfer(val *ProgramTransfer) *NullableProgramTransfer {
	return &NullableProgramTransfer{value: val, isSet: true}
}

func (v NullableProgramTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgramTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


