/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the PTCPhone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PTCPhone{}

// PTCPhone struct for PTCPhone
type PTCPhone struct {
	CountryCode *string `json:"country_code,omitempty"`
	Number string `json:"number"`
}

// NewPTCPhone instantiates a new PTCPhone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPTCPhone(number string) *PTCPhone {
	this := PTCPhone{}
	this.Number = number
	return &this
}

// NewPTCPhoneWithDefaults instantiates a new PTCPhone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPTCPhoneWithDefaults() *PTCPhone {
	this := PTCPhone{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *PTCPhone) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PTCPhone) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *PTCPhone) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *PTCPhone) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetNumber returns the Number field value
func (o *PTCPhone) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *PTCPhone) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *PTCPhone) SetNumber(v string) {
	o.Number = v
}

func (o PTCPhone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PTCPhone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	toSerialize["number"] = o.Number
	return toSerialize, nil
}

type NullablePTCPhone struct {
	value *PTCPhone
	isSet bool
}

func (v NullablePTCPhone) Get() *PTCPhone {
	return v.value
}

func (v *NullablePTCPhone) Set(val *PTCPhone) {
	v.value = val
	v.isSet = true
}

func (v NullablePTCPhone) IsSet() bool {
	return v.isSet
}

func (v *NullablePTCPhone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePTCPhone(val *PTCPhone) *NullablePTCPhone {
	return &NullablePTCPhone{value: val, isSet: true}
}

func (v NullablePTCPhone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePTCPhone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


