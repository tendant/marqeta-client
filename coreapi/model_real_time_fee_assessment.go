/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the RealTimeFeeAssessment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealTimeFeeAssessment{}

// RealTimeFeeAssessment Controls the assessment of real-time fees.
type RealTimeFeeAssessment struct {
	// Enables fee assessments where the origin of the transaction acquirer is inside the US.
	DomesticEnabled *bool `json:"domestic_enabled,omitempty"`
	// Enables fee assessments where the origin of the transaction acquirer is outside the US.
	InternationalEnabled *bool `json:"international_enabled,omitempty"`
	// Indicates the type of transactions on which the fee is assessed.
	TransactionType *string `json:"transaction_type,omitempty"`
}

// NewRealTimeFeeAssessment instantiates a new RealTimeFeeAssessment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealTimeFeeAssessment() *RealTimeFeeAssessment {
	this := RealTimeFeeAssessment{}
	var domesticEnabled bool = false
	this.DomesticEnabled = &domesticEnabled
	var internationalEnabled bool = false
	this.InternationalEnabled = &internationalEnabled
	return &this
}

// NewRealTimeFeeAssessmentWithDefaults instantiates a new RealTimeFeeAssessment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealTimeFeeAssessmentWithDefaults() *RealTimeFeeAssessment {
	this := RealTimeFeeAssessment{}
	var domesticEnabled bool = false
	this.DomesticEnabled = &domesticEnabled
	var internationalEnabled bool = false
	this.InternationalEnabled = &internationalEnabled
	return &this
}

// GetDomesticEnabled returns the DomesticEnabled field value if set, zero value otherwise.
func (o *RealTimeFeeAssessment) GetDomesticEnabled() bool {
	if o == nil || IsNil(o.DomesticEnabled) {
		var ret bool
		return ret
	}
	return *o.DomesticEnabled
}

// GetDomesticEnabledOk returns a tuple with the DomesticEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeAssessment) GetDomesticEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DomesticEnabled) {
		return nil, false
	}
	return o.DomesticEnabled, true
}

// HasDomesticEnabled returns a boolean if a field has been set.
func (o *RealTimeFeeAssessment) HasDomesticEnabled() bool {
	if o != nil && !IsNil(o.DomesticEnabled) {
		return true
	}

	return false
}

// SetDomesticEnabled gets a reference to the given bool and assigns it to the DomesticEnabled field.
func (o *RealTimeFeeAssessment) SetDomesticEnabled(v bool) {
	o.DomesticEnabled = &v
}

// GetInternationalEnabled returns the InternationalEnabled field value if set, zero value otherwise.
func (o *RealTimeFeeAssessment) GetInternationalEnabled() bool {
	if o == nil || IsNil(o.InternationalEnabled) {
		var ret bool
		return ret
	}
	return *o.InternationalEnabled
}

// GetInternationalEnabledOk returns a tuple with the InternationalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeAssessment) GetInternationalEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.InternationalEnabled) {
		return nil, false
	}
	return o.InternationalEnabled, true
}

// HasInternationalEnabled returns a boolean if a field has been set.
func (o *RealTimeFeeAssessment) HasInternationalEnabled() bool {
	if o != nil && !IsNil(o.InternationalEnabled) {
		return true
	}

	return false
}

// SetInternationalEnabled gets a reference to the given bool and assigns it to the InternationalEnabled field.
func (o *RealTimeFeeAssessment) SetInternationalEnabled(v bool) {
	o.InternationalEnabled = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *RealTimeFeeAssessment) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType) {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeAssessment) GetTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *RealTimeFeeAssessment) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *RealTimeFeeAssessment) SetTransactionType(v string) {
	o.TransactionType = &v
}

func (o RealTimeFeeAssessment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealTimeFeeAssessment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomesticEnabled) {
		toSerialize["domestic_enabled"] = o.DomesticEnabled
	}
	if !IsNil(o.InternationalEnabled) {
		toSerialize["international_enabled"] = o.InternationalEnabled
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transaction_type"] = o.TransactionType
	}
	return toSerialize, nil
}

type NullableRealTimeFeeAssessment struct {
	value *RealTimeFeeAssessment
	isSet bool
}

func (v NullableRealTimeFeeAssessment) Get() *RealTimeFeeAssessment {
	return v.value
}

func (v *NullableRealTimeFeeAssessment) Set(val *RealTimeFeeAssessment) {
	v.value = val
	v.isSet = true
}

func (v NullableRealTimeFeeAssessment) IsSet() bool {
	return v.isSet
}

func (v *NullableRealTimeFeeAssessment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealTimeFeeAssessment(val *RealTimeFeeAssessment) *NullableRealTimeFeeAssessment {
	return &NullableRealTimeFeeAssessment{value: val, isSet: true}
}

func (v NullableRealTimeFeeAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealTimeFeeAssessment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


