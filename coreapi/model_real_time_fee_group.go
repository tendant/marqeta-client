/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"time"
)

// checks if the RealTimeFeeGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealTimeFeeGroup{}

// RealTimeFeeGroup Contains information about a real-time fee group.
type RealTimeFeeGroup struct {
	// Indicates whether the real-time fee group is active.
	Active bool `json:"active"`
	// Date and time when the real-time fee group was created, in UTC.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Specifies the fees in this real-time fee group.
	FeeTokens []string `json:"fee_tokens,omitempty"`
	// Date and time when the real-time fee group was last modified, in UTC.
	LastModifiedTime *time.Time `json:"last_modified_time,omitempty"`
	// Descriptive name for the real-time fee group.
	Name string `json:"name"`
	// Unique identifier of the real-time fee group.
	Token string `json:"token"`
}

// NewRealTimeFeeGroup instantiates a new RealTimeFeeGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealTimeFeeGroup(active bool, name string, token string) *RealTimeFeeGroup {
	this := RealTimeFeeGroup{}
	this.Active = active
	this.Name = name
	this.Token = token
	return &this
}

// NewRealTimeFeeGroupWithDefaults instantiates a new RealTimeFeeGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealTimeFeeGroupWithDefaults() *RealTimeFeeGroup {
	this := RealTimeFeeGroup{}
	var active bool = false
	this.Active = active
	return &this
}

// GetActive returns the Active field value
func (o *RealTimeFeeGroup) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroup) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *RealTimeFeeGroup) SetActive(v bool) {
	o.Active = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *RealTimeFeeGroup) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroup) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *RealTimeFeeGroup) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *RealTimeFeeGroup) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetFeeTokens returns the FeeTokens field value if set, zero value otherwise.
func (o *RealTimeFeeGroup) GetFeeTokens() []string {
	if o == nil || IsNil(o.FeeTokens) {
		var ret []string
		return ret
	}
	return o.FeeTokens
}

// GetFeeTokensOk returns a tuple with the FeeTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroup) GetFeeTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.FeeTokens) {
		return nil, false
	}
	return o.FeeTokens, true
}

// HasFeeTokens returns a boolean if a field has been set.
func (o *RealTimeFeeGroup) HasFeeTokens() bool {
	if o != nil && !IsNil(o.FeeTokens) {
		return true
	}

	return false
}

// SetFeeTokens gets a reference to the given []string and assigns it to the FeeTokens field.
func (o *RealTimeFeeGroup) SetFeeTokens(v []string) {
	o.FeeTokens = v
}

// GetLastModifiedTime returns the LastModifiedTime field value if set, zero value otherwise.
func (o *RealTimeFeeGroup) GetLastModifiedTime() time.Time {
	if o == nil || IsNil(o.LastModifiedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedTime
}

// GetLastModifiedTimeOk returns a tuple with the LastModifiedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroup) GetLastModifiedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModifiedTime) {
		return nil, false
	}
	return o.LastModifiedTime, true
}

// HasLastModifiedTime returns a boolean if a field has been set.
func (o *RealTimeFeeGroup) HasLastModifiedTime() bool {
	if o != nil && !IsNil(o.LastModifiedTime) {
		return true
	}

	return false
}

// SetLastModifiedTime gets a reference to the given time.Time and assigns it to the LastModifiedTime field.
func (o *RealTimeFeeGroup) SetLastModifiedTime(v time.Time) {
	o.LastModifiedTime = &v
}

// GetName returns the Name field value
func (o *RealTimeFeeGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RealTimeFeeGroup) SetName(v string) {
	o.Name = v
}

// GetToken returns the Token field value
func (o *RealTimeFeeGroup) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroup) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *RealTimeFeeGroup) SetToken(v string) {
	o.Token = v
}

func (o RealTimeFeeGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealTimeFeeGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.FeeTokens) {
		toSerialize["fee_tokens"] = o.FeeTokens
	}
	if !IsNil(o.LastModifiedTime) {
		toSerialize["last_modified_time"] = o.LastModifiedTime
	}
	toSerialize["name"] = o.Name
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

type NullableRealTimeFeeGroup struct {
	value *RealTimeFeeGroup
	isSet bool
}

func (v NullableRealTimeFeeGroup) Get() *RealTimeFeeGroup {
	return v.value
}

func (v *NullableRealTimeFeeGroup) Set(val *RealTimeFeeGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableRealTimeFeeGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableRealTimeFeeGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealTimeFeeGroup(val *RealTimeFeeGroup) *NullableRealTimeFeeGroup {
	return &NullableRealTimeFeeGroup{value: val, isSet: true}
}

func (v NullableRealTimeFeeGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealTimeFeeGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


