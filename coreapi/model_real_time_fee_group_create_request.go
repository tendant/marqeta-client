/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the RealTimeFeeGroupCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealTimeFeeGroupCreateRequest{}

// RealTimeFeeGroupCreateRequest struct for RealTimeFeeGroupCreateRequest
type RealTimeFeeGroupCreateRequest struct {
	// Indicates whether the real-time fee group is active.
	Active *bool `json:"active,omitempty"`
	// Unique identifiers of the fees in this real-time fee group. Send a `GET` request to `/fees` to retrieve fee resource tokens.  No two fees in the group can be applicable to the same transaction type (in other words, each fee must have a different value for its `real_time_assessment.transaction_type` field).
	FeeTokens []string `json:"fee_tokens,omitempty"`
	// Descriptive name for the real-time fee group.
	Name string `json:"name"`
	// Unique identifier of the real-time fee group.  If you do not include a token, the system will generate one automatically. This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
	Token *string `json:"token,omitempty"`
}

// NewRealTimeFeeGroupCreateRequest instantiates a new RealTimeFeeGroupCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealTimeFeeGroupCreateRequest(name string) *RealTimeFeeGroupCreateRequest {
	this := RealTimeFeeGroupCreateRequest{}
	var active bool = true
	this.Active = &active
	this.Name = name
	return &this
}

// NewRealTimeFeeGroupCreateRequestWithDefaults instantiates a new RealTimeFeeGroupCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealTimeFeeGroupCreateRequestWithDefaults() *RealTimeFeeGroupCreateRequest {
	this := RealTimeFeeGroupCreateRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RealTimeFeeGroupCreateRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroupCreateRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RealTimeFeeGroupCreateRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *RealTimeFeeGroupCreateRequest) SetActive(v bool) {
	o.Active = &v
}

// GetFeeTokens returns the FeeTokens field value if set, zero value otherwise.
func (o *RealTimeFeeGroupCreateRequest) GetFeeTokens() []string {
	if o == nil || IsNil(o.FeeTokens) {
		var ret []string
		return ret
	}
	return o.FeeTokens
}

// GetFeeTokensOk returns a tuple with the FeeTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroupCreateRequest) GetFeeTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.FeeTokens) {
		return nil, false
	}
	return o.FeeTokens, true
}

// HasFeeTokens returns a boolean if a field has been set.
func (o *RealTimeFeeGroupCreateRequest) HasFeeTokens() bool {
	if o != nil && !IsNil(o.FeeTokens) {
		return true
	}

	return false
}

// SetFeeTokens gets a reference to the given []string and assigns it to the FeeTokens field.
func (o *RealTimeFeeGroupCreateRequest) SetFeeTokens(v []string) {
	o.FeeTokens = v
}

// GetName returns the Name field value
func (o *RealTimeFeeGroupCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroupCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RealTimeFeeGroupCreateRequest) SetName(v string) {
	o.Name = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *RealTimeFeeGroupCreateRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroupCreateRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *RealTimeFeeGroupCreateRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *RealTimeFeeGroupCreateRequest) SetToken(v string) {
	o.Token = &v
}

func (o RealTimeFeeGroupCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealTimeFeeGroupCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.FeeTokens) {
		toSerialize["fee_tokens"] = o.FeeTokens
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableRealTimeFeeGroupCreateRequest struct {
	value *RealTimeFeeGroupCreateRequest
	isSet bool
}

func (v NullableRealTimeFeeGroupCreateRequest) Get() *RealTimeFeeGroupCreateRequest {
	return v.value
}

func (v *NullableRealTimeFeeGroupCreateRequest) Set(val *RealTimeFeeGroupCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRealTimeFeeGroupCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRealTimeFeeGroupCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealTimeFeeGroupCreateRequest(val *RealTimeFeeGroupCreateRequest) *NullableRealTimeFeeGroupCreateRequest {
	return &NullableRealTimeFeeGroupCreateRequest{value: val, isSet: true}
}

func (v NullableRealTimeFeeGroupCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealTimeFeeGroupCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


