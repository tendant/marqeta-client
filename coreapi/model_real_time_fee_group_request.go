/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the RealTimeFeeGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealTimeFeeGroupRequest{}

// RealTimeFeeGroupRequest struct for RealTimeFeeGroupRequest
type RealTimeFeeGroupRequest struct {
	// Indicates whether the real-time fee group is active.
	Active *bool `json:"active,omitempty"`
	// Specifies the fees in this real-time fee group. Send a `GET` request to `/fees` to retrieve fee resources tokens.  No two fees in the group can be applicable to the same transaction type (in other words, each fee must have a different value for its `real_time_assessment.transaction_type` field).
	FeeTokens []string `json:"fee_tokens,omitempty"`
	// Descriptive name for the real-time fee group.
	Name *string `json:"name,omitempty"`
}

// NewRealTimeFeeGroupRequest instantiates a new RealTimeFeeGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealTimeFeeGroupRequest() *RealTimeFeeGroupRequest {
	this := RealTimeFeeGroupRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// NewRealTimeFeeGroupRequestWithDefaults instantiates a new RealTimeFeeGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealTimeFeeGroupRequestWithDefaults() *RealTimeFeeGroupRequest {
	this := RealTimeFeeGroupRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RealTimeFeeGroupRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroupRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RealTimeFeeGroupRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *RealTimeFeeGroupRequest) SetActive(v bool) {
	o.Active = &v
}

// GetFeeTokens returns the FeeTokens field value if set, zero value otherwise.
func (o *RealTimeFeeGroupRequest) GetFeeTokens() []string {
	if o == nil || IsNil(o.FeeTokens) {
		var ret []string
		return ret
	}
	return o.FeeTokens
}

// GetFeeTokensOk returns a tuple with the FeeTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroupRequest) GetFeeTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.FeeTokens) {
		return nil, false
	}
	return o.FeeTokens, true
}

// HasFeeTokens returns a boolean if a field has been set.
func (o *RealTimeFeeGroupRequest) HasFeeTokens() bool {
	if o != nil && !IsNil(o.FeeTokens) {
		return true
	}

	return false
}

// SetFeeTokens gets a reference to the given []string and assigns it to the FeeTokens field.
func (o *RealTimeFeeGroupRequest) SetFeeTokens(v []string) {
	o.FeeTokens = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RealTimeFeeGroupRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeFeeGroupRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RealTimeFeeGroupRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RealTimeFeeGroupRequest) SetName(v string) {
	o.Name = &v
}

func (o RealTimeFeeGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealTimeFeeGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.FeeTokens) {
		toSerialize["fee_tokens"] = o.FeeTokens
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableRealTimeFeeGroupRequest struct {
	value *RealTimeFeeGroupRequest
	isSet bool
}

func (v NullableRealTimeFeeGroupRequest) Get() *RealTimeFeeGroupRequest {
	return v.value
}

func (v *NullableRealTimeFeeGroupRequest) Set(val *RealTimeFeeGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRealTimeFeeGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRealTimeFeeGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealTimeFeeGroupRequest(val *RealTimeFeeGroupRequest) *NullableRealTimeFeeGroupRequest {
	return &NullableRealTimeFeeGroupRequest{value: val, isSet: true}
}

func (v NullableRealTimeFeeGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealTimeFeeGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


