/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the RealTimeStandinCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealTimeStandinCriteria{}

// RealTimeStandinCriteria Specifies which event types automatically enable Commando Mode.
type RealTimeStandinCriteria struct {
	// If set to `true`, Commando Mode is automatically enabled by events defined in the `real_time_standin_criteria` object. If set to `false`, Auto Commando Mode is not enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// If set to `true`, an application error (any non-connection, non-timeout error) automatically enables Commando Mode when `real_time_standin_criteria.enabled` is also `true`.
	IncludeApplicationErrors *bool `json:"include_application_errors,omitempty"`
	// If set to `true`, a non-timeout connection error automatically enables Commando Mode when `real_time_standin_criteria.enabled` is also `true`.
	IncludeConnectionErrors *bool `json:"include_connection_errors,omitempty"`
	// If set to `true`, a gateway response slower than 3000ms automatically enables Commando Mode when `real_time_standin_criteria.enabled` is also `true`.
	IncludeResponseTimeouts *bool `json:"include_response_timeouts,omitempty"`
}

// NewRealTimeStandinCriteria instantiates a new RealTimeStandinCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealTimeStandinCriteria() *RealTimeStandinCriteria {
	this := RealTimeStandinCriteria{}
	var enabled bool = false
	this.Enabled = &enabled
	var includeApplicationErrors bool = false
	this.IncludeApplicationErrors = &includeApplicationErrors
	var includeConnectionErrors bool = false
	this.IncludeConnectionErrors = &includeConnectionErrors
	var includeResponseTimeouts bool = false
	this.IncludeResponseTimeouts = &includeResponseTimeouts
	return &this
}

// NewRealTimeStandinCriteriaWithDefaults instantiates a new RealTimeStandinCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealTimeStandinCriteriaWithDefaults() *RealTimeStandinCriteria {
	this := RealTimeStandinCriteria{}
	var enabled bool = false
	this.Enabled = &enabled
	var includeApplicationErrors bool = false
	this.IncludeApplicationErrors = &includeApplicationErrors
	var includeConnectionErrors bool = false
	this.IncludeConnectionErrors = &includeConnectionErrors
	var includeResponseTimeouts bool = false
	this.IncludeResponseTimeouts = &includeResponseTimeouts
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RealTimeStandinCriteria) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeStandinCriteria) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RealTimeStandinCriteria) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RealTimeStandinCriteria) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetIncludeApplicationErrors returns the IncludeApplicationErrors field value if set, zero value otherwise.
func (o *RealTimeStandinCriteria) GetIncludeApplicationErrors() bool {
	if o == nil || IsNil(o.IncludeApplicationErrors) {
		var ret bool
		return ret
	}
	return *o.IncludeApplicationErrors
}

// GetIncludeApplicationErrorsOk returns a tuple with the IncludeApplicationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeStandinCriteria) GetIncludeApplicationErrorsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeApplicationErrors) {
		return nil, false
	}
	return o.IncludeApplicationErrors, true
}

// HasIncludeApplicationErrors returns a boolean if a field has been set.
func (o *RealTimeStandinCriteria) HasIncludeApplicationErrors() bool {
	if o != nil && !IsNil(o.IncludeApplicationErrors) {
		return true
	}

	return false
}

// SetIncludeApplicationErrors gets a reference to the given bool and assigns it to the IncludeApplicationErrors field.
func (o *RealTimeStandinCriteria) SetIncludeApplicationErrors(v bool) {
	o.IncludeApplicationErrors = &v
}

// GetIncludeConnectionErrors returns the IncludeConnectionErrors field value if set, zero value otherwise.
func (o *RealTimeStandinCriteria) GetIncludeConnectionErrors() bool {
	if o == nil || IsNil(o.IncludeConnectionErrors) {
		var ret bool
		return ret
	}
	return *o.IncludeConnectionErrors
}

// GetIncludeConnectionErrorsOk returns a tuple with the IncludeConnectionErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeStandinCriteria) GetIncludeConnectionErrorsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeConnectionErrors) {
		return nil, false
	}
	return o.IncludeConnectionErrors, true
}

// HasIncludeConnectionErrors returns a boolean if a field has been set.
func (o *RealTimeStandinCriteria) HasIncludeConnectionErrors() bool {
	if o != nil && !IsNil(o.IncludeConnectionErrors) {
		return true
	}

	return false
}

// SetIncludeConnectionErrors gets a reference to the given bool and assigns it to the IncludeConnectionErrors field.
func (o *RealTimeStandinCriteria) SetIncludeConnectionErrors(v bool) {
	o.IncludeConnectionErrors = &v
}

// GetIncludeResponseTimeouts returns the IncludeResponseTimeouts field value if set, zero value otherwise.
func (o *RealTimeStandinCriteria) GetIncludeResponseTimeouts() bool {
	if o == nil || IsNil(o.IncludeResponseTimeouts) {
		var ret bool
		return ret
	}
	return *o.IncludeResponseTimeouts
}

// GetIncludeResponseTimeoutsOk returns a tuple with the IncludeResponseTimeouts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeStandinCriteria) GetIncludeResponseTimeoutsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeResponseTimeouts) {
		return nil, false
	}
	return o.IncludeResponseTimeouts, true
}

// HasIncludeResponseTimeouts returns a boolean if a field has been set.
func (o *RealTimeStandinCriteria) HasIncludeResponseTimeouts() bool {
	if o != nil && !IsNil(o.IncludeResponseTimeouts) {
		return true
	}

	return false
}

// SetIncludeResponseTimeouts gets a reference to the given bool and assigns it to the IncludeResponseTimeouts field.
func (o *RealTimeStandinCriteria) SetIncludeResponseTimeouts(v bool) {
	o.IncludeResponseTimeouts = &v
}

func (o RealTimeStandinCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealTimeStandinCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.IncludeApplicationErrors) {
		toSerialize["include_application_errors"] = o.IncludeApplicationErrors
	}
	if !IsNil(o.IncludeConnectionErrors) {
		toSerialize["include_connection_errors"] = o.IncludeConnectionErrors
	}
	if !IsNil(o.IncludeResponseTimeouts) {
		toSerialize["include_response_timeouts"] = o.IncludeResponseTimeouts
	}
	return toSerialize, nil
}

type NullableRealTimeStandinCriteria struct {
	value *RealTimeStandinCriteria
	isSet bool
}

func (v NullableRealTimeStandinCriteria) Get() *RealTimeStandinCriteria {
	return v.value
}

func (v *NullableRealTimeStandinCriteria) Set(val *RealTimeStandinCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableRealTimeStandinCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableRealTimeStandinCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealTimeStandinCriteria(val *RealTimeStandinCriteria) *NullableRealTimeStandinCriteria {
	return &NullableRealTimeStandinCriteria{value: val, isSet: true}
}

func (v NullableRealTimeStandinCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealTimeStandinCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


