/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the RedemptionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedemptionsResponse{}

// RedemptionsResponse Contains information on a reward redemption.
type RedemptionsResponse struct {
	// Amount to redeem.
	Amount float32 `json:"amount"`
	// Date and time when the reward redemption was created on the Marqeta platform, in UTC.
	CreatedTime time.Time `json:"created_time"`
	Destination *DestinationType `json:"destination,omitempty"`
	// Date and time when the reward redemption was settled on your external platform.  This field is returned if you handled the reward redemption outside of Marqeta's credit platform.
	ExternalSettlementDateTime *time.Time `json:"external_settlement_date_time,omitempty"`
	Note string `json:"note"`
	// Unique identifier of the external account receiving the reward redemption. This token is equivalent to the <</core-api/payment-sources, payment source>> token.
	ReceivingAccountToken *string `json:"receiving_account_token,omitempty"`
	// Contains one or more reward entries related to the redemption.
	RelatedRewardEntries []RewardProgramsEntriesResponse `json:"related_reward_entries,omitempty"`
	// Unique identifier of the reward program for which to redeem rewards.
	RewardProgramToken string `json:"reward_program_token"`
	// Unique identifier of the system of reward (SOR) reward that was created to represent the reward redemption as a `STATEMENT_CREDIT` on a credit account. The SOR entry is a positive amount that is added to the account balance.
	SorRewardToken *string `json:"sor_reward_token,omitempty"`
	Status RedemptionStatus `json:"status"`
	// Unique identifier of the reward redemption.
	Token string `json:"token"`
	Type RedemptionType `json:"type"`
	// Date and time when the reward redemption was last updated on the Marqeta platform, in UTC.
	UpdatedTime time.Time `json:"updated_time"`
}

// NewRedemptionsResponse instantiates a new RedemptionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedemptionsResponse(amount float32, createdTime time.Time, note string, rewardProgramToken string, status RedemptionStatus, token string, type_ RedemptionType, updatedTime time.Time) *RedemptionsResponse {
	this := RedemptionsResponse{}
	this.Amount = amount
	this.CreatedTime = createdTime
	this.Note = note
	this.RewardProgramToken = rewardProgramToken
	this.Status = status
	this.Token = token
	this.Type = type_
	this.UpdatedTime = updatedTime
	return &this
}

// NewRedemptionsResponseWithDefaults instantiates a new RedemptionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedemptionsResponseWithDefaults() *RedemptionsResponse {
	this := RedemptionsResponse{}
	return &this
}

// GetAmount returns the Amount field value
func (o *RedemptionsResponse) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *RedemptionsResponse) SetAmount(v float32) {
	o.Amount = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *RedemptionsResponse) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *RedemptionsResponse) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *RedemptionsResponse) GetDestination() DestinationType {
	if o == nil || IsNil(o.Destination) {
		var ret DestinationType
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetDestinationOk() (*DestinationType, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *RedemptionsResponse) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given DestinationType and assigns it to the Destination field.
func (o *RedemptionsResponse) SetDestination(v DestinationType) {
	o.Destination = &v
}

// GetExternalSettlementDateTime returns the ExternalSettlementDateTime field value if set, zero value otherwise.
func (o *RedemptionsResponse) GetExternalSettlementDateTime() time.Time {
	if o == nil || IsNil(o.ExternalSettlementDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ExternalSettlementDateTime
}

// GetExternalSettlementDateTimeOk returns a tuple with the ExternalSettlementDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetExternalSettlementDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExternalSettlementDateTime) {
		return nil, false
	}
	return o.ExternalSettlementDateTime, true
}

// HasExternalSettlementDateTime returns a boolean if a field has been set.
func (o *RedemptionsResponse) HasExternalSettlementDateTime() bool {
	if o != nil && !IsNil(o.ExternalSettlementDateTime) {
		return true
	}

	return false
}

// SetExternalSettlementDateTime gets a reference to the given time.Time and assigns it to the ExternalSettlementDateTime field.
func (o *RedemptionsResponse) SetExternalSettlementDateTime(v time.Time) {
	o.ExternalSettlementDateTime = &v
}

// GetNote returns the Note field value
func (o *RedemptionsResponse) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *RedemptionsResponse) SetNote(v string) {
	o.Note = v
}

// GetReceivingAccountToken returns the ReceivingAccountToken field value if set, zero value otherwise.
func (o *RedemptionsResponse) GetReceivingAccountToken() string {
	if o == nil || IsNil(o.ReceivingAccountToken) {
		var ret string
		return ret
	}
	return *o.ReceivingAccountToken
}

// GetReceivingAccountTokenOk returns a tuple with the ReceivingAccountToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetReceivingAccountTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivingAccountToken) {
		return nil, false
	}
	return o.ReceivingAccountToken, true
}

// HasReceivingAccountToken returns a boolean if a field has been set.
func (o *RedemptionsResponse) HasReceivingAccountToken() bool {
	if o != nil && !IsNil(o.ReceivingAccountToken) {
		return true
	}

	return false
}

// SetReceivingAccountToken gets a reference to the given string and assigns it to the ReceivingAccountToken field.
func (o *RedemptionsResponse) SetReceivingAccountToken(v string) {
	o.ReceivingAccountToken = &v
}

// GetRelatedRewardEntries returns the RelatedRewardEntries field value if set, zero value otherwise.
func (o *RedemptionsResponse) GetRelatedRewardEntries() []RewardProgramsEntriesResponse {
	if o == nil || IsNil(o.RelatedRewardEntries) {
		var ret []RewardProgramsEntriesResponse
		return ret
	}
	return o.RelatedRewardEntries
}

// GetRelatedRewardEntriesOk returns a tuple with the RelatedRewardEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetRelatedRewardEntriesOk() ([]RewardProgramsEntriesResponse, bool) {
	if o == nil || IsNil(o.RelatedRewardEntries) {
		return nil, false
	}
	return o.RelatedRewardEntries, true
}

// HasRelatedRewardEntries returns a boolean if a field has been set.
func (o *RedemptionsResponse) HasRelatedRewardEntries() bool {
	if o != nil && !IsNil(o.RelatedRewardEntries) {
		return true
	}

	return false
}

// SetRelatedRewardEntries gets a reference to the given []RewardProgramsEntriesResponse and assigns it to the RelatedRewardEntries field.
func (o *RedemptionsResponse) SetRelatedRewardEntries(v []RewardProgramsEntriesResponse) {
	o.RelatedRewardEntries = v
}

// GetRewardProgramToken returns the RewardProgramToken field value
func (o *RedemptionsResponse) GetRewardProgramToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RewardProgramToken
}

// GetRewardProgramTokenOk returns a tuple with the RewardProgramToken field value
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetRewardProgramTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewardProgramToken, true
}

// SetRewardProgramToken sets field value
func (o *RedemptionsResponse) SetRewardProgramToken(v string) {
	o.RewardProgramToken = v
}

// GetSorRewardToken returns the SorRewardToken field value if set, zero value otherwise.
func (o *RedemptionsResponse) GetSorRewardToken() string {
	if o == nil || IsNil(o.SorRewardToken) {
		var ret string
		return ret
	}
	return *o.SorRewardToken
}

// GetSorRewardTokenOk returns a tuple with the SorRewardToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetSorRewardTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SorRewardToken) {
		return nil, false
	}
	return o.SorRewardToken, true
}

// HasSorRewardToken returns a boolean if a field has been set.
func (o *RedemptionsResponse) HasSorRewardToken() bool {
	if o != nil && !IsNil(o.SorRewardToken) {
		return true
	}

	return false
}

// SetSorRewardToken gets a reference to the given string and assigns it to the SorRewardToken field.
func (o *RedemptionsResponse) SetSorRewardToken(v string) {
	o.SorRewardToken = &v
}

// GetStatus returns the Status field value
func (o *RedemptionsResponse) GetStatus() RedemptionStatus {
	if o == nil {
		var ret RedemptionStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetStatusOk() (*RedemptionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RedemptionsResponse) SetStatus(v RedemptionStatus) {
	o.Status = v
}

// GetToken returns the Token field value
func (o *RedemptionsResponse) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *RedemptionsResponse) SetToken(v string) {
	o.Token = v
}

// GetType returns the Type field value
func (o *RedemptionsResponse) GetType() RedemptionType {
	if o == nil {
		var ret RedemptionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetTypeOk() (*RedemptionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RedemptionsResponse) SetType(v RedemptionType) {
	o.Type = v
}

// GetUpdatedTime returns the UpdatedTime field value
func (o *RedemptionsResponse) GetUpdatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value
// and a boolean to check if the value has been set.
func (o *RedemptionsResponse) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTime, true
}

// SetUpdatedTime sets field value
func (o *RedemptionsResponse) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = v
}

func (o RedemptionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedemptionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["created_time"] = o.CreatedTime
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.ExternalSettlementDateTime) {
		toSerialize["external_settlement_date_time"] = o.ExternalSettlementDateTime
	}
	toSerialize["note"] = o.Note
	if !IsNil(o.ReceivingAccountToken) {
		toSerialize["receiving_account_token"] = o.ReceivingAccountToken
	}
	if !IsNil(o.RelatedRewardEntries) {
		toSerialize["related_reward_entries"] = o.RelatedRewardEntries
	}
	toSerialize["reward_program_token"] = o.RewardProgramToken
	if !IsNil(o.SorRewardToken) {
		toSerialize["sor_reward_token"] = o.SorRewardToken
	}
	toSerialize["status"] = o.Status
	toSerialize["token"] = o.Token
	toSerialize["type"] = o.Type
	toSerialize["updated_time"] = o.UpdatedTime
	return toSerialize, nil
}

type NullableRedemptionsResponse struct {
	value *RedemptionsResponse
	isSet bool
}

func (v NullableRedemptionsResponse) Get() *RedemptionsResponse {
	return v.value
}

func (v *NullableRedemptionsResponse) Set(val *RedemptionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRedemptionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRedemptionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedemptionsResponse(val *RedemptionsResponse) *NullableRedemptionsResponse {
	return &NullableRedemptionsResponse{value: val, isSet: true}
}

func (v NullableRedemptionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedemptionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


