/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// RefundMethod Method of the refund.
type RefundMethod string

// List of RefundMethod
const (
	REFUNDMETHOD_CHECK RefundMethod = "CHECK"
)

// All allowed values of RefundMethod enum
var AllowedRefundMethodEnumValues = []RefundMethod{
	"CHECK",
}

func (v *RefundMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RefundMethod(value)
	for _, existing := range AllowedRefundMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RefundMethod", value)
}

// NewRefundMethodFromValue returns a pointer to a valid RefundMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRefundMethodFromValue(v string) (*RefundMethod, error) {
	ev := RefundMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RefundMethod: valid values are %v", v, AllowedRefundMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RefundMethod) IsValid() bool {
	for _, existing := range AllowedRefundMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RefundMethod value
func (v RefundMethod) Ptr() *RefundMethod {
	return &v
}

type NullableRefundMethod struct {
	value *RefundMethod
	isSet bool
}

func (v NullableRefundMethod) Get() *RefundMethod {
	return v.value
}

func (v *NullableRefundMethod) Set(val *RefundMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundMethod(val *RefundMethod) *NullableRefundMethod {
	return &NullableRefundMethod{value: val, isSet: true}
}

func (v NullableRefundMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

