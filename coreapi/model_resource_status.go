/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// ResourceStatus Status of the credit product.  * `DRAFT` - The credit product is in the process of being created. * `PENDING_APPROVAL` - The credit product has been created and is awaiting approval. * `SENT_FOR_REVISION` - The credit product has been returned for revision. * `ACTIVE` - The credit product is active. * `REJECTED` - The credit product has been rejected; this status cannot be changed. * `ARCHIVED` - The previously active credit product has been archived.
type ResourceStatus string

// List of ResourceStatus
const (
	RESOURCESTATUS_DRAFT ResourceStatus = "DRAFT"
	RESOURCESTATUS_PENDING_APPROVAL ResourceStatus = "PENDING_APPROVAL"
	RESOURCESTATUS_SENT_FOR_REVISION ResourceStatus = "SENT_FOR_REVISION"
	RESOURCESTATUS_ACTIVE ResourceStatus = "ACTIVE"
	RESOURCESTATUS_REJECTED ResourceStatus = "REJECTED"
	RESOURCESTATUS_ARCHIVED ResourceStatus = "ARCHIVED"
)

// All allowed values of ResourceStatus enum
var AllowedResourceStatusEnumValues = []ResourceStatus{
	"DRAFT",
	"PENDING_APPROVAL",
	"SENT_FOR_REVISION",
	"ACTIVE",
	"REJECTED",
	"ARCHIVED",
}

func (v *ResourceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceStatus(value)
	for _, existing := range AllowedResourceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceStatus", value)
}

// NewResourceStatusFromValue returns a pointer to a valid ResourceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceStatusFromValue(v string) (*ResourceStatus, error) {
	ev := ResourceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceStatus: valid values are %v", v, AllowedResourceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceStatus) IsValid() bool {
	for _, existing := range AllowedResourceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceStatus value
func (v ResourceStatus) Ptr() *ResourceStatus {
	return &v
}

type NullableResourceStatus struct {
	value *ResourceStatus
	isSet bool
}

func (v NullableResourceStatus) Get() *ResourceStatus {
	return v.value
}

func (v *NullableResourceStatus) Set(val *ResourceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceStatus(val *ResourceStatus) *NullableResourceStatus {
	return &NullableResourceStatus{value: val, isSet: true}
}

func (v NullableResourceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

