/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Response{}

// Response Response codes and memos for address verification, card security verification, and transactions.
type Response struct {
	// Information about the velocity control applied to the transaction.  *NOTE:* This field is returned only in transaction response objects. It is not returned in address verification or card security verification response objects.
	AdditionalInformation *string `json:"additional_information,omitempty"`
	// Four-digit response code for address verification, card security code verification, or transactions.  For address verification responses, the code is an assertion by the Marqeta platform as to whether its address verification data matches that provided by the cardholder:  [cols=\"2,3,3\"] !=== ! Code ! Address ! Postal Code  ! 0000 ! Match ! Match  ! 0001 ! Match ! Unmatched  ! 0100 ! Unmatched ! Match  ! 0101 ! Unmatched ! Unmatched  ! 0200 ! Data Not Present ! Match  ! 0201 ! Data Not Present ! Unmatched  ! 0002 ! Match ! Data Not Present  ! 0102 ! Unmatched ! Data Not Present  ! 0303 ! Not Validated ! Not Validated !===  For card security verification, the code indicates whether the verification check passed and can have these possible values:  * 0000 – passed * 0001 – did not pass  For a transaction, the code describes the outcome of the attempted transaction. For the full list of transaction codes, see <</developer-guides/about-transactions#_transaction_response_codes, Transaction response codes>>.
	Code string `json:"code"`
	// Additional text that describes the response.
	Memo string `json:"memo"`
}

// NewResponse instantiates a new Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponse(code string, memo string) *Response {
	this := Response{}
	this.Code = code
	this.Memo = memo
	return &this
}

// NewResponseWithDefaults instantiates a new Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseWithDefaults() *Response {
	this := Response{}
	return &this
}

// GetAdditionalInformation returns the AdditionalInformation field value if set, zero value otherwise.
func (o *Response) GetAdditionalInformation() string {
	if o == nil || IsNil(o.AdditionalInformation) {
		var ret string
		return ret
	}
	return *o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetAdditionalInformationOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInformation) {
		return nil, false
	}
	return o.AdditionalInformation, true
}

// HasAdditionalInformation returns a boolean if a field has been set.
func (o *Response) HasAdditionalInformation() bool {
	if o != nil && !IsNil(o.AdditionalInformation) {
		return true
	}

	return false
}

// SetAdditionalInformation gets a reference to the given string and assigns it to the AdditionalInformation field.
func (o *Response) SetAdditionalInformation(v string) {
	o.AdditionalInformation = &v
}

// GetCode returns the Code field value
func (o *Response) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Response) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Response) SetCode(v string) {
	o.Code = v
}

// GetMemo returns the Memo field value
func (o *Response) GetMemo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Memo
}

// GetMemoOk returns a tuple with the Memo field value
// and a boolean to check if the value has been set.
func (o *Response) GetMemoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memo, true
}

// SetMemo sets field value
func (o *Response) SetMemo(v string) {
	o.Memo = v
}

func (o Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalInformation) {
		toSerialize["additional_information"] = o.AdditionalInformation
	}
	toSerialize["code"] = o.Code
	toSerialize["memo"] = o.Memo
	return toSerialize, nil
}

type NullableResponse struct {
	value *Response
	isSet bool
}

func (v NullableResponse) Get() *Response {
	return v.value
}

func (v *NullableResponse) Set(val *Response) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse(val *Response) *NullableResponse {
	return &NullableResponse{value: val, isSet: true}
}

func (v NullableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


