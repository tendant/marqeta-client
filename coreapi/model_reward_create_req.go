/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the RewardCreateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RewardCreateReq{}

// RewardCreateReq struct for RewardCreateReq
type RewardCreateReq struct {
	// Amount of the reward.
	Amount float32 `json:"amount"`
	CurrencyCode CurrencyCode `json:"currency_code"`
	// Description of the reward.
	Description string `json:"description"`
	// Additional information about the reward.
	Note *string `json:"note,omitempty"`
	// Unique identifier of the reward.
	Token *string `json:"token,omitempty"`
}

// NewRewardCreateReq instantiates a new RewardCreateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRewardCreateReq(amount float32, currencyCode CurrencyCode, description string) *RewardCreateReq {
	this := RewardCreateReq{}
	this.Amount = amount
	this.CurrencyCode = currencyCode
	this.Description = description
	return &this
}

// NewRewardCreateReqWithDefaults instantiates a new RewardCreateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewardCreateReqWithDefaults() *RewardCreateReq {
	this := RewardCreateReq{}
	var currencyCode CurrencyCode = CURRENCYCODE_USD
	this.CurrencyCode = currencyCode
	return &this
}

// GetAmount returns the Amount field value
func (o *RewardCreateReq) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *RewardCreateReq) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *RewardCreateReq) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *RewardCreateReq) GetCurrencyCode() CurrencyCode {
	if o == nil {
		var ret CurrencyCode
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *RewardCreateReq) GetCurrencyCodeOk() (*CurrencyCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *RewardCreateReq) SetCurrencyCode(v CurrencyCode) {
	o.CurrencyCode = v
}

// GetDescription returns the Description field value
func (o *RewardCreateReq) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RewardCreateReq) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RewardCreateReq) SetDescription(v string) {
	o.Description = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *RewardCreateReq) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardCreateReq) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *RewardCreateReq) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *RewardCreateReq) SetNote(v string) {
	o.Note = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *RewardCreateReq) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardCreateReq) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *RewardCreateReq) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *RewardCreateReq) SetToken(v string) {
	o.Token = &v
}

func (o RewardCreateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RewardCreateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["currency_code"] = o.CurrencyCode
	toSerialize["description"] = o.Description
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableRewardCreateReq struct {
	value *RewardCreateReq
	isSet bool
}

func (v NullableRewardCreateReq) Get() *RewardCreateReq {
	return v.value
}

func (v *NullableRewardCreateReq) Set(val *RewardCreateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableRewardCreateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableRewardCreateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewardCreateReq(val *RewardCreateReq) *NullableRewardCreateReq {
	return &NullableRewardCreateReq{value: val, isSet: true}
}

func (v NullableRewardCreateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewardCreateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


