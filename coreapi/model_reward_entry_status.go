/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// RewardEntryStatus Status of the reward entry.
type RewardEntryStatus string

// List of RewardEntryStatus
const (
	REWARDENTRYSTATUS_PENDING RewardEntryStatus = "PENDING"
	REWARDENTRYSTATUS_POSTED RewardEntryStatus = "POSTED"
)

// All allowed values of RewardEntryStatus enum
var AllowedRewardEntryStatusEnumValues = []RewardEntryStatus{
	"PENDING",
	"POSTED",
}

func (v *RewardEntryStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RewardEntryStatus(value)
	for _, existing := range AllowedRewardEntryStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RewardEntryStatus", value)
}

// NewRewardEntryStatusFromValue returns a pointer to a valid RewardEntryStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRewardEntryStatusFromValue(v string) (*RewardEntryStatus, error) {
	ev := RewardEntryStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RewardEntryStatus: valid values are %v", v, AllowedRewardEntryStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RewardEntryStatus) IsValid() bool {
	for _, existing := range AllowedRewardEntryStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RewardEntryStatus value
func (v RewardEntryStatus) Ptr() *RewardEntryStatus {
	return &v
}

type NullableRewardEntryStatus struct {
	value *RewardEntryStatus
	isSet bool
}

func (v NullableRewardEntryStatus) Get() *RewardEntryStatus {
	return v.value
}

func (v *NullableRewardEntryStatus) Set(val *RewardEntryStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRewardEntryStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRewardEntryStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewardEntryStatus(val *RewardEntryStatus) *NullableRewardEntryStatus {
	return &NullableRewardEntryStatus{value: val, isSet: true}
}

func (v NullableRewardEntryStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewardEntryStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

