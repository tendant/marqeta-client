/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the RewardProgramsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RewardProgramsResponse{}

// RewardProgramsResponse struct for RewardProgramsResponse
type RewardProgramsResponse struct {
	// Unique identifier of the associated credit account.
	AccountToken string `json:"account_token"`
	// Unique identifier of the associated bundle that contains the reward policy on which the reward program is based.
	BundleToken string `json:"bundle_token"`
	CalculationType CalculationType `json:"calculation_type"`
	// Date and time when the reward program was created on the Marqeta platform, in UTC.
	CreatedTime time.Time `json:"created_time"`
	// A value of `true` indicates that the reward program is active.
	IsActive bool `json:"is_active"`
	// A note that provides information on the reward program.
	Note string `json:"note"`
	// Unique identifier of the reward program.
	Token string `json:"token"`
	// Date and time when the reward program was last updated on the Marqeta platform, in UTC.
	UpdatedTime time.Time `json:"updated_time"`
}

// NewRewardProgramsResponse instantiates a new RewardProgramsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRewardProgramsResponse(accountToken string, bundleToken string, calculationType CalculationType, createdTime time.Time, isActive bool, note string, token string, updatedTime time.Time) *RewardProgramsResponse {
	this := RewardProgramsResponse{}
	this.AccountToken = accountToken
	this.BundleToken = bundleToken
	this.CalculationType = calculationType
	this.CreatedTime = createdTime
	this.IsActive = isActive
	this.Note = note
	this.Token = token
	this.UpdatedTime = updatedTime
	return &this
}

// NewRewardProgramsResponseWithDefaults instantiates a new RewardProgramsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewardProgramsResponseWithDefaults() *RewardProgramsResponse {
	this := RewardProgramsResponse{}
	return &this
}

// GetAccountToken returns the AccountToken field value
func (o *RewardProgramsResponse) GetAccountToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountToken
}

// GetAccountTokenOk returns a tuple with the AccountToken field value
// and a boolean to check if the value has been set.
func (o *RewardProgramsResponse) GetAccountTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountToken, true
}

// SetAccountToken sets field value
func (o *RewardProgramsResponse) SetAccountToken(v string) {
	o.AccountToken = v
}

// GetBundleToken returns the BundleToken field value
func (o *RewardProgramsResponse) GetBundleToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BundleToken
}

// GetBundleTokenOk returns a tuple with the BundleToken field value
// and a boolean to check if the value has been set.
func (o *RewardProgramsResponse) GetBundleTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BundleToken, true
}

// SetBundleToken sets field value
func (o *RewardProgramsResponse) SetBundleToken(v string) {
	o.BundleToken = v
}

// GetCalculationType returns the CalculationType field value
func (o *RewardProgramsResponse) GetCalculationType() CalculationType {
	if o == nil {
		var ret CalculationType
		return ret
	}

	return o.CalculationType
}

// GetCalculationTypeOk returns a tuple with the CalculationType field value
// and a boolean to check if the value has been set.
func (o *RewardProgramsResponse) GetCalculationTypeOk() (*CalculationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CalculationType, true
}

// SetCalculationType sets field value
func (o *RewardProgramsResponse) SetCalculationType(v CalculationType) {
	o.CalculationType = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *RewardProgramsResponse) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *RewardProgramsResponse) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *RewardProgramsResponse) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetIsActive returns the IsActive field value
func (o *RewardProgramsResponse) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *RewardProgramsResponse) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *RewardProgramsResponse) SetIsActive(v bool) {
	o.IsActive = v
}

// GetNote returns the Note field value
func (o *RewardProgramsResponse) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *RewardProgramsResponse) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *RewardProgramsResponse) SetNote(v string) {
	o.Note = v
}

// GetToken returns the Token field value
func (o *RewardProgramsResponse) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *RewardProgramsResponse) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *RewardProgramsResponse) SetToken(v string) {
	o.Token = v
}

// GetUpdatedTime returns the UpdatedTime field value
func (o *RewardProgramsResponse) GetUpdatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value
// and a boolean to check if the value has been set.
func (o *RewardProgramsResponse) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTime, true
}

// SetUpdatedTime sets field value
func (o *RewardProgramsResponse) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = v
}

func (o RewardProgramsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RewardProgramsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_token"] = o.AccountToken
	toSerialize["bundle_token"] = o.BundleToken
	toSerialize["calculation_type"] = o.CalculationType
	toSerialize["created_time"] = o.CreatedTime
	toSerialize["is_active"] = o.IsActive
	toSerialize["note"] = o.Note
	toSerialize["token"] = o.Token
	toSerialize["updated_time"] = o.UpdatedTime
	return toSerialize, nil
}

type NullableRewardProgramsResponse struct {
	value *RewardProgramsResponse
	isSet bool
}

func (v NullableRewardProgramsResponse) Get() *RewardProgramsResponse {
	return v.value
}

func (v *NullableRewardProgramsResponse) Set(val *RewardProgramsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRewardProgramsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRewardProgramsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewardProgramsResponse(val *RewardProgramsResponse) *NullableRewardProgramsResponse {
	return &NullableRewardProgramsResponse{value: val, isSet: true}
}

func (v NullableRewardProgramsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewardProgramsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


