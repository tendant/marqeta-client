/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"fmt"
)

// RewardType Type of reward.
type RewardType string

// List of RewardType
const (
	REWARDTYPE_AUTO_CASH_BACK RewardType = "AUTO_CASH_BACK"
	REWARDTYPE_CASH_BACK RewardType = "CASH_BACK"
)

// All allowed values of RewardType enum
var AllowedRewardTypeEnumValues = []RewardType{
	"AUTO_CASH_BACK",
	"CASH_BACK",
}

func (v *RewardType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RewardType(value)
	for _, existing := range AllowedRewardTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RewardType", value)
}

// NewRewardTypeFromValue returns a pointer to a valid RewardType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRewardTypeFromValue(v string) (*RewardType, error) {
	ev := RewardType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RewardType: valid values are %v", v, AllowedRewardTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RewardType) IsValid() bool {
	for _, existing := range AllowedRewardTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RewardType value
func (v RewardType) Ptr() *RewardType {
	return &v
}

type NullableRewardType struct {
	value *RewardType
	isSet bool
}

func (v NullableRewardType) Get() *RewardType {
	return v.value
}

func (v *NullableRewardType) Set(val *RewardType) {
	v.value = val
	v.isSet = true
}

func (v NullableRewardType) IsSet() bool {
	return v.isSet
}

func (v *NullableRewardType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewardType(val *RewardType) *NullableRewardType {
	return &NullableRewardType{value: val, isSet: true}
}

func (v NullableRewardType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewardType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

