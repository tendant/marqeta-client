/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the SelectiveAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SelectiveAuth{}

// SelectiveAuth Contains information about authorization decisions.
type SelectiveAuth struct {
	// Determines what type of merchant information is required for a match (authorization). Not relevant if `enable_regex_search_chain = false`.  * *0*  Requires exact match on card acceptor name and postal code to existing entry in Marqeta Merchant database (most restrictive). * *1*  Partial match on card acceptor name (least restrictive). * *2*  Partial match on card acceptor name; exact match on card acceptor city. * *3*  Partial match on card acceptor name; exact match on card acceptor postal code. * *4*  Partial match on card acceptor name; exact match on street address 1 and postal code.
	DmdLocationSensitivity *int32 `json:"dmd_location_sensitivity,omitempty"`
	// Set to `true` to perform regular expression checking on the description received in the authorization.
	EnableRegexSearchChain *bool `json:"enable_regex_search_chain,omitempty"`
	// Specifies the selective authorization mode.  * *0* — Inactive * *1* — Active (attempts to authorize a merchant that does not have a recognized MID by matching other pieces of information) * *2* — Logging and notification (checks the transaction and logs results, but does not authorize)  Selective authorization applies to transactions that are limited to specific merchants. Matching requirements for authorization are set by the `dmd_location_sensitivity` field.
	SaMode *int32 `json:"sa_mode,omitempty"`
}

// NewSelectiveAuth instantiates a new SelectiveAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectiveAuth() *SelectiveAuth {
	this := SelectiveAuth{}
	var dmdLocationSensitivity int32 = 0
	this.DmdLocationSensitivity = &dmdLocationSensitivity
	var enableRegexSearchChain bool = false
	this.EnableRegexSearchChain = &enableRegexSearchChain
	var saMode int32 = 1
	this.SaMode = &saMode
	return &this
}

// NewSelectiveAuthWithDefaults instantiates a new SelectiveAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectiveAuthWithDefaults() *SelectiveAuth {
	this := SelectiveAuth{}
	var dmdLocationSensitivity int32 = 0
	this.DmdLocationSensitivity = &dmdLocationSensitivity
	var enableRegexSearchChain bool = false
	this.EnableRegexSearchChain = &enableRegexSearchChain
	var saMode int32 = 1
	this.SaMode = &saMode
	return &this
}

// GetDmdLocationSensitivity returns the DmdLocationSensitivity field value if set, zero value otherwise.
func (o *SelectiveAuth) GetDmdLocationSensitivity() int32 {
	if o == nil || IsNil(o.DmdLocationSensitivity) {
		var ret int32
		return ret
	}
	return *o.DmdLocationSensitivity
}

// GetDmdLocationSensitivityOk returns a tuple with the DmdLocationSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectiveAuth) GetDmdLocationSensitivityOk() (*int32, bool) {
	if o == nil || IsNil(o.DmdLocationSensitivity) {
		return nil, false
	}
	return o.DmdLocationSensitivity, true
}

// HasDmdLocationSensitivity returns a boolean if a field has been set.
func (o *SelectiveAuth) HasDmdLocationSensitivity() bool {
	if o != nil && !IsNil(o.DmdLocationSensitivity) {
		return true
	}

	return false
}

// SetDmdLocationSensitivity gets a reference to the given int32 and assigns it to the DmdLocationSensitivity field.
func (o *SelectiveAuth) SetDmdLocationSensitivity(v int32) {
	o.DmdLocationSensitivity = &v
}

// GetEnableRegexSearchChain returns the EnableRegexSearchChain field value if set, zero value otherwise.
func (o *SelectiveAuth) GetEnableRegexSearchChain() bool {
	if o == nil || IsNil(o.EnableRegexSearchChain) {
		var ret bool
		return ret
	}
	return *o.EnableRegexSearchChain
}

// GetEnableRegexSearchChainOk returns a tuple with the EnableRegexSearchChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectiveAuth) GetEnableRegexSearchChainOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRegexSearchChain) {
		return nil, false
	}
	return o.EnableRegexSearchChain, true
}

// HasEnableRegexSearchChain returns a boolean if a field has been set.
func (o *SelectiveAuth) HasEnableRegexSearchChain() bool {
	if o != nil && !IsNil(o.EnableRegexSearchChain) {
		return true
	}

	return false
}

// SetEnableRegexSearchChain gets a reference to the given bool and assigns it to the EnableRegexSearchChain field.
func (o *SelectiveAuth) SetEnableRegexSearchChain(v bool) {
	o.EnableRegexSearchChain = &v
}

// GetSaMode returns the SaMode field value if set, zero value otherwise.
func (o *SelectiveAuth) GetSaMode() int32 {
	if o == nil || IsNil(o.SaMode) {
		var ret int32
		return ret
	}
	return *o.SaMode
}

// GetSaModeOk returns a tuple with the SaMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectiveAuth) GetSaModeOk() (*int32, bool) {
	if o == nil || IsNil(o.SaMode) {
		return nil, false
	}
	return o.SaMode, true
}

// HasSaMode returns a boolean if a field has been set.
func (o *SelectiveAuth) HasSaMode() bool {
	if o != nil && !IsNil(o.SaMode) {
		return true
	}

	return false
}

// SetSaMode gets a reference to the given int32 and assigns it to the SaMode field.
func (o *SelectiveAuth) SetSaMode(v int32) {
	o.SaMode = &v
}

func (o SelectiveAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SelectiveAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DmdLocationSensitivity) {
		toSerialize["dmd_location_sensitivity"] = o.DmdLocationSensitivity
	}
	if !IsNil(o.EnableRegexSearchChain) {
		toSerialize["enable_regex_search_chain"] = o.EnableRegexSearchChain
	}
	if !IsNil(o.SaMode) {
		toSerialize["sa_mode"] = o.SaMode
	}
	return toSerialize, nil
}

type NullableSelectiveAuth struct {
	value *SelectiveAuth
	isSet bool
}

func (v NullableSelectiveAuth) Get() *SelectiveAuth {
	return v.value
}

func (v *NullableSelectiveAuth) Set(val *SelectiveAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectiveAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectiveAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectiveAuth(val *SelectiveAuth) *NullableSelectiveAuth {
	return &NullableSelectiveAuth{value: val, isSet: true}
}

func (v NullableSelectiveAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectiveAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


