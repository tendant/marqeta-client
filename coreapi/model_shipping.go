/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the Shipping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Shipping{}

// Shipping Specifies shipping details for the order.
type Shipping struct {
	// Adds the specified value as a care of (C/O) line to the mailing carrier.  *NOTE:* This field can be specified on cards, card products, and bulk card orders. If you specify this field at multiple levels, the order of precedence is: card, bulk card order, card product.
	CareOfLine *string `json:"care_of_line,omitempty"`
	// Specifies the shipping service.
	Method *string `json:"method,omitempty"`
	RecipientAddress *FulfillmentAddressRequest `json:"recipient_address,omitempty"`
	ReturnAddress *FulfillmentAddressRequest `json:"return_address,omitempty"`
}

// NewShipping instantiates a new Shipping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShipping() *Shipping {
	this := Shipping{}
	return &this
}

// NewShippingWithDefaults instantiates a new Shipping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShippingWithDefaults() *Shipping {
	this := Shipping{}
	return &this
}

// GetCareOfLine returns the CareOfLine field value if set, zero value otherwise.
func (o *Shipping) GetCareOfLine() string {
	if o == nil || IsNil(o.CareOfLine) {
		var ret string
		return ret
	}
	return *o.CareOfLine
}

// GetCareOfLineOk returns a tuple with the CareOfLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipping) GetCareOfLineOk() (*string, bool) {
	if o == nil || IsNil(o.CareOfLine) {
		return nil, false
	}
	return o.CareOfLine, true
}

// HasCareOfLine returns a boolean if a field has been set.
func (o *Shipping) HasCareOfLine() bool {
	if o != nil && !IsNil(o.CareOfLine) {
		return true
	}

	return false
}

// SetCareOfLine gets a reference to the given string and assigns it to the CareOfLine field.
func (o *Shipping) SetCareOfLine(v string) {
	o.CareOfLine = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *Shipping) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipping) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *Shipping) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *Shipping) SetMethod(v string) {
	o.Method = &v
}

// GetRecipientAddress returns the RecipientAddress field value if set, zero value otherwise.
func (o *Shipping) GetRecipientAddress() FulfillmentAddressRequest {
	if o == nil || IsNil(o.RecipientAddress) {
		var ret FulfillmentAddressRequest
		return ret
	}
	return *o.RecipientAddress
}

// GetRecipientAddressOk returns a tuple with the RecipientAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipping) GetRecipientAddressOk() (*FulfillmentAddressRequest, bool) {
	if o == nil || IsNil(o.RecipientAddress) {
		return nil, false
	}
	return o.RecipientAddress, true
}

// HasRecipientAddress returns a boolean if a field has been set.
func (o *Shipping) HasRecipientAddress() bool {
	if o != nil && !IsNil(o.RecipientAddress) {
		return true
	}

	return false
}

// SetRecipientAddress gets a reference to the given FulfillmentAddressRequest and assigns it to the RecipientAddress field.
func (o *Shipping) SetRecipientAddress(v FulfillmentAddressRequest) {
	o.RecipientAddress = &v
}

// GetReturnAddress returns the ReturnAddress field value if set, zero value otherwise.
func (o *Shipping) GetReturnAddress() FulfillmentAddressRequest {
	if o == nil || IsNil(o.ReturnAddress) {
		var ret FulfillmentAddressRequest
		return ret
	}
	return *o.ReturnAddress
}

// GetReturnAddressOk returns a tuple with the ReturnAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipping) GetReturnAddressOk() (*FulfillmentAddressRequest, bool) {
	if o == nil || IsNil(o.ReturnAddress) {
		return nil, false
	}
	return o.ReturnAddress, true
}

// HasReturnAddress returns a boolean if a field has been set.
func (o *Shipping) HasReturnAddress() bool {
	if o != nil && !IsNil(o.ReturnAddress) {
		return true
	}

	return false
}

// SetReturnAddress gets a reference to the given FulfillmentAddressRequest and assigns it to the ReturnAddress field.
func (o *Shipping) SetReturnAddress(v FulfillmentAddressRequest) {
	o.ReturnAddress = &v
}

func (o Shipping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Shipping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CareOfLine) {
		toSerialize["care_of_line"] = o.CareOfLine
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.RecipientAddress) {
		toSerialize["recipient_address"] = o.RecipientAddress
	}
	if !IsNil(o.ReturnAddress) {
		toSerialize["return_address"] = o.ReturnAddress
	}
	return toSerialize, nil
}

type NullableShipping struct {
	value *Shipping
	isSet bool
}

func (v NullableShipping) Get() *Shipping {
	return v.value
}

func (v *NullableShipping) Set(val *Shipping) {
	v.value = val
	v.isSet = true
}

func (v NullableShipping) IsSet() bool {
	return v.isSet
}

func (v *NullableShipping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipping(val *Shipping) *NullableShipping {
	return &NullableShipping{value: val, isSet: true}
}

func (v NullableShipping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


