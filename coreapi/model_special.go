/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the Special type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Special{}

// Special Contains information about merchant onboarding.
type Special struct {
	// If set to `true`, cards of this card product type can be used for merchant onboarding.
	MerchantOnBoarding *bool `json:"merchant_on_boarding,omitempty"`
}

// NewSpecial instantiates a new Special object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecial() *Special {
	this := Special{}
	var merchantOnBoarding bool = false
	this.MerchantOnBoarding = &merchantOnBoarding
	return &this
}

// NewSpecialWithDefaults instantiates a new Special object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialWithDefaults() *Special {
	this := Special{}
	var merchantOnBoarding bool = false
	this.MerchantOnBoarding = &merchantOnBoarding
	return &this
}

// GetMerchantOnBoarding returns the MerchantOnBoarding field value if set, zero value otherwise.
func (o *Special) GetMerchantOnBoarding() bool {
	if o == nil || IsNil(o.MerchantOnBoarding) {
		var ret bool
		return ret
	}
	return *o.MerchantOnBoarding
}

// GetMerchantOnBoardingOk returns a tuple with the MerchantOnBoarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Special) GetMerchantOnBoardingOk() (*bool, bool) {
	if o == nil || IsNil(o.MerchantOnBoarding) {
		return nil, false
	}
	return o.MerchantOnBoarding, true
}

// HasMerchantOnBoarding returns a boolean if a field has been set.
func (o *Special) HasMerchantOnBoarding() bool {
	if o != nil && !IsNil(o.MerchantOnBoarding) {
		return true
	}

	return false
}

// SetMerchantOnBoarding gets a reference to the given bool and assigns it to the MerchantOnBoarding field.
func (o *Special) SetMerchantOnBoarding(v bool) {
	o.MerchantOnBoarding = &v
}

func (o Special) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Special) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MerchantOnBoarding) {
		toSerialize["merchant_on_boarding"] = o.MerchantOnBoarding
	}
	return toSerialize, nil
}

type NullableSpecial struct {
	value *Special
	isSet bool
}

func (v NullableSpecial) Get() *Special {
	return v.value
}

func (v *NullableSpecial) Set(val *Special) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecial) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecial(val *Special) *NullableSpecial {
	return &NullableSpecial{value: val, isSet: true}
}

func (v NullableSpecial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


