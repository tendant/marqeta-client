/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the StatementFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatementFile{}

// StatementFile A collection of statement files.
type StatementFile struct {
	// Unique identifier of the credit account on which the statement PDF file is generated.
	AccountToken *string `json:"account_token,omitempty"`
	// Date and time when the statement period ended.
	ClosingDate *time.Time `json:"closing_date,omitempty"`
	// Date and time when the statement period began.
	OpeningDate *time.Time `json:"opening_date,omitempty"`
	// The signed URL to retrieve the statement PDF file.
	SignedUrl *string `json:"signed_url,omitempty"`
	// Unique identifier of the statement summary.
	StatementSummaryToken *string `json:"statement_summary_token,omitempty"`
	// Unique identifier of the statement file.
	Token *string `json:"token,omitempty"`
	// Type of file.
	Type *string `json:"type,omitempty"`
}

// NewStatementFile instantiates a new StatementFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementFile() *StatementFile {
	this := StatementFile{}
	return &this
}

// NewStatementFileWithDefaults instantiates a new StatementFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementFileWithDefaults() *StatementFile {
	this := StatementFile{}
	return &this
}

// GetAccountToken returns the AccountToken field value if set, zero value otherwise.
func (o *StatementFile) GetAccountToken() string {
	if o == nil || IsNil(o.AccountToken) {
		var ret string
		return ret
	}
	return *o.AccountToken
}

// GetAccountTokenOk returns a tuple with the AccountToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementFile) GetAccountTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccountToken) {
		return nil, false
	}
	return o.AccountToken, true
}

// HasAccountToken returns a boolean if a field has been set.
func (o *StatementFile) HasAccountToken() bool {
	if o != nil && !IsNil(o.AccountToken) {
		return true
	}

	return false
}

// SetAccountToken gets a reference to the given string and assigns it to the AccountToken field.
func (o *StatementFile) SetAccountToken(v string) {
	o.AccountToken = &v
}

// GetClosingDate returns the ClosingDate field value if set, zero value otherwise.
func (o *StatementFile) GetClosingDate() time.Time {
	if o == nil || IsNil(o.ClosingDate) {
		var ret time.Time
		return ret
	}
	return *o.ClosingDate
}

// GetClosingDateOk returns a tuple with the ClosingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementFile) GetClosingDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosingDate) {
		return nil, false
	}
	return o.ClosingDate, true
}

// HasClosingDate returns a boolean if a field has been set.
func (o *StatementFile) HasClosingDate() bool {
	if o != nil && !IsNil(o.ClosingDate) {
		return true
	}

	return false
}

// SetClosingDate gets a reference to the given time.Time and assigns it to the ClosingDate field.
func (o *StatementFile) SetClosingDate(v time.Time) {
	o.ClosingDate = &v
}

// GetOpeningDate returns the OpeningDate field value if set, zero value otherwise.
func (o *StatementFile) GetOpeningDate() time.Time {
	if o == nil || IsNil(o.OpeningDate) {
		var ret time.Time
		return ret
	}
	return *o.OpeningDate
}

// GetOpeningDateOk returns a tuple with the OpeningDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementFile) GetOpeningDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OpeningDate) {
		return nil, false
	}
	return o.OpeningDate, true
}

// HasOpeningDate returns a boolean if a field has been set.
func (o *StatementFile) HasOpeningDate() bool {
	if o != nil && !IsNil(o.OpeningDate) {
		return true
	}

	return false
}

// SetOpeningDate gets a reference to the given time.Time and assigns it to the OpeningDate field.
func (o *StatementFile) SetOpeningDate(v time.Time) {
	o.OpeningDate = &v
}

// GetSignedUrl returns the SignedUrl field value if set, zero value otherwise.
func (o *StatementFile) GetSignedUrl() string {
	if o == nil || IsNil(o.SignedUrl) {
		var ret string
		return ret
	}
	return *o.SignedUrl
}

// GetSignedUrlOk returns a tuple with the SignedUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementFile) GetSignedUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SignedUrl) {
		return nil, false
	}
	return o.SignedUrl, true
}

// HasSignedUrl returns a boolean if a field has been set.
func (o *StatementFile) HasSignedUrl() bool {
	if o != nil && !IsNil(o.SignedUrl) {
		return true
	}

	return false
}

// SetSignedUrl gets a reference to the given string and assigns it to the SignedUrl field.
func (o *StatementFile) SetSignedUrl(v string) {
	o.SignedUrl = &v
}

// GetStatementSummaryToken returns the StatementSummaryToken field value if set, zero value otherwise.
func (o *StatementFile) GetStatementSummaryToken() string {
	if o == nil || IsNil(o.StatementSummaryToken) {
		var ret string
		return ret
	}
	return *o.StatementSummaryToken
}

// GetStatementSummaryTokenOk returns a tuple with the StatementSummaryToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementFile) GetStatementSummaryTokenOk() (*string, bool) {
	if o == nil || IsNil(o.StatementSummaryToken) {
		return nil, false
	}
	return o.StatementSummaryToken, true
}

// HasStatementSummaryToken returns a boolean if a field has been set.
func (o *StatementFile) HasStatementSummaryToken() bool {
	if o != nil && !IsNil(o.StatementSummaryToken) {
		return true
	}

	return false
}

// SetStatementSummaryToken gets a reference to the given string and assigns it to the StatementSummaryToken field.
func (o *StatementFile) SetStatementSummaryToken(v string) {
	o.StatementSummaryToken = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *StatementFile) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementFile) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *StatementFile) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *StatementFile) SetToken(v string) {
	o.Token = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StatementFile) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementFile) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StatementFile) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StatementFile) SetType(v string) {
	o.Type = &v
}

func (o StatementFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatementFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountToken) {
		toSerialize["account_token"] = o.AccountToken
	}
	if !IsNil(o.ClosingDate) {
		toSerialize["closing_date"] = o.ClosingDate
	}
	if !IsNil(o.OpeningDate) {
		toSerialize["opening_date"] = o.OpeningDate
	}
	if !IsNil(o.SignedUrl) {
		toSerialize["signed_url"] = o.SignedUrl
	}
	if !IsNil(o.StatementSummaryToken) {
		toSerialize["statement_summary_token"] = o.StatementSummaryToken
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableStatementFile struct {
	value *StatementFile
	isSet bool
}

func (v NullableStatementFile) Get() *StatementFile {
	return v.value
}

func (v *NullableStatementFile) Set(val *StatementFile) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementFile) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementFile(val *StatementFile) *NullableStatementFile {
	return &NullableStatementFile{value: val, isSet: true}
}

func (v NullableStatementFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


