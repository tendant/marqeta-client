/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the StatementPaymentInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatementPaymentInfo{}

// StatementPaymentInfo Contains information on a statement payment.
type StatementPaymentInfo struct {
	// Date and time when the statement payment information was created on Marqeta's credit platform, in UTC.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Minimum payment amount for the current statement period, based on the associated credit product settings.
	MinimumPaymentDue *float32 `json:"minimum_payment_due,omitempty"`
	// Balance on the credit account when the statement period ended.
	NewStatementBalance *float32 `json:"new_statement_balance,omitempty"`
	// Last day a payment can be made before interest and fees are charged to the account.
	PaymentCutoffDate *time.Time `json:"payment_cutoff_date,omitempty"`
	// Payment due date, based on the credit account settings.
	PaymentDueDate *time.Time `json:"payment_due_date,omitempty"`
	// Unique identifier of the statement summary.
	StatementSummaryToken *string `json:"statement_summary_token,omitempty"`
	// Savings amount if the balance is paid off in three years versus only making minimum payments.
	ThreeYearSavings *float32 `json:"three_year_savings,omitempty"`
	// Unique identifier of the statement payment.
	Token *string `json:"token,omitempty"`
	// One or more payoff warnings.
	Warnings []StatementPaymentWarning `json:"warnings,omitempty"`
}

// NewStatementPaymentInfo instantiates a new StatementPaymentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementPaymentInfo() *StatementPaymentInfo {
	this := StatementPaymentInfo{}
	return &this
}

// NewStatementPaymentInfoWithDefaults instantiates a new StatementPaymentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementPaymentInfoWithDefaults() *StatementPaymentInfo {
	this := StatementPaymentInfo{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *StatementPaymentInfo) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentInfo) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *StatementPaymentInfo) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *StatementPaymentInfo) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetMinimumPaymentDue returns the MinimumPaymentDue field value if set, zero value otherwise.
func (o *StatementPaymentInfo) GetMinimumPaymentDue() float32 {
	if o == nil || IsNil(o.MinimumPaymentDue) {
		var ret float32
		return ret
	}
	return *o.MinimumPaymentDue
}

// GetMinimumPaymentDueOk returns a tuple with the MinimumPaymentDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentInfo) GetMinimumPaymentDueOk() (*float32, bool) {
	if o == nil || IsNil(o.MinimumPaymentDue) {
		return nil, false
	}
	return o.MinimumPaymentDue, true
}

// HasMinimumPaymentDue returns a boolean if a field has been set.
func (o *StatementPaymentInfo) HasMinimumPaymentDue() bool {
	if o != nil && !IsNil(o.MinimumPaymentDue) {
		return true
	}

	return false
}

// SetMinimumPaymentDue gets a reference to the given float32 and assigns it to the MinimumPaymentDue field.
func (o *StatementPaymentInfo) SetMinimumPaymentDue(v float32) {
	o.MinimumPaymentDue = &v
}

// GetNewStatementBalance returns the NewStatementBalance field value if set, zero value otherwise.
func (o *StatementPaymentInfo) GetNewStatementBalance() float32 {
	if o == nil || IsNil(o.NewStatementBalance) {
		var ret float32
		return ret
	}
	return *o.NewStatementBalance
}

// GetNewStatementBalanceOk returns a tuple with the NewStatementBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentInfo) GetNewStatementBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.NewStatementBalance) {
		return nil, false
	}
	return o.NewStatementBalance, true
}

// HasNewStatementBalance returns a boolean if a field has been set.
func (o *StatementPaymentInfo) HasNewStatementBalance() bool {
	if o != nil && !IsNil(o.NewStatementBalance) {
		return true
	}

	return false
}

// SetNewStatementBalance gets a reference to the given float32 and assigns it to the NewStatementBalance field.
func (o *StatementPaymentInfo) SetNewStatementBalance(v float32) {
	o.NewStatementBalance = &v
}

// GetPaymentCutoffDate returns the PaymentCutoffDate field value if set, zero value otherwise.
func (o *StatementPaymentInfo) GetPaymentCutoffDate() time.Time {
	if o == nil || IsNil(o.PaymentCutoffDate) {
		var ret time.Time
		return ret
	}
	return *o.PaymentCutoffDate
}

// GetPaymentCutoffDateOk returns a tuple with the PaymentCutoffDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentInfo) GetPaymentCutoffDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PaymentCutoffDate) {
		return nil, false
	}
	return o.PaymentCutoffDate, true
}

// HasPaymentCutoffDate returns a boolean if a field has been set.
func (o *StatementPaymentInfo) HasPaymentCutoffDate() bool {
	if o != nil && !IsNil(o.PaymentCutoffDate) {
		return true
	}

	return false
}

// SetPaymentCutoffDate gets a reference to the given time.Time and assigns it to the PaymentCutoffDate field.
func (o *StatementPaymentInfo) SetPaymentCutoffDate(v time.Time) {
	o.PaymentCutoffDate = &v
}

// GetPaymentDueDate returns the PaymentDueDate field value if set, zero value otherwise.
func (o *StatementPaymentInfo) GetPaymentDueDate() time.Time {
	if o == nil || IsNil(o.PaymentDueDate) {
		var ret time.Time
		return ret
	}
	return *o.PaymentDueDate
}

// GetPaymentDueDateOk returns a tuple with the PaymentDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentInfo) GetPaymentDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PaymentDueDate) {
		return nil, false
	}
	return o.PaymentDueDate, true
}

// HasPaymentDueDate returns a boolean if a field has been set.
func (o *StatementPaymentInfo) HasPaymentDueDate() bool {
	if o != nil && !IsNil(o.PaymentDueDate) {
		return true
	}

	return false
}

// SetPaymentDueDate gets a reference to the given time.Time and assigns it to the PaymentDueDate field.
func (o *StatementPaymentInfo) SetPaymentDueDate(v time.Time) {
	o.PaymentDueDate = &v
}

// GetStatementSummaryToken returns the StatementSummaryToken field value if set, zero value otherwise.
func (o *StatementPaymentInfo) GetStatementSummaryToken() string {
	if o == nil || IsNil(o.StatementSummaryToken) {
		var ret string
		return ret
	}
	return *o.StatementSummaryToken
}

// GetStatementSummaryTokenOk returns a tuple with the StatementSummaryToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentInfo) GetStatementSummaryTokenOk() (*string, bool) {
	if o == nil || IsNil(o.StatementSummaryToken) {
		return nil, false
	}
	return o.StatementSummaryToken, true
}

// HasStatementSummaryToken returns a boolean if a field has been set.
func (o *StatementPaymentInfo) HasStatementSummaryToken() bool {
	if o != nil && !IsNil(o.StatementSummaryToken) {
		return true
	}

	return false
}

// SetStatementSummaryToken gets a reference to the given string and assigns it to the StatementSummaryToken field.
func (o *StatementPaymentInfo) SetStatementSummaryToken(v string) {
	o.StatementSummaryToken = &v
}

// GetThreeYearSavings returns the ThreeYearSavings field value if set, zero value otherwise.
func (o *StatementPaymentInfo) GetThreeYearSavings() float32 {
	if o == nil || IsNil(o.ThreeYearSavings) {
		var ret float32
		return ret
	}
	return *o.ThreeYearSavings
}

// GetThreeYearSavingsOk returns a tuple with the ThreeYearSavings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentInfo) GetThreeYearSavingsOk() (*float32, bool) {
	if o == nil || IsNil(o.ThreeYearSavings) {
		return nil, false
	}
	return o.ThreeYearSavings, true
}

// HasThreeYearSavings returns a boolean if a field has been set.
func (o *StatementPaymentInfo) HasThreeYearSavings() bool {
	if o != nil && !IsNil(o.ThreeYearSavings) {
		return true
	}

	return false
}

// SetThreeYearSavings gets a reference to the given float32 and assigns it to the ThreeYearSavings field.
func (o *StatementPaymentInfo) SetThreeYearSavings(v float32) {
	o.ThreeYearSavings = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *StatementPaymentInfo) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentInfo) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *StatementPaymentInfo) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *StatementPaymentInfo) SetToken(v string) {
	o.Token = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *StatementPaymentInfo) GetWarnings() []StatementPaymentWarning {
	if o == nil || IsNil(o.Warnings) {
		var ret []StatementPaymentWarning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentInfo) GetWarningsOk() ([]StatementPaymentWarning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *StatementPaymentInfo) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []StatementPaymentWarning and assigns it to the Warnings field.
func (o *StatementPaymentInfo) SetWarnings(v []StatementPaymentWarning) {
	o.Warnings = v
}

func (o StatementPaymentInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatementPaymentInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.MinimumPaymentDue) {
		toSerialize["minimum_payment_due"] = o.MinimumPaymentDue
	}
	if !IsNil(o.NewStatementBalance) {
		toSerialize["new_statement_balance"] = o.NewStatementBalance
	}
	if !IsNil(o.PaymentCutoffDate) {
		toSerialize["payment_cutoff_date"] = o.PaymentCutoffDate
	}
	if !IsNil(o.PaymentDueDate) {
		toSerialize["payment_due_date"] = o.PaymentDueDate
	}
	if !IsNil(o.StatementSummaryToken) {
		toSerialize["statement_summary_token"] = o.StatementSummaryToken
	}
	if !IsNil(o.ThreeYearSavings) {
		toSerialize["three_year_savings"] = o.ThreeYearSavings
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableStatementPaymentInfo struct {
	value *StatementPaymentInfo
	isSet bool
}

func (v NullableStatementPaymentInfo) Get() *StatementPaymentInfo {
	return v.value
}

func (v *NullableStatementPaymentInfo) Set(val *StatementPaymentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementPaymentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementPaymentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementPaymentInfo(val *StatementPaymentInfo) *NullableStatementPaymentInfo {
	return &NullableStatementPaymentInfo{value: val, isSet: true}
}

func (v NullableStatementPaymentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementPaymentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


