/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the StatementPaymentWarning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatementPaymentWarning{}

// StatementPaymentWarning Contains information on statement payment warnings.
type StatementPaymentWarning struct {
	// Statement disclosure in the case of negative or no amortization, or no lifetime repayment for the minimum payment warning type.  * `NEGATIVE_OR_NO_AMORTIZATION` - Occurs when the interest amount is higher than the minimum payment; results in the outstanding balance remaining in perpetuity. * `NO_LIFETIME_REPAYMENT` - Occurs when the interest amount is just below the minimum payment; results in the outstanding balance taking longer than a lifetime to pay off.
	Disclosure *string `json:"disclosure,omitempty"`
	// For the minimum payment warning type, this value represents the total amount of interest to pay off the statement balance if only making the minimum payment each month.  For the 3 Year warning type, this value represents the total amount of interest if paying off the statement balance in three years.
	InterestPaid *float32 `json:"interest_paid,omitempty"`
	// For the minimum payment warning type, this value is 0.  For the 3 Year warning type, this value represents the fixed monthly payment amount required to pay off the statement balance in three years.
	MonthlyPayment *float32 `json:"monthly_payment,omitempty"`
	// For the minimum payment warning type, this value represents the number of periods required to pay off the statement balance.  For the 3 Year warning type, this value is 36 (months).
	PayOffPeriod *int32 `json:"pay_off_period,omitempty"`
	// Time unit of the pay off period.
	PeriodType *string `json:"period_type,omitempty"`
	// For the minimum payment warning type, this value represents the total amount of principal and interest to pay off the statement balance if only making the minimum payment each month.  For the 3 Year warning type, this value represents the total amount of principal and interest if paying off the statement balance in three years.
	TotalPaid *float32 `json:"total_paid,omitempty"`
	// Type of statement warning.  * `MIN_PAYMENT` - Displays the total estimated payment amount and how long it would take to pay off the statement balance if only making minimum payments. * `3_YEAR` - Displays the monthly payment amount and total estimated payment amount if paying off the statement balance in three years.
	Type *string `json:"type,omitempty"`
}

// NewStatementPaymentWarning instantiates a new StatementPaymentWarning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementPaymentWarning() *StatementPaymentWarning {
	this := StatementPaymentWarning{}
	return &this
}

// NewStatementPaymentWarningWithDefaults instantiates a new StatementPaymentWarning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementPaymentWarningWithDefaults() *StatementPaymentWarning {
	this := StatementPaymentWarning{}
	return &this
}

// GetDisclosure returns the Disclosure field value if set, zero value otherwise.
func (o *StatementPaymentWarning) GetDisclosure() string {
	if o == nil || IsNil(o.Disclosure) {
		var ret string
		return ret
	}
	return *o.Disclosure
}

// GetDisclosureOk returns a tuple with the Disclosure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentWarning) GetDisclosureOk() (*string, bool) {
	if o == nil || IsNil(o.Disclosure) {
		return nil, false
	}
	return o.Disclosure, true
}

// HasDisclosure returns a boolean if a field has been set.
func (o *StatementPaymentWarning) HasDisclosure() bool {
	if o != nil && !IsNil(o.Disclosure) {
		return true
	}

	return false
}

// SetDisclosure gets a reference to the given string and assigns it to the Disclosure field.
func (o *StatementPaymentWarning) SetDisclosure(v string) {
	o.Disclosure = &v
}

// GetInterestPaid returns the InterestPaid field value if set, zero value otherwise.
func (o *StatementPaymentWarning) GetInterestPaid() float32 {
	if o == nil || IsNil(o.InterestPaid) {
		var ret float32
		return ret
	}
	return *o.InterestPaid
}

// GetInterestPaidOk returns a tuple with the InterestPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentWarning) GetInterestPaidOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestPaid) {
		return nil, false
	}
	return o.InterestPaid, true
}

// HasInterestPaid returns a boolean if a field has been set.
func (o *StatementPaymentWarning) HasInterestPaid() bool {
	if o != nil && !IsNil(o.InterestPaid) {
		return true
	}

	return false
}

// SetInterestPaid gets a reference to the given float32 and assigns it to the InterestPaid field.
func (o *StatementPaymentWarning) SetInterestPaid(v float32) {
	o.InterestPaid = &v
}

// GetMonthlyPayment returns the MonthlyPayment field value if set, zero value otherwise.
func (o *StatementPaymentWarning) GetMonthlyPayment() float32 {
	if o == nil || IsNil(o.MonthlyPayment) {
		var ret float32
		return ret
	}
	return *o.MonthlyPayment
}

// GetMonthlyPaymentOk returns a tuple with the MonthlyPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentWarning) GetMonthlyPaymentOk() (*float32, bool) {
	if o == nil || IsNil(o.MonthlyPayment) {
		return nil, false
	}
	return o.MonthlyPayment, true
}

// HasMonthlyPayment returns a boolean if a field has been set.
func (o *StatementPaymentWarning) HasMonthlyPayment() bool {
	if o != nil && !IsNil(o.MonthlyPayment) {
		return true
	}

	return false
}

// SetMonthlyPayment gets a reference to the given float32 and assigns it to the MonthlyPayment field.
func (o *StatementPaymentWarning) SetMonthlyPayment(v float32) {
	o.MonthlyPayment = &v
}

// GetPayOffPeriod returns the PayOffPeriod field value if set, zero value otherwise.
func (o *StatementPaymentWarning) GetPayOffPeriod() int32 {
	if o == nil || IsNil(o.PayOffPeriod) {
		var ret int32
		return ret
	}
	return *o.PayOffPeriod
}

// GetPayOffPeriodOk returns a tuple with the PayOffPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentWarning) GetPayOffPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.PayOffPeriod) {
		return nil, false
	}
	return o.PayOffPeriod, true
}

// HasPayOffPeriod returns a boolean if a field has been set.
func (o *StatementPaymentWarning) HasPayOffPeriod() bool {
	if o != nil && !IsNil(o.PayOffPeriod) {
		return true
	}

	return false
}

// SetPayOffPeriod gets a reference to the given int32 and assigns it to the PayOffPeriod field.
func (o *StatementPaymentWarning) SetPayOffPeriod(v int32) {
	o.PayOffPeriod = &v
}

// GetPeriodType returns the PeriodType field value if set, zero value otherwise.
func (o *StatementPaymentWarning) GetPeriodType() string {
	if o == nil || IsNil(o.PeriodType) {
		var ret string
		return ret
	}
	return *o.PeriodType
}

// GetPeriodTypeOk returns a tuple with the PeriodType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentWarning) GetPeriodTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PeriodType) {
		return nil, false
	}
	return o.PeriodType, true
}

// HasPeriodType returns a boolean if a field has been set.
func (o *StatementPaymentWarning) HasPeriodType() bool {
	if o != nil && !IsNil(o.PeriodType) {
		return true
	}

	return false
}

// SetPeriodType gets a reference to the given string and assigns it to the PeriodType field.
func (o *StatementPaymentWarning) SetPeriodType(v string) {
	o.PeriodType = &v
}

// GetTotalPaid returns the TotalPaid field value if set, zero value otherwise.
func (o *StatementPaymentWarning) GetTotalPaid() float32 {
	if o == nil || IsNil(o.TotalPaid) {
		var ret float32
		return ret
	}
	return *o.TotalPaid
}

// GetTotalPaidOk returns a tuple with the TotalPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentWarning) GetTotalPaidOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalPaid) {
		return nil, false
	}
	return o.TotalPaid, true
}

// HasTotalPaid returns a boolean if a field has been set.
func (o *StatementPaymentWarning) HasTotalPaid() bool {
	if o != nil && !IsNil(o.TotalPaid) {
		return true
	}

	return false
}

// SetTotalPaid gets a reference to the given float32 and assigns it to the TotalPaid field.
func (o *StatementPaymentWarning) SetTotalPaid(v float32) {
	o.TotalPaid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StatementPaymentWarning) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementPaymentWarning) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StatementPaymentWarning) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StatementPaymentWarning) SetType(v string) {
	o.Type = &v
}

func (o StatementPaymentWarning) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatementPaymentWarning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disclosure) {
		toSerialize["disclosure"] = o.Disclosure
	}
	if !IsNil(o.InterestPaid) {
		toSerialize["interest_paid"] = o.InterestPaid
	}
	if !IsNil(o.MonthlyPayment) {
		toSerialize["monthly_payment"] = o.MonthlyPayment
	}
	if !IsNil(o.PayOffPeriod) {
		toSerialize["pay_off_period"] = o.PayOffPeriod
	}
	if !IsNil(o.PeriodType) {
		toSerialize["period_type"] = o.PeriodType
	}
	if !IsNil(o.TotalPaid) {
		toSerialize["total_paid"] = o.TotalPaid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableStatementPaymentWarning struct {
	value *StatementPaymentWarning
	isSet bool
}

func (v NullableStatementPaymentWarning) Get() *StatementPaymentWarning {
	return v.value
}

func (v *NullableStatementPaymentWarning) Set(val *StatementPaymentWarning) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementPaymentWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementPaymentWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementPaymentWarning(val *StatementPaymentWarning) *NullableStatementPaymentWarning {
	return &NullableStatementPaymentWarning{value: val, isSet: true}
}

func (v NullableStatementPaymentWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementPaymentWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


