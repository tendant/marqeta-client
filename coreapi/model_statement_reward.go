/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the StatementReward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatementReward{}

// StatementReward Contains information on statement rewards.
type StatementReward struct {
	// Date and time when the statement reward was created on Marqeta's credit platform, in UTC.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Amount of rewards received in the current billing cycle.
	CurrentBillingCycleReward *float32 `json:"current_billing_cycle_reward,omitempty"`
	// Amount of rewards received in the previous billing cycle.
	PreviousBillingCycleReward *float32 `json:"previous_billing_cycle_reward,omitempty"`
	// Unique identifier of the rewards for a specific statement.
	Token *string `json:"token,omitempty"`
}

// NewStatementReward instantiates a new StatementReward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementReward() *StatementReward {
	this := StatementReward{}
	return &this
}

// NewStatementRewardWithDefaults instantiates a new StatementReward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementRewardWithDefaults() *StatementReward {
	this := StatementReward{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *StatementReward) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementReward) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *StatementReward) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *StatementReward) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetCurrentBillingCycleReward returns the CurrentBillingCycleReward field value if set, zero value otherwise.
func (o *StatementReward) GetCurrentBillingCycleReward() float32 {
	if o == nil || IsNil(o.CurrentBillingCycleReward) {
		var ret float32
		return ret
	}
	return *o.CurrentBillingCycleReward
}

// GetCurrentBillingCycleRewardOk returns a tuple with the CurrentBillingCycleReward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementReward) GetCurrentBillingCycleRewardOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentBillingCycleReward) {
		return nil, false
	}
	return o.CurrentBillingCycleReward, true
}

// HasCurrentBillingCycleReward returns a boolean if a field has been set.
func (o *StatementReward) HasCurrentBillingCycleReward() bool {
	if o != nil && !IsNil(o.CurrentBillingCycleReward) {
		return true
	}

	return false
}

// SetCurrentBillingCycleReward gets a reference to the given float32 and assigns it to the CurrentBillingCycleReward field.
func (o *StatementReward) SetCurrentBillingCycleReward(v float32) {
	o.CurrentBillingCycleReward = &v
}

// GetPreviousBillingCycleReward returns the PreviousBillingCycleReward field value if set, zero value otherwise.
func (o *StatementReward) GetPreviousBillingCycleReward() float32 {
	if o == nil || IsNil(o.PreviousBillingCycleReward) {
		var ret float32
		return ret
	}
	return *o.PreviousBillingCycleReward
}

// GetPreviousBillingCycleRewardOk returns a tuple with the PreviousBillingCycleReward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementReward) GetPreviousBillingCycleRewardOk() (*float32, bool) {
	if o == nil || IsNil(o.PreviousBillingCycleReward) {
		return nil, false
	}
	return o.PreviousBillingCycleReward, true
}

// HasPreviousBillingCycleReward returns a boolean if a field has been set.
func (o *StatementReward) HasPreviousBillingCycleReward() bool {
	if o != nil && !IsNil(o.PreviousBillingCycleReward) {
		return true
	}

	return false
}

// SetPreviousBillingCycleReward gets a reference to the given float32 and assigns it to the PreviousBillingCycleReward field.
func (o *StatementReward) SetPreviousBillingCycleReward(v float32) {
	o.PreviousBillingCycleReward = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *StatementReward) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementReward) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *StatementReward) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *StatementReward) SetToken(v string) {
	o.Token = &v
}

func (o StatementReward) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatementReward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.CurrentBillingCycleReward) {
		toSerialize["current_billing_cycle_reward"] = o.CurrentBillingCycleReward
	}
	if !IsNil(o.PreviousBillingCycleReward) {
		toSerialize["previous_billing_cycle_reward"] = o.PreviousBillingCycleReward
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableStatementReward struct {
	value *StatementReward
	isSet bool
}

func (v NullableStatementReward) Get() *StatementReward {
	return v.value
}

func (v *NullableStatementReward) Set(val *StatementReward) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementReward) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementReward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementReward(val *StatementReward) *NullableStatementReward {
	return &NullableStatementReward{value: val, isSet: true}
}

func (v NullableStatementReward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementReward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


