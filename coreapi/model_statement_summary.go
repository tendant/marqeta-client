/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
	"time"
)

// checks if the StatementSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatementSummary{}

// StatementSummary Contains the summary data for an account's monthly statement.
type StatementSummary struct {
	// Unique identifier of the credit account on which the statement summary is generated.
	AccountToken string `json:"account_token"`
	// Amount available to spend on the credit account, as of the statement closing date.
	AvailableCredit float32 `json:"available_credit"`
	// Balance of the credit account when the statement period ended.
	ClosingBalance float32 `json:"closing_balance"`
	// Date and time when the statement period ended.
	ClosingDate time.Time `json:"closing_date"`
	// Date and time when the statement summary was created on Marqeta's credit platform, in UTC.
	CreatedTime time.Time `json:"created_time"`
	// Maximum balance the credit account can carry, as of the statement closing date.
	CreditLimit *float32 `json:"credit_limit,omitempty"`
	// Total amount of credits received during the statement period.
	Credits float32 `json:"credits"`
	CycleType CycleType `json:"cycle_type"`
	// Number of days in the billing cycle, also known as the statement period.
	DaysInBillingCycle int32 `json:"days_in_billing_cycle"`
	// Total amount of fees charged during the statement period. Does not include periodic fees.
	Fees float32 `json:"fees"`
	// Total amount of interest charged during the statement period.
	Interest float32 `json:"interest"`
	// Balance of the credit account when the statement period began.
	OpeningBalance float32 `json:"opening_balance"`
	// Date and time when the statement period began.
	OpeningDate time.Time `json:"opening_date"`
	// Total payment amount, required to make the account current.
	PastDueAmount float32 `json:"past_due_amount"`
	// Total amount of payments made during the statement period.
	Payments float32 `json:"payments"`
	// Total amount of purchases made during the statement period.
	Purchases float32 `json:"purchases"`
	// Unique identifier of the statement summary.
	Token string `json:"token"`
}

// NewStatementSummary instantiates a new StatementSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementSummary(accountToken string, availableCredit float32, closingBalance float32, closingDate time.Time, createdTime time.Time, credits float32, cycleType CycleType, daysInBillingCycle int32, fees float32, interest float32, openingBalance float32, openingDate time.Time, pastDueAmount float32, payments float32, purchases float32, token string) *StatementSummary {
	this := StatementSummary{}
	this.AccountToken = accountToken
	this.AvailableCredit = availableCredit
	this.ClosingBalance = closingBalance
	this.ClosingDate = closingDate
	this.CreatedTime = createdTime
	this.Credits = credits
	this.CycleType = cycleType
	this.DaysInBillingCycle = daysInBillingCycle
	this.Fees = fees
	this.Interest = interest
	this.OpeningBalance = openingBalance
	this.OpeningDate = openingDate
	this.PastDueAmount = pastDueAmount
	this.Payments = payments
	this.Purchases = purchases
	this.Token = token
	return &this
}

// NewStatementSummaryWithDefaults instantiates a new StatementSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementSummaryWithDefaults() *StatementSummary {
	this := StatementSummary{}
	return &this
}

// GetAccountToken returns the AccountToken field value
func (o *StatementSummary) GetAccountToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountToken
}

// GetAccountTokenOk returns a tuple with the AccountToken field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetAccountTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountToken, true
}

// SetAccountToken sets field value
func (o *StatementSummary) SetAccountToken(v string) {
	o.AccountToken = v
}

// GetAvailableCredit returns the AvailableCredit field value
func (o *StatementSummary) GetAvailableCredit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AvailableCredit
}

// GetAvailableCreditOk returns a tuple with the AvailableCredit field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetAvailableCreditOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableCredit, true
}

// SetAvailableCredit sets field value
func (o *StatementSummary) SetAvailableCredit(v float32) {
	o.AvailableCredit = v
}

// GetClosingBalance returns the ClosingBalance field value
func (o *StatementSummary) GetClosingBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ClosingBalance
}

// GetClosingBalanceOk returns a tuple with the ClosingBalance field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetClosingBalanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClosingBalance, true
}

// SetClosingBalance sets field value
func (o *StatementSummary) SetClosingBalance(v float32) {
	o.ClosingBalance = v
}

// GetClosingDate returns the ClosingDate field value
func (o *StatementSummary) GetClosingDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ClosingDate
}

// GetClosingDateOk returns a tuple with the ClosingDate field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetClosingDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClosingDate, true
}

// SetClosingDate sets field value
func (o *StatementSummary) SetClosingDate(v time.Time) {
	o.ClosingDate = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *StatementSummary) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *StatementSummary) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetCreditLimit returns the CreditLimit field value if set, zero value otherwise.
func (o *StatementSummary) GetCreditLimit() float32 {
	if o == nil || IsNil(o.CreditLimit) {
		var ret float32
		return ret
	}
	return *o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetCreditLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditLimit) {
		return nil, false
	}
	return o.CreditLimit, true
}

// HasCreditLimit returns a boolean if a field has been set.
func (o *StatementSummary) HasCreditLimit() bool {
	if o != nil && !IsNil(o.CreditLimit) {
		return true
	}

	return false
}

// SetCreditLimit gets a reference to the given float32 and assigns it to the CreditLimit field.
func (o *StatementSummary) SetCreditLimit(v float32) {
	o.CreditLimit = &v
}

// GetCredits returns the Credits field value
func (o *StatementSummary) GetCredits() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Credits
}

// GetCreditsOk returns a tuple with the Credits field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetCreditsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credits, true
}

// SetCredits sets field value
func (o *StatementSummary) SetCredits(v float32) {
	o.Credits = v
}

// GetCycleType returns the CycleType field value
func (o *StatementSummary) GetCycleType() CycleType {
	if o == nil {
		var ret CycleType
		return ret
	}

	return o.CycleType
}

// GetCycleTypeOk returns a tuple with the CycleType field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetCycleTypeOk() (*CycleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CycleType, true
}

// SetCycleType sets field value
func (o *StatementSummary) SetCycleType(v CycleType) {
	o.CycleType = v
}

// GetDaysInBillingCycle returns the DaysInBillingCycle field value
func (o *StatementSummary) GetDaysInBillingCycle() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DaysInBillingCycle
}

// GetDaysInBillingCycleOk returns a tuple with the DaysInBillingCycle field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetDaysInBillingCycleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DaysInBillingCycle, true
}

// SetDaysInBillingCycle sets field value
func (o *StatementSummary) SetDaysInBillingCycle(v int32) {
	o.DaysInBillingCycle = v
}

// GetFees returns the Fees field value
func (o *StatementSummary) GetFees() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetFeesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fees, true
}

// SetFees sets field value
func (o *StatementSummary) SetFees(v float32) {
	o.Fees = v
}

// GetInterest returns the Interest field value
func (o *StatementSummary) GetInterest() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Interest
}

// GetInterestOk returns a tuple with the Interest field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetInterestOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interest, true
}

// SetInterest sets field value
func (o *StatementSummary) SetInterest(v float32) {
	o.Interest = v
}

// GetOpeningBalance returns the OpeningBalance field value
func (o *StatementSummary) GetOpeningBalance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.OpeningBalance
}

// GetOpeningBalanceOk returns a tuple with the OpeningBalance field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetOpeningBalanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpeningBalance, true
}

// SetOpeningBalance sets field value
func (o *StatementSummary) SetOpeningBalance(v float32) {
	o.OpeningBalance = v
}

// GetOpeningDate returns the OpeningDate field value
func (o *StatementSummary) GetOpeningDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.OpeningDate
}

// GetOpeningDateOk returns a tuple with the OpeningDate field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetOpeningDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpeningDate, true
}

// SetOpeningDate sets field value
func (o *StatementSummary) SetOpeningDate(v time.Time) {
	o.OpeningDate = v
}

// GetPastDueAmount returns the PastDueAmount field value
func (o *StatementSummary) GetPastDueAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PastDueAmount
}

// GetPastDueAmountOk returns a tuple with the PastDueAmount field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetPastDueAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PastDueAmount, true
}

// SetPastDueAmount sets field value
func (o *StatementSummary) SetPastDueAmount(v float32) {
	o.PastDueAmount = v
}

// GetPayments returns the Payments field value
func (o *StatementSummary) GetPayments() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetPaymentsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payments, true
}

// SetPayments sets field value
func (o *StatementSummary) SetPayments(v float32) {
	o.Payments = v
}

// GetPurchases returns the Purchases field value
func (o *StatementSummary) GetPurchases() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Purchases
}

// GetPurchasesOk returns a tuple with the Purchases field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetPurchasesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Purchases, true
}

// SetPurchases sets field value
func (o *StatementSummary) SetPurchases(v float32) {
	o.Purchases = v
}

// GetToken returns the Token field value
func (o *StatementSummary) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *StatementSummary) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *StatementSummary) SetToken(v string) {
	o.Token = v
}

func (o StatementSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatementSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_token"] = o.AccountToken
	toSerialize["available_credit"] = o.AvailableCredit
	toSerialize["closing_balance"] = o.ClosingBalance
	toSerialize["closing_date"] = o.ClosingDate
	toSerialize["created_time"] = o.CreatedTime
	if !IsNil(o.CreditLimit) {
		toSerialize["credit_limit"] = o.CreditLimit
	}
	toSerialize["credits"] = o.Credits
	toSerialize["cycle_type"] = o.CycleType
	toSerialize["days_in_billing_cycle"] = o.DaysInBillingCycle
	toSerialize["fees"] = o.Fees
	toSerialize["interest"] = o.Interest
	toSerialize["opening_balance"] = o.OpeningBalance
	toSerialize["opening_date"] = o.OpeningDate
	toSerialize["past_due_amount"] = o.PastDueAmount
	toSerialize["payments"] = o.Payments
	toSerialize["purchases"] = o.Purchases
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

type NullableStatementSummary struct {
	value *StatementSummary
	isSet bool
}

func (v NullableStatementSummary) Get() *StatementSummary {
	return v.value
}

func (v *NullableStatementSummary) Set(val *StatementSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementSummary(val *StatementSummary) *NullableStatementSummary {
	return &NullableStatementSummary{value: val, isSet: true}
}

func (v NullableStatementSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


