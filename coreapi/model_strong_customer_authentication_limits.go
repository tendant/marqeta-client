/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the StrongCustomerAuthenticationLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StrongCustomerAuthenticationLimits{}

// StrongCustomerAuthenticationLimits Contains information about Strong Customer Authentication (SCA) behavior for contactless point-of-sale (POS) and low-value payment (LVP) e-commerce transactions.
type StrongCustomerAuthenticationLimits struct {
	CavvAuthenticationAmountIncrementalPercentage *string `json:"cavv_authentication_amount_incremental_percentage,omitempty"`
	EnableCavvAuthenticationAmountValidation *bool `json:"enable_cavv_authentication_amount_validation,omitempty"`
	// Specifies the cumulative limit of transactions the cardholder can perform before receiving an SCA challenge.  A value of `0` in this field means that the cumulative amount spent in contactless POS transactions performed by the cardholder does not impact the decision of whether or not an SCA challenge is served.
	ScaContactlessCumulativeAmountLimit *float32 `json:"sca_contactless_cumulative_amount_limit,omitempty"`
	// Specifies the maximum allowable amount for a single contactless point-of-sale (POS) transaction, above which the cardholder receives a strong customer authentication (SCA) challenge.  A value of `0` in this field means that the amount of any single contactless POS transaction performed by the cardholder does not impact the decision of whether or not an SCA challenge is served.
	ScaContactlessTransactionLimit *float32 `json:"sca_contactless_transaction_limit,omitempty"`
	// Specifies the number of contactless POS transactions the cardholder can perform before receiving an SCA challenge.  A value of `0` in this field means that the number of contactless POS transactions performed by the cardholder does not impact the decision of whether or not an SCA challenge is served.
	ScaContactlessTransactionsCountLimit *int32 `json:"sca_contactless_transactions_count_limit,omitempty"`
	// Specifies the currency type for contactless POS transactions.  This field is required if either the `sca_contactless_transaction_limit` field or the `sca_contactless_cumulative_amount_limit` field in this object contains a value, even if that value is `0`.
	ScaContactlessTransactionsCurrency *string `json:"sca_contactless_transactions_currency,omitempty"`
	// Specifies the cumulative limit of LVP e-commerce transactions the cardholder can perform before receiving an SCA challenge.  For example, if you set the value of this field to `100.00`, your cardholder can perform two transactions for `30.00` and two transactions for `20.00` before receiving an SCA challenge.  If you leave this field blank, the cumulative amount spent in LVP e-commerce transactions performed by the cardholder does not impact the decision of whether or not an SCA challenge is served.
	ScaLvpCumulativeAmountLimit *float32 `json:"sca_lvp_cumulative_amount_limit,omitempty"`
	// Specifies the maximum allowable amount for a single low-value payment (LVP) e-commerce transaction, above which the cardholder receives a strong customer authentication (SCA) challenge.  If you leave this field blank, the amount of any single LVP e-commerce transaction performed by the cardholder does not impact the decision of whether or not an SCA challenge is served.
	ScaLvpTransactionLimit *float32 `json:"sca_lvp_transaction_limit,omitempty"`
	// Specifies the number of LVP e-commerce transactions the cardholder can perform before receiving an SCA challenge.  If you leave this field blank, the total number of LVP e-commerce transactions performed by the cardholder does not impact the decision of whether or not an SCA challenge is served.
	ScaLvpTransactionsCountLimit *int32 `json:"sca_lvp_transactions_count_limit,omitempty"`
	// Specifies the currency type for LVP e-commerce transaction limits.  This field is required if any one of the `sca_lvp_transaction_limit`, `sca_lvp_cumulative_amount_limit`, or `sca_lvp_transactions_count_limit` fields in this object contains a value, even if that value is `0`.
	ScaLvpTransactionsCurrency *string `json:"sca_lvp_transactions_currency,omitempty"`
	// Specifies the maximum allowable amount for a single low-value payment (LVP) e-commerce transaction with transaction risk analysis (TRA) exemption sent by the merchant or acquirer. If the transaction amount exceeds the specified limit, then the transaction is either approved or it receives a strong customer authentication (SCA) challenge based on `sca_lvp_transaction_limit` and `sca_lvp_transactions_currency`.
	ScaTraExemptionAmountLimit *float32 `json:"sca_tra_exemption_amount_limit,omitempty"`
}

// NewStrongCustomerAuthenticationLimits instantiates a new StrongCustomerAuthenticationLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrongCustomerAuthenticationLimits() *StrongCustomerAuthenticationLimits {
	this := StrongCustomerAuthenticationLimits{}
	return &this
}

// NewStrongCustomerAuthenticationLimitsWithDefaults instantiates a new StrongCustomerAuthenticationLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrongCustomerAuthenticationLimitsWithDefaults() *StrongCustomerAuthenticationLimits {
	this := StrongCustomerAuthenticationLimits{}
	return &this
}

// GetCavvAuthenticationAmountIncrementalPercentage returns the CavvAuthenticationAmountIncrementalPercentage field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetCavvAuthenticationAmountIncrementalPercentage() string {
	if o == nil || IsNil(o.CavvAuthenticationAmountIncrementalPercentage) {
		var ret string
		return ret
	}
	return *o.CavvAuthenticationAmountIncrementalPercentage
}

// GetCavvAuthenticationAmountIncrementalPercentageOk returns a tuple with the CavvAuthenticationAmountIncrementalPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetCavvAuthenticationAmountIncrementalPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.CavvAuthenticationAmountIncrementalPercentage) {
		return nil, false
	}
	return o.CavvAuthenticationAmountIncrementalPercentage, true
}

// HasCavvAuthenticationAmountIncrementalPercentage returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasCavvAuthenticationAmountIncrementalPercentage() bool {
	if o != nil && !IsNil(o.CavvAuthenticationAmountIncrementalPercentage) {
		return true
	}

	return false
}

// SetCavvAuthenticationAmountIncrementalPercentage gets a reference to the given string and assigns it to the CavvAuthenticationAmountIncrementalPercentage field.
func (o *StrongCustomerAuthenticationLimits) SetCavvAuthenticationAmountIncrementalPercentage(v string) {
	o.CavvAuthenticationAmountIncrementalPercentage = &v
}

// GetEnableCavvAuthenticationAmountValidation returns the EnableCavvAuthenticationAmountValidation field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetEnableCavvAuthenticationAmountValidation() bool {
	if o == nil || IsNil(o.EnableCavvAuthenticationAmountValidation) {
		var ret bool
		return ret
	}
	return *o.EnableCavvAuthenticationAmountValidation
}

// GetEnableCavvAuthenticationAmountValidationOk returns a tuple with the EnableCavvAuthenticationAmountValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetEnableCavvAuthenticationAmountValidationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCavvAuthenticationAmountValidation) {
		return nil, false
	}
	return o.EnableCavvAuthenticationAmountValidation, true
}

// HasEnableCavvAuthenticationAmountValidation returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasEnableCavvAuthenticationAmountValidation() bool {
	if o != nil && !IsNil(o.EnableCavvAuthenticationAmountValidation) {
		return true
	}

	return false
}

// SetEnableCavvAuthenticationAmountValidation gets a reference to the given bool and assigns it to the EnableCavvAuthenticationAmountValidation field.
func (o *StrongCustomerAuthenticationLimits) SetEnableCavvAuthenticationAmountValidation(v bool) {
	o.EnableCavvAuthenticationAmountValidation = &v
}

// GetScaContactlessCumulativeAmountLimit returns the ScaContactlessCumulativeAmountLimit field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetScaContactlessCumulativeAmountLimit() float32 {
	if o == nil || IsNil(o.ScaContactlessCumulativeAmountLimit) {
		var ret float32
		return ret
	}
	return *o.ScaContactlessCumulativeAmountLimit
}

// GetScaContactlessCumulativeAmountLimitOk returns a tuple with the ScaContactlessCumulativeAmountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetScaContactlessCumulativeAmountLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.ScaContactlessCumulativeAmountLimit) {
		return nil, false
	}
	return o.ScaContactlessCumulativeAmountLimit, true
}

// HasScaContactlessCumulativeAmountLimit returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasScaContactlessCumulativeAmountLimit() bool {
	if o != nil && !IsNil(o.ScaContactlessCumulativeAmountLimit) {
		return true
	}

	return false
}

// SetScaContactlessCumulativeAmountLimit gets a reference to the given float32 and assigns it to the ScaContactlessCumulativeAmountLimit field.
func (o *StrongCustomerAuthenticationLimits) SetScaContactlessCumulativeAmountLimit(v float32) {
	o.ScaContactlessCumulativeAmountLimit = &v
}

// GetScaContactlessTransactionLimit returns the ScaContactlessTransactionLimit field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetScaContactlessTransactionLimit() float32 {
	if o == nil || IsNil(o.ScaContactlessTransactionLimit) {
		var ret float32
		return ret
	}
	return *o.ScaContactlessTransactionLimit
}

// GetScaContactlessTransactionLimitOk returns a tuple with the ScaContactlessTransactionLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetScaContactlessTransactionLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.ScaContactlessTransactionLimit) {
		return nil, false
	}
	return o.ScaContactlessTransactionLimit, true
}

// HasScaContactlessTransactionLimit returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasScaContactlessTransactionLimit() bool {
	if o != nil && !IsNil(o.ScaContactlessTransactionLimit) {
		return true
	}

	return false
}

// SetScaContactlessTransactionLimit gets a reference to the given float32 and assigns it to the ScaContactlessTransactionLimit field.
func (o *StrongCustomerAuthenticationLimits) SetScaContactlessTransactionLimit(v float32) {
	o.ScaContactlessTransactionLimit = &v
}

// GetScaContactlessTransactionsCountLimit returns the ScaContactlessTransactionsCountLimit field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetScaContactlessTransactionsCountLimit() int32 {
	if o == nil || IsNil(o.ScaContactlessTransactionsCountLimit) {
		var ret int32
		return ret
	}
	return *o.ScaContactlessTransactionsCountLimit
}

// GetScaContactlessTransactionsCountLimitOk returns a tuple with the ScaContactlessTransactionsCountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetScaContactlessTransactionsCountLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.ScaContactlessTransactionsCountLimit) {
		return nil, false
	}
	return o.ScaContactlessTransactionsCountLimit, true
}

// HasScaContactlessTransactionsCountLimit returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasScaContactlessTransactionsCountLimit() bool {
	if o != nil && !IsNil(o.ScaContactlessTransactionsCountLimit) {
		return true
	}

	return false
}

// SetScaContactlessTransactionsCountLimit gets a reference to the given int32 and assigns it to the ScaContactlessTransactionsCountLimit field.
func (o *StrongCustomerAuthenticationLimits) SetScaContactlessTransactionsCountLimit(v int32) {
	o.ScaContactlessTransactionsCountLimit = &v
}

// GetScaContactlessTransactionsCurrency returns the ScaContactlessTransactionsCurrency field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetScaContactlessTransactionsCurrency() string {
	if o == nil || IsNil(o.ScaContactlessTransactionsCurrency) {
		var ret string
		return ret
	}
	return *o.ScaContactlessTransactionsCurrency
}

// GetScaContactlessTransactionsCurrencyOk returns a tuple with the ScaContactlessTransactionsCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetScaContactlessTransactionsCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.ScaContactlessTransactionsCurrency) {
		return nil, false
	}
	return o.ScaContactlessTransactionsCurrency, true
}

// HasScaContactlessTransactionsCurrency returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasScaContactlessTransactionsCurrency() bool {
	if o != nil && !IsNil(o.ScaContactlessTransactionsCurrency) {
		return true
	}

	return false
}

// SetScaContactlessTransactionsCurrency gets a reference to the given string and assigns it to the ScaContactlessTransactionsCurrency field.
func (o *StrongCustomerAuthenticationLimits) SetScaContactlessTransactionsCurrency(v string) {
	o.ScaContactlessTransactionsCurrency = &v
}

// GetScaLvpCumulativeAmountLimit returns the ScaLvpCumulativeAmountLimit field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetScaLvpCumulativeAmountLimit() float32 {
	if o == nil || IsNil(o.ScaLvpCumulativeAmountLimit) {
		var ret float32
		return ret
	}
	return *o.ScaLvpCumulativeAmountLimit
}

// GetScaLvpCumulativeAmountLimitOk returns a tuple with the ScaLvpCumulativeAmountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetScaLvpCumulativeAmountLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.ScaLvpCumulativeAmountLimit) {
		return nil, false
	}
	return o.ScaLvpCumulativeAmountLimit, true
}

// HasScaLvpCumulativeAmountLimit returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasScaLvpCumulativeAmountLimit() bool {
	if o != nil && !IsNil(o.ScaLvpCumulativeAmountLimit) {
		return true
	}

	return false
}

// SetScaLvpCumulativeAmountLimit gets a reference to the given float32 and assigns it to the ScaLvpCumulativeAmountLimit field.
func (o *StrongCustomerAuthenticationLimits) SetScaLvpCumulativeAmountLimit(v float32) {
	o.ScaLvpCumulativeAmountLimit = &v
}

// GetScaLvpTransactionLimit returns the ScaLvpTransactionLimit field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetScaLvpTransactionLimit() float32 {
	if o == nil || IsNil(o.ScaLvpTransactionLimit) {
		var ret float32
		return ret
	}
	return *o.ScaLvpTransactionLimit
}

// GetScaLvpTransactionLimitOk returns a tuple with the ScaLvpTransactionLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetScaLvpTransactionLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.ScaLvpTransactionLimit) {
		return nil, false
	}
	return o.ScaLvpTransactionLimit, true
}

// HasScaLvpTransactionLimit returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasScaLvpTransactionLimit() bool {
	if o != nil && !IsNil(o.ScaLvpTransactionLimit) {
		return true
	}

	return false
}

// SetScaLvpTransactionLimit gets a reference to the given float32 and assigns it to the ScaLvpTransactionLimit field.
func (o *StrongCustomerAuthenticationLimits) SetScaLvpTransactionLimit(v float32) {
	o.ScaLvpTransactionLimit = &v
}

// GetScaLvpTransactionsCountLimit returns the ScaLvpTransactionsCountLimit field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetScaLvpTransactionsCountLimit() int32 {
	if o == nil || IsNil(o.ScaLvpTransactionsCountLimit) {
		var ret int32
		return ret
	}
	return *o.ScaLvpTransactionsCountLimit
}

// GetScaLvpTransactionsCountLimitOk returns a tuple with the ScaLvpTransactionsCountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetScaLvpTransactionsCountLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.ScaLvpTransactionsCountLimit) {
		return nil, false
	}
	return o.ScaLvpTransactionsCountLimit, true
}

// HasScaLvpTransactionsCountLimit returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasScaLvpTransactionsCountLimit() bool {
	if o != nil && !IsNil(o.ScaLvpTransactionsCountLimit) {
		return true
	}

	return false
}

// SetScaLvpTransactionsCountLimit gets a reference to the given int32 and assigns it to the ScaLvpTransactionsCountLimit field.
func (o *StrongCustomerAuthenticationLimits) SetScaLvpTransactionsCountLimit(v int32) {
	o.ScaLvpTransactionsCountLimit = &v
}

// GetScaLvpTransactionsCurrency returns the ScaLvpTransactionsCurrency field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetScaLvpTransactionsCurrency() string {
	if o == nil || IsNil(o.ScaLvpTransactionsCurrency) {
		var ret string
		return ret
	}
	return *o.ScaLvpTransactionsCurrency
}

// GetScaLvpTransactionsCurrencyOk returns a tuple with the ScaLvpTransactionsCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetScaLvpTransactionsCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.ScaLvpTransactionsCurrency) {
		return nil, false
	}
	return o.ScaLvpTransactionsCurrency, true
}

// HasScaLvpTransactionsCurrency returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasScaLvpTransactionsCurrency() bool {
	if o != nil && !IsNil(o.ScaLvpTransactionsCurrency) {
		return true
	}

	return false
}

// SetScaLvpTransactionsCurrency gets a reference to the given string and assigns it to the ScaLvpTransactionsCurrency field.
func (o *StrongCustomerAuthenticationLimits) SetScaLvpTransactionsCurrency(v string) {
	o.ScaLvpTransactionsCurrency = &v
}

// GetScaTraExemptionAmountLimit returns the ScaTraExemptionAmountLimit field value if set, zero value otherwise.
func (o *StrongCustomerAuthenticationLimits) GetScaTraExemptionAmountLimit() float32 {
	if o == nil || IsNil(o.ScaTraExemptionAmountLimit) {
		var ret float32
		return ret
	}
	return *o.ScaTraExemptionAmountLimit
}

// GetScaTraExemptionAmountLimitOk returns a tuple with the ScaTraExemptionAmountLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrongCustomerAuthenticationLimits) GetScaTraExemptionAmountLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.ScaTraExemptionAmountLimit) {
		return nil, false
	}
	return o.ScaTraExemptionAmountLimit, true
}

// HasScaTraExemptionAmountLimit returns a boolean if a field has been set.
func (o *StrongCustomerAuthenticationLimits) HasScaTraExemptionAmountLimit() bool {
	if o != nil && !IsNil(o.ScaTraExemptionAmountLimit) {
		return true
	}

	return false
}

// SetScaTraExemptionAmountLimit gets a reference to the given float32 and assigns it to the ScaTraExemptionAmountLimit field.
func (o *StrongCustomerAuthenticationLimits) SetScaTraExemptionAmountLimit(v float32) {
	o.ScaTraExemptionAmountLimit = &v
}

func (o StrongCustomerAuthenticationLimits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StrongCustomerAuthenticationLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CavvAuthenticationAmountIncrementalPercentage) {
		toSerialize["cavv_authentication_amount_incremental_percentage"] = o.CavvAuthenticationAmountIncrementalPercentage
	}
	if !IsNil(o.EnableCavvAuthenticationAmountValidation) {
		toSerialize["enable_cavv_authentication_amount_validation"] = o.EnableCavvAuthenticationAmountValidation
	}
	if !IsNil(o.ScaContactlessCumulativeAmountLimit) {
		toSerialize["sca_contactless_cumulative_amount_limit"] = o.ScaContactlessCumulativeAmountLimit
	}
	if !IsNil(o.ScaContactlessTransactionLimit) {
		toSerialize["sca_contactless_transaction_limit"] = o.ScaContactlessTransactionLimit
	}
	if !IsNil(o.ScaContactlessTransactionsCountLimit) {
		toSerialize["sca_contactless_transactions_count_limit"] = o.ScaContactlessTransactionsCountLimit
	}
	if !IsNil(o.ScaContactlessTransactionsCurrency) {
		toSerialize["sca_contactless_transactions_currency"] = o.ScaContactlessTransactionsCurrency
	}
	if !IsNil(o.ScaLvpCumulativeAmountLimit) {
		toSerialize["sca_lvp_cumulative_amount_limit"] = o.ScaLvpCumulativeAmountLimit
	}
	if !IsNil(o.ScaLvpTransactionLimit) {
		toSerialize["sca_lvp_transaction_limit"] = o.ScaLvpTransactionLimit
	}
	if !IsNil(o.ScaLvpTransactionsCountLimit) {
		toSerialize["sca_lvp_transactions_count_limit"] = o.ScaLvpTransactionsCountLimit
	}
	if !IsNil(o.ScaLvpTransactionsCurrency) {
		toSerialize["sca_lvp_transactions_currency"] = o.ScaLvpTransactionsCurrency
	}
	if !IsNil(o.ScaTraExemptionAmountLimit) {
		toSerialize["sca_tra_exemption_amount_limit"] = o.ScaTraExemptionAmountLimit
	}
	return toSerialize, nil
}

type NullableStrongCustomerAuthenticationLimits struct {
	value *StrongCustomerAuthenticationLimits
	isSet bool
}

func (v NullableStrongCustomerAuthenticationLimits) Get() *StrongCustomerAuthenticationLimits {
	return v.value
}

func (v *NullableStrongCustomerAuthenticationLimits) Set(val *StrongCustomerAuthenticationLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableStrongCustomerAuthenticationLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableStrongCustomerAuthenticationLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrongCustomerAuthenticationLimits(val *StrongCustomerAuthenticationLimits) *NullableStrongCustomerAuthenticationLimits {
	return &NullableStrongCustomerAuthenticationLimits{value: val, isSet: true}
}

func (v NullableStrongCustomerAuthenticationLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrongCustomerAuthenticationLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


