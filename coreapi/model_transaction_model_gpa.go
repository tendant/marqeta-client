/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the TransactionModelGpa type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionModelGpa{}

// TransactionModelGpa Contains information about the GPA balances and pending credits.
type TransactionModelGpa struct {
	// When using standard funding: The funds that are available to spend immediately, including funds from any authorized transactions that have not yet cleared. When using Just-in-Time (JIT) Funding: Authorized funds that are currently on hold, but not yet cleared.
	LedgerBalance *float32 `json:"ledger_balance,omitempty"`
	// Ledger balance minus any authorized transactions that have not yet cleared. Also known as the cardholder's purchasing power. When using JIT Funding, this balance is usually equal to $0.00.
	AvailableBalance *float32 `json:"available_balance,omitempty"`
	// Balance change based on the amount of the transaction.
	ImpactedAmount *float32 `json:"impacted_amount,omitempty"`
}

// NewTransactionModelGpa instantiates a new TransactionModelGpa object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionModelGpa() *TransactionModelGpa {
	this := TransactionModelGpa{}
	return &this
}

// NewTransactionModelGpaWithDefaults instantiates a new TransactionModelGpa object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionModelGpaWithDefaults() *TransactionModelGpa {
	this := TransactionModelGpa{}
	return &this
}

// GetLedgerBalance returns the LedgerBalance field value if set, zero value otherwise.
func (o *TransactionModelGpa) GetLedgerBalance() float32 {
	if o == nil || IsNil(o.LedgerBalance) {
		var ret float32
		return ret
	}
	return *o.LedgerBalance
}

// GetLedgerBalanceOk returns a tuple with the LedgerBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModelGpa) GetLedgerBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.LedgerBalance) {
		return nil, false
	}
	return o.LedgerBalance, true
}

// HasLedgerBalance returns a boolean if a field has been set.
func (o *TransactionModelGpa) HasLedgerBalance() bool {
	if o != nil && !IsNil(o.LedgerBalance) {
		return true
	}

	return false
}

// SetLedgerBalance gets a reference to the given float32 and assigns it to the LedgerBalance field.
func (o *TransactionModelGpa) SetLedgerBalance(v float32) {
	o.LedgerBalance = &v
}

// GetAvailableBalance returns the AvailableBalance field value if set, zero value otherwise.
func (o *TransactionModelGpa) GetAvailableBalance() float32 {
	if o == nil || IsNil(o.AvailableBalance) {
		var ret float32
		return ret
	}
	return *o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModelGpa) GetAvailableBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.AvailableBalance) {
		return nil, false
	}
	return o.AvailableBalance, true
}

// HasAvailableBalance returns a boolean if a field has been set.
func (o *TransactionModelGpa) HasAvailableBalance() bool {
	if o != nil && !IsNil(o.AvailableBalance) {
		return true
	}

	return false
}

// SetAvailableBalance gets a reference to the given float32 and assigns it to the AvailableBalance field.
func (o *TransactionModelGpa) SetAvailableBalance(v float32) {
	o.AvailableBalance = &v
}

// GetImpactedAmount returns the ImpactedAmount field value if set, zero value otherwise.
func (o *TransactionModelGpa) GetImpactedAmount() float32 {
	if o == nil || IsNil(o.ImpactedAmount) {
		var ret float32
		return ret
	}
	return *o.ImpactedAmount
}

// GetImpactedAmountOk returns a tuple with the ImpactedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionModelGpa) GetImpactedAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.ImpactedAmount) {
		return nil, false
	}
	return o.ImpactedAmount, true
}

// HasImpactedAmount returns a boolean if a field has been set.
func (o *TransactionModelGpa) HasImpactedAmount() bool {
	if o != nil && !IsNil(o.ImpactedAmount) {
		return true
	}

	return false
}

// SetImpactedAmount gets a reference to the given float32 and assigns it to the ImpactedAmount field.
func (o *TransactionModelGpa) SetImpactedAmount(v float32) {
	o.ImpactedAmount = &v
}

func (o TransactionModelGpa) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionModelGpa) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LedgerBalance) {
		toSerialize["ledger_balance"] = o.LedgerBalance
	}
	if !IsNil(o.AvailableBalance) {
		toSerialize["available_balance"] = o.AvailableBalance
	}
	if !IsNil(o.ImpactedAmount) {
		toSerialize["impacted_amount"] = o.ImpactedAmount
	}
	return toSerialize, nil
}

type NullableTransactionModelGpa struct {
	value *TransactionModelGpa
	isSet bool
}

func (v NullableTransactionModelGpa) Get() *TransactionModelGpa {
	return v.value
}

func (v *NullableTransactionModelGpa) Set(val *TransactionModelGpa) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionModelGpa) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionModelGpa) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionModelGpa(val *TransactionModelGpa) *NullableTransactionModelGpa {
	return &NullableTransactionModelGpa{value: val, isSet: true}
}

func (v NullableTransactionModelGpa) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionModelGpa) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


