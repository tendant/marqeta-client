/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the Transit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transit{}

// Transit Contains merchant-provided, transit-related metadata related to the transaction.
type Transit struct {
	// Type of transit transaction.
	TransactionType *string `json:"transaction_type,omitempty"`
	// Mode of transportation.
	TransportationMode *string `json:"transportation_mode,omitempty"`
}

// NewTransit instantiates a new Transit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransit() *Transit {
	this := Transit{}
	return &this
}

// NewTransitWithDefaults instantiates a new Transit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransitWithDefaults() *Transit {
	this := Transit{}
	return &this
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *Transit) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType) {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transit) GetTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *Transit) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *Transit) SetTransactionType(v string) {
	o.TransactionType = &v
}

// GetTransportationMode returns the TransportationMode field value if set, zero value otherwise.
func (o *Transit) GetTransportationMode() string {
	if o == nil || IsNil(o.TransportationMode) {
		var ret string
		return ret
	}
	return *o.TransportationMode
}

// GetTransportationModeOk returns a tuple with the TransportationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transit) GetTransportationModeOk() (*string, bool) {
	if o == nil || IsNil(o.TransportationMode) {
		return nil, false
	}
	return o.TransportationMode, true
}

// HasTransportationMode returns a boolean if a field has been set.
func (o *Transit) HasTransportationMode() bool {
	if o != nil && !IsNil(o.TransportationMode) {
		return true
	}

	return false
}

// SetTransportationMode gets a reference to the given string and assigns it to the TransportationMode field.
func (o *Transit) SetTransportationMode(v string) {
	o.TransportationMode = &v
}

func (o Transit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionType) {
		toSerialize["transaction_type"] = o.TransactionType
	}
	if !IsNil(o.TransportationMode) {
		toSerialize["transportation_mode"] = o.TransportationMode
	}
	return toSerialize, nil
}

type NullableTransit struct {
	value *Transit
	isSet bool
}

func (v NullableTransit) Get() *Transit {
	return v.value
}

func (v *NullableTransit) Set(val *Transit) {
	v.value = val
	v.isSet = true
}

func (v NullableTransit) IsSet() bool {
	return v.isSet
}

func (v *NullableTransit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransit(val *Transit) *NullableTransit {
	return &NullableTransit{value: val, isSet: true}
}

func (v NullableTransit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


