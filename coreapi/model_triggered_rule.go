/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the TriggeredRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TriggeredRule{}

// TriggeredRule Provides a list of rules triggered by a fraud event, along with the information on tags and rule characteristics.
type TriggeredRule struct {
	// Indicates if the rule triggered an alert.
	Alert *bool `json:"alert,omitempty"`
	// The entity type where the triggered rule was defined.
	EntityType *string `json:"entity_type,omitempty"`
	// Name of the rule, as defined in the Real-Time Decisioning dashboard that was triggered.
	RuleName *string `json:"rule_name,omitempty"`
	// Indicates if the triggered rule has `suppress_alert` in the definition.
	SuppressAlert *bool `json:"suppress_alert,omitempty"`
	// All the tags defined in the triggered rule.
	Tags []Tag `json:"tags,omitempty"`
}

// NewTriggeredRule instantiates a new TriggeredRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggeredRule() *TriggeredRule {
	this := TriggeredRule{}
	return &this
}

// NewTriggeredRuleWithDefaults instantiates a new TriggeredRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggeredRuleWithDefaults() *TriggeredRule {
	this := TriggeredRule{}
	return &this
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *TriggeredRule) GetAlert() bool {
	if o == nil || IsNil(o.Alert) {
		var ret bool
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggeredRule) GetAlertOk() (*bool, bool) {
	if o == nil || IsNil(o.Alert) {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *TriggeredRule) HasAlert() bool {
	if o != nil && !IsNil(o.Alert) {
		return true
	}

	return false
}

// SetAlert gets a reference to the given bool and assigns it to the Alert field.
func (o *TriggeredRule) SetAlert(v bool) {
	o.Alert = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *TriggeredRule) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggeredRule) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *TriggeredRule) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *TriggeredRule) SetEntityType(v string) {
	o.EntityType = &v
}

// GetRuleName returns the RuleName field value if set, zero value otherwise.
func (o *TriggeredRule) GetRuleName() string {
	if o == nil || IsNil(o.RuleName) {
		var ret string
		return ret
	}
	return *o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggeredRule) GetRuleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuleName) {
		return nil, false
	}
	return o.RuleName, true
}

// HasRuleName returns a boolean if a field has been set.
func (o *TriggeredRule) HasRuleName() bool {
	if o != nil && !IsNil(o.RuleName) {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given string and assigns it to the RuleName field.
func (o *TriggeredRule) SetRuleName(v string) {
	o.RuleName = &v
}

// GetSuppressAlert returns the SuppressAlert field value if set, zero value otherwise.
func (o *TriggeredRule) GetSuppressAlert() bool {
	if o == nil || IsNil(o.SuppressAlert) {
		var ret bool
		return ret
	}
	return *o.SuppressAlert
}

// GetSuppressAlertOk returns a tuple with the SuppressAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggeredRule) GetSuppressAlertOk() (*bool, bool) {
	if o == nil || IsNil(o.SuppressAlert) {
		return nil, false
	}
	return o.SuppressAlert, true
}

// HasSuppressAlert returns a boolean if a field has been set.
func (o *TriggeredRule) HasSuppressAlert() bool {
	if o != nil && !IsNil(o.SuppressAlert) {
		return true
	}

	return false
}

// SetSuppressAlert gets a reference to the given bool and assigns it to the SuppressAlert field.
func (o *TriggeredRule) SetSuppressAlert(v bool) {
	o.SuppressAlert = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TriggeredRule) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TriggeredRule) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TriggeredRule) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *TriggeredRule) SetTags(v []Tag) {
	o.Tags = v
}

func (o TriggeredRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TriggeredRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alert) {
		toSerialize["alert"] = o.Alert
	}
	if !IsNil(o.EntityType) {
		toSerialize["entity_type"] = o.EntityType
	}
	if !IsNil(o.RuleName) {
		toSerialize["rule_name"] = o.RuleName
	}
	if !IsNil(o.SuppressAlert) {
		toSerialize["suppress_alert"] = o.SuppressAlert
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableTriggeredRule struct {
	value *TriggeredRule
	isSet bool
}

func (v NullableTriggeredRule) Get() *TriggeredRule {
	return v.value
}

func (v *NullableTriggeredRule) Set(val *TriggeredRule) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggeredRule) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggeredRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggeredRule(val *TriggeredRule) *NullableTriggeredRule {
	return &NullableTriggeredRule{value: val, isSet: true}
}

func (v NullableTriggeredRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggeredRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


