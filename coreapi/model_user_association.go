/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
)

// checks if the UserAssociation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAssociation{}

// UserAssociation Associates each card with a user.
type UserAssociation struct {
	// Set to `true` to associate all cards with the same user. Set to `false` to associate each card with a different user. When set to `false`, users are generated automatically and associated with the cards.
	SingleInventoryUser *bool `json:"single_inventory_user,omitempty"`
	// If `single_inventory_user=true`, use this field to specify the token of an existing user. All cards in the order will be associated with this user.
	SingleInventoryUserToken *string `json:"single_inventory_user_token,omitempty"`
}

// NewUserAssociation instantiates a new UserAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAssociation() *UserAssociation {
	this := UserAssociation{}
	var singleInventoryUser bool = false
	this.SingleInventoryUser = &singleInventoryUser
	var singleInventoryUserToken string = "false"
	this.SingleInventoryUserToken = &singleInventoryUserToken
	return &this
}

// NewUserAssociationWithDefaults instantiates a new UserAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAssociationWithDefaults() *UserAssociation {
	this := UserAssociation{}
	var singleInventoryUser bool = false
	this.SingleInventoryUser = &singleInventoryUser
	var singleInventoryUserToken string = "false"
	this.SingleInventoryUserToken = &singleInventoryUserToken
	return &this
}

// GetSingleInventoryUser returns the SingleInventoryUser field value if set, zero value otherwise.
func (o *UserAssociation) GetSingleInventoryUser() bool {
	if o == nil || IsNil(o.SingleInventoryUser) {
		var ret bool
		return ret
	}
	return *o.SingleInventoryUser
}

// GetSingleInventoryUserOk returns a tuple with the SingleInventoryUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAssociation) GetSingleInventoryUserOk() (*bool, bool) {
	if o == nil || IsNil(o.SingleInventoryUser) {
		return nil, false
	}
	return o.SingleInventoryUser, true
}

// HasSingleInventoryUser returns a boolean if a field has been set.
func (o *UserAssociation) HasSingleInventoryUser() bool {
	if o != nil && !IsNil(o.SingleInventoryUser) {
		return true
	}

	return false
}

// SetSingleInventoryUser gets a reference to the given bool and assigns it to the SingleInventoryUser field.
func (o *UserAssociation) SetSingleInventoryUser(v bool) {
	o.SingleInventoryUser = &v
}

// GetSingleInventoryUserToken returns the SingleInventoryUserToken field value if set, zero value otherwise.
func (o *UserAssociation) GetSingleInventoryUserToken() string {
	if o == nil || IsNil(o.SingleInventoryUserToken) {
		var ret string
		return ret
	}
	return *o.SingleInventoryUserToken
}

// GetSingleInventoryUserTokenOk returns a tuple with the SingleInventoryUserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAssociation) GetSingleInventoryUserTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SingleInventoryUserToken) {
		return nil, false
	}
	return o.SingleInventoryUserToken, true
}

// HasSingleInventoryUserToken returns a boolean if a field has been set.
func (o *UserAssociation) HasSingleInventoryUserToken() bool {
	if o != nil && !IsNil(o.SingleInventoryUserToken) {
		return true
	}

	return false
}

// SetSingleInventoryUserToken gets a reference to the given string and assigns it to the SingleInventoryUserToken field.
func (o *UserAssociation) SetSingleInventoryUserToken(v string) {
	o.SingleInventoryUserToken = &v
}

func (o UserAssociation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAssociation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SingleInventoryUser) {
		toSerialize["single_inventory_user"] = o.SingleInventoryUser
	}
	if !IsNil(o.SingleInventoryUserToken) {
		toSerialize["single_inventory_user_token"] = o.SingleInventoryUserToken
	}
	return toSerialize, nil
}

type NullableUserAssociation struct {
	value *UserAssociation
	isSet bool
}

func (v NullableUserAssociation) Get() *UserAssociation {
	return v.value
}

func (v *NullableUserAssociation) Set(val *UserAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAssociation(val *UserAssociation) *NullableUserAssociation {
	return &NullableUserAssociation{value: val, isSet: true}
}

func (v NullableUserAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


