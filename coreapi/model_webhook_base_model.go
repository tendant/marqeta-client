/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package marqeta_coreapi_client

import (
	"encoding/json"
)

// checks if the WebhookBaseModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookBaseModel{}

// WebhookBaseModel struct for WebhookBaseModel
type WebhookBaseModel struct {
	// Indicates whether the webhook is active.
	Active *bool `json:"active,omitempty"`
	Config WebhookConfigModel `json:"config"`
	// Specifies the types of events for which notifications are sent.  The wildcard character `\\*` indicates that you receive all webhook notifications, or all notifications of a specified category. For example, `\\*` indicates that you receive all webhook notifications; `transaction.*` indicates that you receive all `transaction` webhook notifications.  *NOTE:* You can only use the wildcard character with the _base_ type events, not subcategories. For example, you cannot subscribe to `cardtransition.fulfillment.\\*` events, but you can subscribe to `cardtransition.*`.
	Events []string `json:"events"`
	// Descriptive name of the webhook.
	Name string `json:"name"`
}

// NewWebhookBaseModel instantiates a new WebhookBaseModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookBaseModel(config WebhookConfigModel, events []string, name string) *WebhookBaseModel {
	this := WebhookBaseModel{}
	var active bool = true
	this.Active = &active
	this.Config = config
	this.Events = events
	this.Name = name
	return &this
}

// NewWebhookBaseModelWithDefaults instantiates a new WebhookBaseModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookBaseModelWithDefaults() *WebhookBaseModel {
	this := WebhookBaseModel{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *WebhookBaseModel) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookBaseModel) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *WebhookBaseModel) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *WebhookBaseModel) SetActive(v bool) {
	o.Active = &v
}

// GetConfig returns the Config field value
func (o *WebhookBaseModel) GetConfig() WebhookConfigModel {
	if o == nil {
		var ret WebhookConfigModel
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *WebhookBaseModel) GetConfigOk() (*WebhookConfigModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *WebhookBaseModel) SetConfig(v WebhookConfigModel) {
	o.Config = v
}

// GetEvents returns the Events field value
func (o *WebhookBaseModel) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *WebhookBaseModel) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *WebhookBaseModel) SetEvents(v []string) {
	o.Events = v
}

// GetName returns the Name field value
func (o *WebhookBaseModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WebhookBaseModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WebhookBaseModel) SetName(v string) {
	o.Name = v
}

func (o WebhookBaseModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookBaseModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["config"] = o.Config
	toSerialize["events"] = o.Events
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableWebhookBaseModel struct {
	value *WebhookBaseModel
	isSet bool
}

func (v NullableWebhookBaseModel) Get() *WebhookBaseModel {
	return v.value
}

func (v *NullableWebhookBaseModel) Set(val *WebhookBaseModel) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookBaseModel) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookBaseModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookBaseModel(val *WebhookBaseModel) *NullableWebhookBaseModel {
	return &NullableWebhookBaseModel{value: val, isSet: true}
}

func (v NullableWebhookBaseModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookBaseModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


