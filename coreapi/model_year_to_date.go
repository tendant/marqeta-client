/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.11
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coreapi

import (
	"encoding/json"
	"time"
)

// checks if the YearToDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &YearToDate{}

// YearToDate Contains information about year-to-date totals for an account.
type YearToDate struct {
	// Unique identifier of the associated credit account.
	AccountToken string `json:"account_token"`
	// Date and time when the year-to-date total was created on Marqeta's credit platform, in UTC.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Unique identifier of the statement summary from which to retrieve year-to-date totals.
	StatementToken string `json:"statement_token"`
	// Unique identifier of the year-to-date total.
	Token *string `json:"token,omitempty"`
	// Total fees charged year-to-date.
	TotalFees float32 `json:"total_fees"`
	// Total interest charged year-to-date.
	TotalInterest float32 `json:"total_interest"`
}

// NewYearToDate instantiates a new YearToDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYearToDate(accountToken string, statementToken string, totalFees float32, totalInterest float32) *YearToDate {
	this := YearToDate{}
	this.AccountToken = accountToken
	this.StatementToken = statementToken
	this.TotalFees = totalFees
	this.TotalInterest = totalInterest
	return &this
}

// NewYearToDateWithDefaults instantiates a new YearToDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYearToDateWithDefaults() *YearToDate {
	this := YearToDate{}
	return &this
}

// GetAccountToken returns the AccountToken field value
func (o *YearToDate) GetAccountToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountToken
}

// GetAccountTokenOk returns a tuple with the AccountToken field value
// and a boolean to check if the value has been set.
func (o *YearToDate) GetAccountTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountToken, true
}

// SetAccountToken sets field value
func (o *YearToDate) SetAccountToken(v string) {
	o.AccountToken = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *YearToDate) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YearToDate) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *YearToDate) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *YearToDate) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetStatementToken returns the StatementToken field value
func (o *YearToDate) GetStatementToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatementToken
}

// GetStatementTokenOk returns a tuple with the StatementToken field value
// and a boolean to check if the value has been set.
func (o *YearToDate) GetStatementTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatementToken, true
}

// SetStatementToken sets field value
func (o *YearToDate) SetStatementToken(v string) {
	o.StatementToken = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *YearToDate) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YearToDate) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *YearToDate) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *YearToDate) SetToken(v string) {
	o.Token = &v
}

// GetTotalFees returns the TotalFees field value
func (o *YearToDate) GetTotalFees() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalFees
}

// GetTotalFeesOk returns a tuple with the TotalFees field value
// and a boolean to check if the value has been set.
func (o *YearToDate) GetTotalFeesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFees, true
}

// SetTotalFees sets field value
func (o *YearToDate) SetTotalFees(v float32) {
	o.TotalFees = v
}

// GetTotalInterest returns the TotalInterest field value
func (o *YearToDate) GetTotalInterest() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalInterest
}

// GetTotalInterestOk returns a tuple with the TotalInterest field value
// and a boolean to check if the value has been set.
func (o *YearToDate) GetTotalInterestOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalInterest, true
}

// SetTotalInterest sets field value
func (o *YearToDate) SetTotalInterest(v float32) {
	o.TotalInterest = v
}

func (o YearToDate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o YearToDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_token"] = o.AccountToken
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	toSerialize["statement_token"] = o.StatementToken
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	toSerialize["total_fees"] = o.TotalFees
	toSerialize["total_interest"] = o.TotalInterest
	return toSerialize, nil
}

type NullableYearToDate struct {
	value *YearToDate
	isSet bool
}

func (v NullableYearToDate) Get() *YearToDate {
	return v.value
}

func (v *NullableYearToDate) Set(val *YearToDate) {
	v.value = val
	v.isSet = true
}

func (v NullableYearToDate) IsSet() bool {
	return v.isSet
}

func (v *NullableYearToDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYearToDate(val *YearToDate) *NullableYearToDate {
	return &NullableYearToDate{value: val, isSet: true}
}

func (v NullableYearToDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYearToDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


