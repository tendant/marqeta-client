/*
Core API

Testing DigitalWalletsManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package marqeta_coreapi_client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tendant/marqeta-client"
)

func Test_marqeta_coreapi_client_DigitalWalletsManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DigitalWalletsManagementAPIService GenerateApplePayWPPJWT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.GenerateApplePayWPPJWT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService GetDigitalwallettokens", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.GetDigitalwallettokens(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService GetDigitalwallettokensCardCardtoken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cardToken string

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.GetDigitalwallettokensCardCardtoken(context.Background(), cardToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService GetDigitalwallettokensToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.GetDigitalwallettokensToken(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService GetDigitalwallettokensTokenShowtokenpan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.GetDigitalwallettokensTokenShowtokenpan(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService GetDigitalwallettokentransitionsDigitalwallettokenToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.GetDigitalwallettokentransitionsDigitalwallettokenToken(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService GetDigitalwallettokentransitionsToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.GetDigitalwallettokentransitionsToken(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService PostDigitalwalletprovisionrequestsAndroidpay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.PostDigitalwalletprovisionrequestsAndroidpay(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService PostDigitalwalletprovisionrequestsApplepay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.PostDigitalwalletprovisionrequestsApplepay(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService PostDigitalwalletprovisionrequestsSamsungpay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.PostDigitalwalletprovisionrequestsSamsungpay(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService PostDigitalwalletprovisionrequestsXPay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.PostDigitalwalletprovisionrequestsXPay(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService PostDigitalwallettokentransitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DigitalWalletsManagementAPI.PostDigitalwallettokentransitions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DigitalWalletsManagementAPIService SendOPCDataToGooglePay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DigitalWalletsManagementAPI.SendOPCDataToGooglePay(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
