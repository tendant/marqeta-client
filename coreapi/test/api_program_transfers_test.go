/*
Core API

Testing ProgramTransfersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package marqeta_coreapi_client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tendant/marqeta-client"
)

func Test_marqeta_coreapi_client_ProgramTransfersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProgramTransfersAPIService GetProgramtransfers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProgramTransfersAPI.GetProgramtransfers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProgramTransfersAPIService GetProgramtransfersToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.ProgramTransfersAPI.GetProgramtransfersToken(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProgramTransfersAPIService GetProgramtransfersTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProgramTransfersAPI.GetProgramtransfersTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProgramTransfersAPIService GetProgramtransfersTypesTypetoken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var typeToken string

		resp, httpRes, err := apiClient.ProgramTransfersAPI.GetProgramtransfersTypesTypetoken(context.Background(), typeToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProgramTransfersAPIService PostProgramtransfers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProgramTransfersAPI.PostProgramtransfers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProgramTransfersAPIService PostProgramtransfersTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProgramTransfersAPI.PostProgramtransfersTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProgramTransfersAPIService PutProgramtransfersTypesTypetoken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var typeToken string

		resp, httpRes, err := apiClient.ProgramTransfersAPI.PutProgramtransfersTypesTypetoken(context.Background(), typeToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
